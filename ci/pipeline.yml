---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:
- name: broker-src
  type: git
  icon: github-circle
  source:
    uri: ((cf-domain-broker-v2-git-url))
    branch: ((cf-domain-broker-v2-git-branch))

- name: pipeline-tasks
  type: git
  icon: github-circle
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: broker-deploy-dev
  type: cf
  icon: cloud-upload-outline
  source:
    api: ((cf-api-url-development))
    username: ((cf-deploy-username-development))
    password: ((cf-deploy-password-development))
    organization: ((cf-organization-development))
    space: ((cf-space-development))

#- name: broker-deploy-staging
#  type: cf
#  icon: cloud-upload-outline
#  source:
#    api: ((cf-api-url-staging))
#    username: ((cf-deploy-username-staging))
#    password: ((cf-deploy-password-staging))
#    organization: ((cf-organization-staging))
#    space: ((cf-space-staging))
#
#- name: broker-deploy-production
#  type: cf
#  icon: cloud-upload-outline
#  source:
#    api: ((cf-api-url-production))
#    username: ((cf-deploy-username-production))
#    password: ((cf-deploy-password-production))
#    organization: ((cf-organization-production))
#    space: ((cf-space-production))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

cf-creds-development: &cf-creds-development
  CF_API_URL: ((cf-api-url-development))
  CF_USERNAME: ((cf-deploy-username-development))
  CF_PASSWORD: ((cf-deploy-password-development))
  CF_ORGANIZATION: ((cf-organization-development))
  CF_SPACE: ((cf-space-development))
cf-creds-staging: &cf-creds-staging
  CF_API_URL: ((cf-api-url-staging))
  CF_USERNAME: ((cf-deploy-username-staging))
  CF_PASSWORD: ((cf-deploy-password-staging))
  CF_ORGANIZATION: ((cf-organization-staging))
  CF_SPACE: ((cf-space-staging))
cf-creds-production: &cf-creds-production
  CF_API_URL: ((cf-api-url-production))
  CF_USERNAME: ((cf-deploy-username-production))
  CF_PASSWORD: ((cf-deploy-password-production))
  CF_ORGANIZATION: ((cf-organization-production))
  CF_SPACE: ((cf-space-production))

jobs:
#- name: test-domain-broker
#  plan:
#  - get: broker-src
#    trigger: true
#  - task: run-tests
#    file: broker-src/ci/run-tests.yml
- name: deploy-development
  plan:
  - in_parallel:
    - get: broker-src
#      passed: [test-domain-broker]
      trigger: true
    - get: pipeline-tasks
  - in_parallel:
    - put: broker-deploy-dev
      params:
        path: broker-src
        manifest: broker-src/manifest.yml
        environment_variables:
          ACME_URL: ((domain-broker-v2.development.acme-url))
          ALB_NAMES: ((domain-broker-v2.development.alb-names))
          CF_API_ADDRESS: ((cf-api-url-development))
          AWS_ACCESS_KEY_ID: ((domain-broker-v2.development.access-key-id))
          AWS_SECRET_ACCESS_KEY: ((domain-broker-v2.development.secret-access-key-id))
          AWS_DEFAULT_REGION: ((domain-broker-v2.development.region))
          BROKER_USERNAME: ((domain-broker-v2.development.user))
          BROKER_PASSWORD: ((domain-broker-v2.development.pass))
          BUCKET: ((domain-broker-v2.development.bucket))
          DATABASE_URL: ((domain-broker-v2.development.database-url))
          EMAIL: ((domain-broker-v2.development.email))
          IAM_PATH_PREFIX: ((domain-broker-v2.development.iam-path-prefix))
          LOG_LEVEL: ((domain-broker-v2.development.log-level))
          RESOLVERS: ((domain-broker-v2.development.resolvers))
          SERVER_SIDE_ENCRYPTION: AES256
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-development
      BROKER_NAME: ((domain-broker-v2.development.broker-name))
      AUTH_USER: ((domain-broker-v2.development.user))
      AUTH_PASS: ((domain-broker-v2.development.pass))
      SERVICES: ((domain-broker-v2.development.service-offerings))
      BROKER_URL: ((domain-broker-v2.development.url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-domain-service-broker on ((cf-api-url-development))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-domain-service-broker on ((cf-api-url-development))
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-development
  serial: true
  plan:
  - get: broker-src
    passed: [deploy-development]
    trigger: true
  - in_parallel:
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *cf-creds-development
        DOMAINS_TIMEOUT: 7200
        HOSTED_ZONE_ID: ((aws.hosted-zone-id))
        BROKER_NAME: ((domain-broker-v2.development.broker-name))
        SERVICE_NAME: custom-domain
        PLAN_NAME: custom-domain
        SERVICE_INSTANCE_NAME: ((domain-broker-v2.development.test-service-instance-name))
        AWS_ACCESS_KEY_ID: ((domain-broker-v2.development.commercial-access-key-id))
        AWS_SECRET_ACCESS_KEY: ((domain-broker-v2.development.commercial-secret-access-key))
        DOMAIN: ((domain-broker-v2.development.test-url))
        CA_CERT_URL: ((domain-broker-v2.development.acme-root))
        DELETE_SERVICE: ((domain-broker-v2.development.delete-test-service-instance))
        CHALLENGE_TYPE: DNS-01

#- name: deploy-staging
#  plan:
#  - aggregate:
#    - get: broker-src
#      passed: [acceptance-tests-development]
#      trigger: true
#    - get: pipeline-tasks
#  - aggregate:
#    - put: broker-deploy-staging
#      params:
#        path: broker-src
#        manifest: broker-src/manifest-broker.yml
#        environment_variables: &cfenv-staging
#          BROKER_USERNAME: ((domain-broker-v2-user-staging))
#          BROKER_PASSWORD: ((domain-broker-v2-pass-staging))
#          EMAIL: ((domain-broker-v2-email-staging))
#          ACME_URL: ((domain-broker-v2-acme-url-staging))
#          BUCKET: ((domain-broker-v2-bucket-staging))
#          IAM_PATH_PREFIX: ((domain-broker-v2-iam-path-prefix-staging))
#          AWS_ACCESS_KEY_ID: ((domain-broker-v2-access-key-id-staging))
#          AWS_SECRET_ACCESS_KEY: ((domain-broker-v2-secret-access-key-staging))
#          AWS_DEFAULT_REGION: ((domain-broker-v2-region-staging))
#          SERVER_SIDE_ENCRYPTION: AES256
#          API_ADDRESS: ((cf-api-url-staging))
#          CLIENT_ID: ((domain-broker-v2-client-id-staging))
#          CLIENT_SECRET: ((domain-broker-v2-client-secret-staging))
#          DEFAULT_ORIGIN: ((domain-broker-v2-default-origin-staging))
#    - put: broker-deploy-staging
#      params:
#        path: broker-src
#        manifest: broker-src/manifest-cron.yml
#        environment_variables: *cfenv-staging
#  - task: update-broker
#    file: pipeline-tasks/register-service-broker.yml
#    params:
#      <<: *cf-creds-staging
#      BROKER_NAME: domain-broker-v2
#      AUTH_USER: ((domain-broker-user-staging))
#      AUTH_PASS: ((domain-broker-pass-staging))
#      SERVICES: Custom-Domain-Broker
#  on_failure:
#    put: slack
#    params:
#      text: |
#        :x: FAILED to deploy cf-domain-service-broker on ((cf-api-url-staging))
#        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
#      channel: ((slack-channel))
#      username: ((slack-username))
#      icon_url: ((slack-icon-url))
#  on_success:
#    put: slack
#    params:
#      text: |
#        :white_check_mark: Successfully deployed cf-domain-service-broker on ((cf-api-url-staging))
#        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
#      channel: ((slack-channel))
#      username: ((slack-username))
#      icon_url: ((slack-icon-url))
#
#- name: acceptance-tests-staging
#  serial: true
#  plan:
#  - get: broker-src
#    passed: [deploy-staging]
#    trigger: true
#  - get: broker-release
#    trigger: true
#  - get: stemcell-xenial
#    trigger: true
#  - aggregate:
#    - task: acceptance-tests-http-01
#      file: broker-src/ci/acceptance-tests.yml
#      params: &acceptance-tests-params-staging
#        <<: *cf-creds-staging
#        SERVICE_NAME: custom-domain
#        PLAN_NAME: custom-domain
#        SERVICE_INSTANCE_NAME: domains-acceptance-test-%s
#        AWS_ACCESS_KEY_ID: ((domains-broker-access-key-id-acceptance-staging))
#        AWS_SECRET_ACCESS_KEY: ((domains-broker-secret-access-key-acceptance-staging))
#        CHALLENGE_TYPE: HTTP-01
#        HOSTED_ZONE_ID: ((hosted-zone-id-staging))
#        DOMAIN: ((domain-url-staging))
#        DOMAINS_TIMEOUT: ((domains-timeout))
#        CA_CERT: ((acceptance-test-ca-cert-staging))
#        DELETE_SERVICE: ((acceptance-test-delete-service-staging))
#    - task: acceptance-tests-dns-01
#      file: broker-src/ci/acceptance-tests.yml
#      params:
#        <<: *acceptance-tests-params-staging
#        CHALLENGE_TYPE: DNS-01
#
#- name: deploy-production
#  plan:
#  - aggregate:
#    - get: broker-src
#      passed: [acceptance-tests-staging]
#      trigger: true
#    - get: pipeline-tasks
#  - aggregate:
#    - put: broker-deploy-production
#      params:
#        path: broker-src
#        manifest: broker-src/manifest-broker.yml
#        environment_variables: &cfenv-production
#          BROKER_USERNAME: ((domain-broker-v2-user-production))
#          BROKER_PASSWORD: ((domain-broker-v2-pass-production))
#          EMAIL: ((domain-broker-v2-email-production))
#          ACME_URL: ((domain-broker-v2-acme-url-production))
#          BUCKET: ((domain-broker-v2-bucket-production))
#          IAM_PATH_PREFIX: ((domain-broker-v2-iam-path-prefix-production))
#          AWS_ACCESS_KEY_ID: ((domain-broker-v2-access-key-id-production))
#          AWS_SECRET_ACCESS_KEY: ((domain-broker-v2-secret-access-key-production))
#          AWS_DEFAULT_REGION: ((domain-broker-v2-region-production))
#          SERVER_SIDE_ENCRYPTION: AES256
#          API_ADDRESS: ((cf-api-url-production))
#          CLIENT_ID: ((domain-broker-v2-client-id-production))
#          CLIENT_SECRET: ((domain-broker-v2-client-secret-production))
#          DEFAULT_ORIGIN: ((domain-broker-v2-default-origin-production))
#    - put: broker-deploy-production
#      params:
#        path: broker-src
#        manifest: broker-src/manifest-cron.yml
#        environment_variables: *cfenv-production
#  - task: update-broker
#    file: pipeline-tasks/register-service-broker.yml
#    params:
#      <<: *cf-creds-production
#      BROKER_NAME: domain-broker-v2
#      AUTH_USER: ((domain-broker-user-production))
#      AUTH_PASS: ((domain-broker-pass-production))
#      SERVICES: Custom-Domain-Broker
#  on_failure:
#    put: slack
#    params:
#      text: |
#        :x: FAILED to deploy cf-domain-service-broker on ((cf-api-url-production))
#        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
#      channel: ((slack-channel))
#      username: ((slack-username))
#      icon_url: ((slack-icon-url))
#  on_success:
#    put: slack
#    params:
#      text: |
#        :white_check_mark: Successfully deployed cf-domain-service-broker on ((cf-api-url-production))
#        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
#      channel: ((slack-channel))
#      username: ((slack-username))
#      icon_url: ((slack-icon-url))
#
#- name: acceptance-tests-production
#  serial: true
#  plan:
#  - get: broker-src
#    passed: [deploy-production]
#    trigger: true
#  - get: broker-release
#    trigger: true
#  - get: stemcell-xenial
#    trigger: true
#  - aggregate:
#    - task: acceptance-tests-http-01
#      file: broker-src/ci/acceptance-tests.yml
#      params: &acceptance-tests-params-production
#        <<: *cf-creds-production
#        SERVICE_NAME: custom-domain
#        PLAN_NAME: custom-domain
#        SERVICE_INSTANCE_NAME: domains-acceptance-test-%s
#        AWS_ACCESS_KEY_ID: ((domains-broker-access-key-id-acceptance-production))
#        AWS_SECRET_ACCESS_KEY: ((domains-broker-secret-access-key-acceptance-production))
#        CHALLENGE_TYPE: HTTP-01
