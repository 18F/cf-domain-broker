// Code generated by counterfeiter. DO NOT EDIT.
package cfdomainbrokerfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elbv2"
	"github.com/aws/aws-sdk-go/service/elbv2/elbv2iface"
)

type FakeELBV2API struct {
	AddListenerCertificatesStub        func(*elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error)
	addListenerCertificatesMutex       sync.RWMutex
	addListenerCertificatesArgsForCall []struct {
		arg1 *elbv2.AddListenerCertificatesInput
	}
	addListenerCertificatesReturns struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}
	addListenerCertificatesReturnsOnCall map[int]struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}
	AddListenerCertificatesRequestStub        func(*elbv2.AddListenerCertificatesInput) (*request.Request, *elbv2.AddListenerCertificatesOutput)
	addListenerCertificatesRequestMutex       sync.RWMutex
	addListenerCertificatesRequestArgsForCall []struct {
		arg1 *elbv2.AddListenerCertificatesInput
	}
	addListenerCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.AddListenerCertificatesOutput
	}
	addListenerCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.AddListenerCertificatesOutput
	}
	AddListenerCertificatesWithContextStub        func(aws.Context, *elbv2.AddListenerCertificatesInput, ...request.Option) (*elbv2.AddListenerCertificatesOutput, error)
	addListenerCertificatesWithContextMutex       sync.RWMutex
	addListenerCertificatesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.AddListenerCertificatesInput
		arg3 []request.Option
	}
	addListenerCertificatesWithContextReturns struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}
	addListenerCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}
	AddTagsStub        func(*elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error)
	addTagsMutex       sync.RWMutex
	addTagsArgsForCall []struct {
		arg1 *elbv2.AddTagsInput
	}
	addTagsReturns struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}
	addTagsReturnsOnCall map[int]struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}
	AddTagsRequestStub        func(*elbv2.AddTagsInput) (*request.Request, *elbv2.AddTagsOutput)
	addTagsRequestMutex       sync.RWMutex
	addTagsRequestArgsForCall []struct {
		arg1 *elbv2.AddTagsInput
	}
	addTagsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.AddTagsOutput
	}
	addTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.AddTagsOutput
	}
	AddTagsWithContextStub        func(aws.Context, *elbv2.AddTagsInput, ...request.Option) (*elbv2.AddTagsOutput, error)
	addTagsWithContextMutex       sync.RWMutex
	addTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.AddTagsInput
		arg3 []request.Option
	}
	addTagsWithContextReturns struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}
	addTagsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}
	CreateListenerStub        func(*elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error)
	createListenerMutex       sync.RWMutex
	createListenerArgsForCall []struct {
		arg1 *elbv2.CreateListenerInput
	}
	createListenerReturns struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}
	createListenerReturnsOnCall map[int]struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}
	CreateListenerRequestStub        func(*elbv2.CreateListenerInput) (*request.Request, *elbv2.CreateListenerOutput)
	createListenerRequestMutex       sync.RWMutex
	createListenerRequestArgsForCall []struct {
		arg1 *elbv2.CreateListenerInput
	}
	createListenerRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.CreateListenerOutput
	}
	createListenerRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.CreateListenerOutput
	}
	CreateListenerWithContextStub        func(aws.Context, *elbv2.CreateListenerInput, ...request.Option) (*elbv2.CreateListenerOutput, error)
	createListenerWithContextMutex       sync.RWMutex
	createListenerWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.CreateListenerInput
		arg3 []request.Option
	}
	createListenerWithContextReturns struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}
	createListenerWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}
	CreateLoadBalancerStub        func(*elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error)
	createLoadBalancerMutex       sync.RWMutex
	createLoadBalancerArgsForCall []struct {
		arg1 *elbv2.CreateLoadBalancerInput
	}
	createLoadBalancerReturns struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}
	createLoadBalancerReturnsOnCall map[int]struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}
	CreateLoadBalancerRequestStub        func(*elbv2.CreateLoadBalancerInput) (*request.Request, *elbv2.CreateLoadBalancerOutput)
	createLoadBalancerRequestMutex       sync.RWMutex
	createLoadBalancerRequestArgsForCall []struct {
		arg1 *elbv2.CreateLoadBalancerInput
	}
	createLoadBalancerRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.CreateLoadBalancerOutput
	}
	createLoadBalancerRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.CreateLoadBalancerOutput
	}
	CreateLoadBalancerWithContextStub        func(aws.Context, *elbv2.CreateLoadBalancerInput, ...request.Option) (*elbv2.CreateLoadBalancerOutput, error)
	createLoadBalancerWithContextMutex       sync.RWMutex
	createLoadBalancerWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.CreateLoadBalancerInput
		arg3 []request.Option
	}
	createLoadBalancerWithContextReturns struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}
	createLoadBalancerWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}
	CreateRuleStub        func(*elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error)
	createRuleMutex       sync.RWMutex
	createRuleArgsForCall []struct {
		arg1 *elbv2.CreateRuleInput
	}
	createRuleReturns struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}
	createRuleReturnsOnCall map[int]struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}
	CreateRuleRequestStub        func(*elbv2.CreateRuleInput) (*request.Request, *elbv2.CreateRuleOutput)
	createRuleRequestMutex       sync.RWMutex
	createRuleRequestArgsForCall []struct {
		arg1 *elbv2.CreateRuleInput
	}
	createRuleRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.CreateRuleOutput
	}
	createRuleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.CreateRuleOutput
	}
	CreateRuleWithContextStub        func(aws.Context, *elbv2.CreateRuleInput, ...request.Option) (*elbv2.CreateRuleOutput, error)
	createRuleWithContextMutex       sync.RWMutex
	createRuleWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.CreateRuleInput
		arg3 []request.Option
	}
	createRuleWithContextReturns struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}
	createRuleWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}
	CreateTargetGroupStub        func(*elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error)
	createTargetGroupMutex       sync.RWMutex
	createTargetGroupArgsForCall []struct {
		arg1 *elbv2.CreateTargetGroupInput
	}
	createTargetGroupReturns struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}
	createTargetGroupReturnsOnCall map[int]struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}
	CreateTargetGroupRequestStub        func(*elbv2.CreateTargetGroupInput) (*request.Request, *elbv2.CreateTargetGroupOutput)
	createTargetGroupRequestMutex       sync.RWMutex
	createTargetGroupRequestArgsForCall []struct {
		arg1 *elbv2.CreateTargetGroupInput
	}
	createTargetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.CreateTargetGroupOutput
	}
	createTargetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.CreateTargetGroupOutput
	}
	CreateTargetGroupWithContextStub        func(aws.Context, *elbv2.CreateTargetGroupInput, ...request.Option) (*elbv2.CreateTargetGroupOutput, error)
	createTargetGroupWithContextMutex       sync.RWMutex
	createTargetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.CreateTargetGroupInput
		arg3 []request.Option
	}
	createTargetGroupWithContextReturns struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}
	createTargetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}
	DeleteListenerStub        func(*elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error)
	deleteListenerMutex       sync.RWMutex
	deleteListenerArgsForCall []struct {
		arg1 *elbv2.DeleteListenerInput
	}
	deleteListenerReturns struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}
	deleteListenerReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}
	DeleteListenerRequestStub        func(*elbv2.DeleteListenerInput) (*request.Request, *elbv2.DeleteListenerOutput)
	deleteListenerRequestMutex       sync.RWMutex
	deleteListenerRequestArgsForCall []struct {
		arg1 *elbv2.DeleteListenerInput
	}
	deleteListenerRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DeleteListenerOutput
	}
	deleteListenerRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DeleteListenerOutput
	}
	DeleteListenerWithContextStub        func(aws.Context, *elbv2.DeleteListenerInput, ...request.Option) (*elbv2.DeleteListenerOutput, error)
	deleteListenerWithContextMutex       sync.RWMutex
	deleteListenerWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteListenerInput
		arg3 []request.Option
	}
	deleteListenerWithContextReturns struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}
	deleteListenerWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}
	DeleteLoadBalancerStub        func(*elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error)
	deleteLoadBalancerMutex       sync.RWMutex
	deleteLoadBalancerArgsForCall []struct {
		arg1 *elbv2.DeleteLoadBalancerInput
	}
	deleteLoadBalancerReturns struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}
	deleteLoadBalancerReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}
	DeleteLoadBalancerRequestStub        func(*elbv2.DeleteLoadBalancerInput) (*request.Request, *elbv2.DeleteLoadBalancerOutput)
	deleteLoadBalancerRequestMutex       sync.RWMutex
	deleteLoadBalancerRequestArgsForCall []struct {
		arg1 *elbv2.DeleteLoadBalancerInput
	}
	deleteLoadBalancerRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DeleteLoadBalancerOutput
	}
	deleteLoadBalancerRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DeleteLoadBalancerOutput
	}
	DeleteLoadBalancerWithContextStub        func(aws.Context, *elbv2.DeleteLoadBalancerInput, ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error)
	deleteLoadBalancerWithContextMutex       sync.RWMutex
	deleteLoadBalancerWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteLoadBalancerInput
		arg3 []request.Option
	}
	deleteLoadBalancerWithContextReturns struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}
	deleteLoadBalancerWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}
	DeleteRuleStub        func(*elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error)
	deleteRuleMutex       sync.RWMutex
	deleteRuleArgsForCall []struct {
		arg1 *elbv2.DeleteRuleInput
	}
	deleteRuleReturns struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}
	deleteRuleReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}
	DeleteRuleRequestStub        func(*elbv2.DeleteRuleInput) (*request.Request, *elbv2.DeleteRuleOutput)
	deleteRuleRequestMutex       sync.RWMutex
	deleteRuleRequestArgsForCall []struct {
		arg1 *elbv2.DeleteRuleInput
	}
	deleteRuleRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DeleteRuleOutput
	}
	deleteRuleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DeleteRuleOutput
	}
	DeleteRuleWithContextStub        func(aws.Context, *elbv2.DeleteRuleInput, ...request.Option) (*elbv2.DeleteRuleOutput, error)
	deleteRuleWithContextMutex       sync.RWMutex
	deleteRuleWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteRuleInput
		arg3 []request.Option
	}
	deleteRuleWithContextReturns struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}
	deleteRuleWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}
	DeleteTargetGroupStub        func(*elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error)
	deleteTargetGroupMutex       sync.RWMutex
	deleteTargetGroupArgsForCall []struct {
		arg1 *elbv2.DeleteTargetGroupInput
	}
	deleteTargetGroupReturns struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}
	deleteTargetGroupReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}
	DeleteTargetGroupRequestStub        func(*elbv2.DeleteTargetGroupInput) (*request.Request, *elbv2.DeleteTargetGroupOutput)
	deleteTargetGroupRequestMutex       sync.RWMutex
	deleteTargetGroupRequestArgsForCall []struct {
		arg1 *elbv2.DeleteTargetGroupInput
	}
	deleteTargetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DeleteTargetGroupOutput
	}
	deleteTargetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DeleteTargetGroupOutput
	}
	DeleteTargetGroupWithContextStub        func(aws.Context, *elbv2.DeleteTargetGroupInput, ...request.Option) (*elbv2.DeleteTargetGroupOutput, error)
	deleteTargetGroupWithContextMutex       sync.RWMutex
	deleteTargetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteTargetGroupInput
		arg3 []request.Option
	}
	deleteTargetGroupWithContextReturns struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}
	deleteTargetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}
	DeregisterTargetsStub        func(*elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error)
	deregisterTargetsMutex       sync.RWMutex
	deregisterTargetsArgsForCall []struct {
		arg1 *elbv2.DeregisterTargetsInput
	}
	deregisterTargetsReturns struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}
	deregisterTargetsReturnsOnCall map[int]struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}
	DeregisterTargetsRequestStub        func(*elbv2.DeregisterTargetsInput) (*request.Request, *elbv2.DeregisterTargetsOutput)
	deregisterTargetsRequestMutex       sync.RWMutex
	deregisterTargetsRequestArgsForCall []struct {
		arg1 *elbv2.DeregisterTargetsInput
	}
	deregisterTargetsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DeregisterTargetsOutput
	}
	deregisterTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DeregisterTargetsOutput
	}
	DeregisterTargetsWithContextStub        func(aws.Context, *elbv2.DeregisterTargetsInput, ...request.Option) (*elbv2.DeregisterTargetsOutput, error)
	deregisterTargetsWithContextMutex       sync.RWMutex
	deregisterTargetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DeregisterTargetsInput
		arg3 []request.Option
	}
	deregisterTargetsWithContextReturns struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}
	deregisterTargetsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}
	DescribeAccountLimitsStub        func(*elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error)
	describeAccountLimitsMutex       sync.RWMutex
	describeAccountLimitsArgsForCall []struct {
		arg1 *elbv2.DescribeAccountLimitsInput
	}
	describeAccountLimitsReturns struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}
	describeAccountLimitsReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}
	DescribeAccountLimitsRequestStub        func(*elbv2.DescribeAccountLimitsInput) (*request.Request, *elbv2.DescribeAccountLimitsOutput)
	describeAccountLimitsRequestMutex       sync.RWMutex
	describeAccountLimitsRequestArgsForCall []struct {
		arg1 *elbv2.DescribeAccountLimitsInput
	}
	describeAccountLimitsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeAccountLimitsOutput
	}
	describeAccountLimitsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeAccountLimitsOutput
	}
	DescribeAccountLimitsWithContextStub        func(aws.Context, *elbv2.DescribeAccountLimitsInput, ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error)
	describeAccountLimitsWithContextMutex       sync.RWMutex
	describeAccountLimitsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeAccountLimitsInput
		arg3 []request.Option
	}
	describeAccountLimitsWithContextReturns struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}
	describeAccountLimitsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}
	DescribeListenerCertificatesStub        func(*elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error)
	describeListenerCertificatesMutex       sync.RWMutex
	describeListenerCertificatesArgsForCall []struct {
		arg1 *elbv2.DescribeListenerCertificatesInput
	}
	describeListenerCertificatesReturns struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}
	describeListenerCertificatesReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}
	DescribeListenerCertificatesRequestStub        func(*elbv2.DescribeListenerCertificatesInput) (*request.Request, *elbv2.DescribeListenerCertificatesOutput)
	describeListenerCertificatesRequestMutex       sync.RWMutex
	describeListenerCertificatesRequestArgsForCall []struct {
		arg1 *elbv2.DescribeListenerCertificatesInput
	}
	describeListenerCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenerCertificatesOutput
	}
	describeListenerCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenerCertificatesOutput
	}
	DescribeListenerCertificatesWithContextStub        func(aws.Context, *elbv2.DescribeListenerCertificatesInput, ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error)
	describeListenerCertificatesWithContextMutex       sync.RWMutex
	describeListenerCertificatesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenerCertificatesInput
		arg3 []request.Option
	}
	describeListenerCertificatesWithContextReturns struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}
	describeListenerCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}
	DescribeListenersStub        func(*elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error)
	describeListenersMutex       sync.RWMutex
	describeListenersArgsForCall []struct {
		arg1 *elbv2.DescribeListenersInput
	}
	describeListenersReturns struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}
	describeListenersReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}
	DescribeListenersPagesStub        func(*elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool) error
	describeListenersPagesMutex       sync.RWMutex
	describeListenersPagesArgsForCall []struct {
		arg1 *elbv2.DescribeListenersInput
		arg2 func(*elbv2.DescribeListenersOutput, bool) bool
	}
	describeListenersPagesReturns struct {
		result1 error
	}
	describeListenersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeListenersPagesWithContextStub        func(aws.Context, *elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool, ...request.Option) error
	describeListenersPagesWithContextMutex       sync.RWMutex
	describeListenersPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenersInput
		arg3 func(*elbv2.DescribeListenersOutput, bool) bool
		arg4 []request.Option
	}
	describeListenersPagesWithContextReturns struct {
		result1 error
	}
	describeListenersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeListenersRequestStub        func(*elbv2.DescribeListenersInput) (*request.Request, *elbv2.DescribeListenersOutput)
	describeListenersRequestMutex       sync.RWMutex
	describeListenersRequestArgsForCall []struct {
		arg1 *elbv2.DescribeListenersInput
	}
	describeListenersRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenersOutput
	}
	describeListenersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenersOutput
	}
	DescribeListenersWithContextStub        func(aws.Context, *elbv2.DescribeListenersInput, ...request.Option) (*elbv2.DescribeListenersOutput, error)
	describeListenersWithContextMutex       sync.RWMutex
	describeListenersWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenersInput
		arg3 []request.Option
	}
	describeListenersWithContextReturns struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}
	describeListenersWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}
	DescribeLoadBalancerAttributesStub        func(*elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error)
	describeLoadBalancerAttributesMutex       sync.RWMutex
	describeLoadBalancerAttributesArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancerAttributesInput
	}
	describeLoadBalancerAttributesReturns struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}
	describeLoadBalancerAttributesReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}
	DescribeLoadBalancerAttributesRequestStub        func(*elbv2.DescribeLoadBalancerAttributesInput) (*request.Request, *elbv2.DescribeLoadBalancerAttributesOutput)
	describeLoadBalancerAttributesRequestMutex       sync.RWMutex
	describeLoadBalancerAttributesRequestArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancerAttributesInput
	}
	describeLoadBalancerAttributesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancerAttributesOutput
	}
	describeLoadBalancerAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancerAttributesOutput
	}
	DescribeLoadBalancerAttributesWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancerAttributesInput, ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error)
	describeLoadBalancerAttributesWithContextMutex       sync.RWMutex
	describeLoadBalancerAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancerAttributesInput
		arg3 []request.Option
	}
	describeLoadBalancerAttributesWithContextReturns struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}
	describeLoadBalancerAttributesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}
	DescribeLoadBalancersStub        func(*elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error)
	describeLoadBalancersMutex       sync.RWMutex
	describeLoadBalancersArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}
	describeLoadBalancersReturns struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}
	describeLoadBalancersReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}
	DescribeLoadBalancersPagesStub        func(*elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool) error
	describeLoadBalancersPagesMutex       sync.RWMutex
	describeLoadBalancersPagesArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
		arg2 func(*elbv2.DescribeLoadBalancersOutput, bool) bool
	}
	describeLoadBalancersPagesReturns struct {
		result1 error
	}
	describeLoadBalancersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeLoadBalancersPagesWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool, ...request.Option) error
	describeLoadBalancersPagesWithContextMutex       sync.RWMutex
	describeLoadBalancersPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 func(*elbv2.DescribeLoadBalancersOutput, bool) bool
		arg4 []request.Option
	}
	describeLoadBalancersPagesWithContextReturns struct {
		result1 error
	}
	describeLoadBalancersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeLoadBalancersRequestStub        func(*elbv2.DescribeLoadBalancersInput) (*request.Request, *elbv2.DescribeLoadBalancersOutput)
	describeLoadBalancersRequestMutex       sync.RWMutex
	describeLoadBalancersRequestArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}
	describeLoadBalancersRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancersOutput
	}
	describeLoadBalancersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancersOutput
	}
	DescribeLoadBalancersWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error)
	describeLoadBalancersWithContextMutex       sync.RWMutex
	describeLoadBalancersWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.Option
	}
	describeLoadBalancersWithContextReturns struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}
	describeLoadBalancersWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}
	DescribeRulesStub        func(*elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error)
	describeRulesMutex       sync.RWMutex
	describeRulesArgsForCall []struct {
		arg1 *elbv2.DescribeRulesInput
	}
	describeRulesReturns struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}
	describeRulesReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}
	DescribeRulesRequestStub        func(*elbv2.DescribeRulesInput) (*request.Request, *elbv2.DescribeRulesOutput)
	describeRulesRequestMutex       sync.RWMutex
	describeRulesRequestArgsForCall []struct {
		arg1 *elbv2.DescribeRulesInput
	}
	describeRulesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeRulesOutput
	}
	describeRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeRulesOutput
	}
	DescribeRulesWithContextStub        func(aws.Context, *elbv2.DescribeRulesInput, ...request.Option) (*elbv2.DescribeRulesOutput, error)
	describeRulesWithContextMutex       sync.RWMutex
	describeRulesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeRulesInput
		arg3 []request.Option
	}
	describeRulesWithContextReturns struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}
	describeRulesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}
	DescribeSSLPoliciesStub        func(*elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error)
	describeSSLPoliciesMutex       sync.RWMutex
	describeSSLPoliciesArgsForCall []struct {
		arg1 *elbv2.DescribeSSLPoliciesInput
	}
	describeSSLPoliciesReturns struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}
	describeSSLPoliciesReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}
	DescribeSSLPoliciesRequestStub        func(*elbv2.DescribeSSLPoliciesInput) (*request.Request, *elbv2.DescribeSSLPoliciesOutput)
	describeSSLPoliciesRequestMutex       sync.RWMutex
	describeSSLPoliciesRequestArgsForCall []struct {
		arg1 *elbv2.DescribeSSLPoliciesInput
	}
	describeSSLPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeSSLPoliciesOutput
	}
	describeSSLPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeSSLPoliciesOutput
	}
	DescribeSSLPoliciesWithContextStub        func(aws.Context, *elbv2.DescribeSSLPoliciesInput, ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error)
	describeSSLPoliciesWithContextMutex       sync.RWMutex
	describeSSLPoliciesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeSSLPoliciesInput
		arg3 []request.Option
	}
	describeSSLPoliciesWithContextReturns struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}
	describeSSLPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}
	DescribeTagsStub        func(*elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error)
	describeTagsMutex       sync.RWMutex
	describeTagsArgsForCall []struct {
		arg1 *elbv2.DescribeTagsInput
	}
	describeTagsReturns struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}
	describeTagsReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}
	DescribeTagsRequestStub        func(*elbv2.DescribeTagsInput) (*request.Request, *elbv2.DescribeTagsOutput)
	describeTagsRequestMutex       sync.RWMutex
	describeTagsRequestArgsForCall []struct {
		arg1 *elbv2.DescribeTagsInput
	}
	describeTagsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeTagsOutput
	}
	describeTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeTagsOutput
	}
	DescribeTagsWithContextStub        func(aws.Context, *elbv2.DescribeTagsInput, ...request.Option) (*elbv2.DescribeTagsOutput, error)
	describeTagsWithContextMutex       sync.RWMutex
	describeTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTagsInput
		arg3 []request.Option
	}
	describeTagsWithContextReturns struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}
	describeTagsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}
	DescribeTargetGroupAttributesStub        func(*elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error)
	describeTargetGroupAttributesMutex       sync.RWMutex
	describeTargetGroupAttributesArgsForCall []struct {
		arg1 *elbv2.DescribeTargetGroupAttributesInput
	}
	describeTargetGroupAttributesReturns struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}
	describeTargetGroupAttributesReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}
	DescribeTargetGroupAttributesRequestStub        func(*elbv2.DescribeTargetGroupAttributesInput) (*request.Request, *elbv2.DescribeTargetGroupAttributesOutput)
	describeTargetGroupAttributesRequestMutex       sync.RWMutex
	describeTargetGroupAttributesRequestArgsForCall []struct {
		arg1 *elbv2.DescribeTargetGroupAttributesInput
	}
	describeTargetGroupAttributesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupAttributesOutput
	}
	describeTargetGroupAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupAttributesOutput
	}
	DescribeTargetGroupAttributesWithContextStub        func(aws.Context, *elbv2.DescribeTargetGroupAttributesInput, ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error)
	describeTargetGroupAttributesWithContextMutex       sync.RWMutex
	describeTargetGroupAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupAttributesInput
		arg3 []request.Option
	}
	describeTargetGroupAttributesWithContextReturns struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}
	describeTargetGroupAttributesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}
	DescribeTargetGroupsStub        func(*elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error)
	describeTargetGroupsMutex       sync.RWMutex
	describeTargetGroupsArgsForCall []struct {
		arg1 *elbv2.DescribeTargetGroupsInput
	}
	describeTargetGroupsReturns struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}
	describeTargetGroupsReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}
	DescribeTargetGroupsPagesStub        func(*elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool) error
	describeTargetGroupsPagesMutex       sync.RWMutex
	describeTargetGroupsPagesArgsForCall []struct {
		arg1 *elbv2.DescribeTargetGroupsInput
		arg2 func(*elbv2.DescribeTargetGroupsOutput, bool) bool
	}
	describeTargetGroupsPagesReturns struct {
		result1 error
	}
	describeTargetGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeTargetGroupsPagesWithContextStub        func(aws.Context, *elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool, ...request.Option) error
	describeTargetGroupsPagesWithContextMutex       sync.RWMutex
	describeTargetGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupsInput
		arg3 func(*elbv2.DescribeTargetGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeTargetGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeTargetGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeTargetGroupsRequestStub        func(*elbv2.DescribeTargetGroupsInput) (*request.Request, *elbv2.DescribeTargetGroupsOutput)
	describeTargetGroupsRequestMutex       sync.RWMutex
	describeTargetGroupsRequestArgsForCall []struct {
		arg1 *elbv2.DescribeTargetGroupsInput
	}
	describeTargetGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupsOutput
	}
	describeTargetGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupsOutput
	}
	DescribeTargetGroupsWithContextStub        func(aws.Context, *elbv2.DescribeTargetGroupsInput, ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error)
	describeTargetGroupsWithContextMutex       sync.RWMutex
	describeTargetGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupsInput
		arg3 []request.Option
	}
	describeTargetGroupsWithContextReturns struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}
	describeTargetGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}
	DescribeTargetHealthStub        func(*elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error)
	describeTargetHealthMutex       sync.RWMutex
	describeTargetHealthArgsForCall []struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}
	describeTargetHealthReturns struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}
	describeTargetHealthReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}
	DescribeTargetHealthRequestStub        func(*elbv2.DescribeTargetHealthInput) (*request.Request, *elbv2.DescribeTargetHealthOutput)
	describeTargetHealthRequestMutex       sync.RWMutex
	describeTargetHealthRequestArgsForCall []struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}
	describeTargetHealthRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetHealthOutput
	}
	describeTargetHealthRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetHealthOutput
	}
	DescribeTargetHealthWithContextStub        func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.Option) (*elbv2.DescribeTargetHealthOutput, error)
	describeTargetHealthWithContextMutex       sync.RWMutex
	describeTargetHealthWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.Option
	}
	describeTargetHealthWithContextReturns struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}
	describeTargetHealthWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}
	ModifyListenerStub        func(*elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error)
	modifyListenerMutex       sync.RWMutex
	modifyListenerArgsForCall []struct {
		arg1 *elbv2.ModifyListenerInput
	}
	modifyListenerReturns struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}
	modifyListenerReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}
	ModifyListenerRequestStub        func(*elbv2.ModifyListenerInput) (*request.Request, *elbv2.ModifyListenerOutput)
	modifyListenerRequestMutex       sync.RWMutex
	modifyListenerRequestArgsForCall []struct {
		arg1 *elbv2.ModifyListenerInput
	}
	modifyListenerRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.ModifyListenerOutput
	}
	modifyListenerRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.ModifyListenerOutput
	}
	ModifyListenerWithContextStub        func(aws.Context, *elbv2.ModifyListenerInput, ...request.Option) (*elbv2.ModifyListenerOutput, error)
	modifyListenerWithContextMutex       sync.RWMutex
	modifyListenerWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyListenerInput
		arg3 []request.Option
	}
	modifyListenerWithContextReturns struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}
	modifyListenerWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}
	ModifyLoadBalancerAttributesStub        func(*elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error)
	modifyLoadBalancerAttributesMutex       sync.RWMutex
	modifyLoadBalancerAttributesArgsForCall []struct {
		arg1 *elbv2.ModifyLoadBalancerAttributesInput
	}
	modifyLoadBalancerAttributesReturns struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}
	modifyLoadBalancerAttributesReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}
	ModifyLoadBalancerAttributesRequestStub        func(*elbv2.ModifyLoadBalancerAttributesInput) (*request.Request, *elbv2.ModifyLoadBalancerAttributesOutput)
	modifyLoadBalancerAttributesRequestMutex       sync.RWMutex
	modifyLoadBalancerAttributesRequestArgsForCall []struct {
		arg1 *elbv2.ModifyLoadBalancerAttributesInput
	}
	modifyLoadBalancerAttributesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.ModifyLoadBalancerAttributesOutput
	}
	modifyLoadBalancerAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.ModifyLoadBalancerAttributesOutput
	}
	ModifyLoadBalancerAttributesWithContextStub        func(aws.Context, *elbv2.ModifyLoadBalancerAttributesInput, ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error)
	modifyLoadBalancerAttributesWithContextMutex       sync.RWMutex
	modifyLoadBalancerAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyLoadBalancerAttributesInput
		arg3 []request.Option
	}
	modifyLoadBalancerAttributesWithContextReturns struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}
	modifyLoadBalancerAttributesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}
	ModifyRuleStub        func(*elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error)
	modifyRuleMutex       sync.RWMutex
	modifyRuleArgsForCall []struct {
		arg1 *elbv2.ModifyRuleInput
	}
	modifyRuleReturns struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}
	modifyRuleReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}
	ModifyRuleRequestStub        func(*elbv2.ModifyRuleInput) (*request.Request, *elbv2.ModifyRuleOutput)
	modifyRuleRequestMutex       sync.RWMutex
	modifyRuleRequestArgsForCall []struct {
		arg1 *elbv2.ModifyRuleInput
	}
	modifyRuleRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.ModifyRuleOutput
	}
	modifyRuleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.ModifyRuleOutput
	}
	ModifyRuleWithContextStub        func(aws.Context, *elbv2.ModifyRuleInput, ...request.Option) (*elbv2.ModifyRuleOutput, error)
	modifyRuleWithContextMutex       sync.RWMutex
	modifyRuleWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyRuleInput
		arg3 []request.Option
	}
	modifyRuleWithContextReturns struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}
	modifyRuleWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}
	ModifyTargetGroupStub        func(*elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error)
	modifyTargetGroupMutex       sync.RWMutex
	modifyTargetGroupArgsForCall []struct {
		arg1 *elbv2.ModifyTargetGroupInput
	}
	modifyTargetGroupReturns struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}
	modifyTargetGroupReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}
	ModifyTargetGroupAttributesStub        func(*elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error)
	modifyTargetGroupAttributesMutex       sync.RWMutex
	modifyTargetGroupAttributesArgsForCall []struct {
		arg1 *elbv2.ModifyTargetGroupAttributesInput
	}
	modifyTargetGroupAttributesReturns struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}
	modifyTargetGroupAttributesReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}
	ModifyTargetGroupAttributesRequestStub        func(*elbv2.ModifyTargetGroupAttributesInput) (*request.Request, *elbv2.ModifyTargetGroupAttributesOutput)
	modifyTargetGroupAttributesRequestMutex       sync.RWMutex
	modifyTargetGroupAttributesRequestArgsForCall []struct {
		arg1 *elbv2.ModifyTargetGroupAttributesInput
	}
	modifyTargetGroupAttributesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupAttributesOutput
	}
	modifyTargetGroupAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupAttributesOutput
	}
	ModifyTargetGroupAttributesWithContextStub        func(aws.Context, *elbv2.ModifyTargetGroupAttributesInput, ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error)
	modifyTargetGroupAttributesWithContextMutex       sync.RWMutex
	modifyTargetGroupAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyTargetGroupAttributesInput
		arg3 []request.Option
	}
	modifyTargetGroupAttributesWithContextReturns struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}
	modifyTargetGroupAttributesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}
	ModifyTargetGroupRequestStub        func(*elbv2.ModifyTargetGroupInput) (*request.Request, *elbv2.ModifyTargetGroupOutput)
	modifyTargetGroupRequestMutex       sync.RWMutex
	modifyTargetGroupRequestArgsForCall []struct {
		arg1 *elbv2.ModifyTargetGroupInput
	}
	modifyTargetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupOutput
	}
	modifyTargetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupOutput
	}
	ModifyTargetGroupWithContextStub        func(aws.Context, *elbv2.ModifyTargetGroupInput, ...request.Option) (*elbv2.ModifyTargetGroupOutput, error)
	modifyTargetGroupWithContextMutex       sync.RWMutex
	modifyTargetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyTargetGroupInput
		arg3 []request.Option
	}
	modifyTargetGroupWithContextReturns struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}
	modifyTargetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}
	RegisterTargetsStub        func(*elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error)
	registerTargetsMutex       sync.RWMutex
	registerTargetsArgsForCall []struct {
		arg1 *elbv2.RegisterTargetsInput
	}
	registerTargetsReturns struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}
	registerTargetsReturnsOnCall map[int]struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}
	RegisterTargetsRequestStub        func(*elbv2.RegisterTargetsInput) (*request.Request, *elbv2.RegisterTargetsOutput)
	registerTargetsRequestMutex       sync.RWMutex
	registerTargetsRequestArgsForCall []struct {
		arg1 *elbv2.RegisterTargetsInput
	}
	registerTargetsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.RegisterTargetsOutput
	}
	registerTargetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.RegisterTargetsOutput
	}
	RegisterTargetsWithContextStub        func(aws.Context, *elbv2.RegisterTargetsInput, ...request.Option) (*elbv2.RegisterTargetsOutput, error)
	registerTargetsWithContextMutex       sync.RWMutex
	registerTargetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.RegisterTargetsInput
		arg3 []request.Option
	}
	registerTargetsWithContextReturns struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}
	registerTargetsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}
	RemoveListenerCertificatesStub        func(*elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error)
	removeListenerCertificatesMutex       sync.RWMutex
	removeListenerCertificatesArgsForCall []struct {
		arg1 *elbv2.RemoveListenerCertificatesInput
	}
	removeListenerCertificatesReturns struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}
	removeListenerCertificatesReturnsOnCall map[int]struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}
	RemoveListenerCertificatesRequestStub        func(*elbv2.RemoveListenerCertificatesInput) (*request.Request, *elbv2.RemoveListenerCertificatesOutput)
	removeListenerCertificatesRequestMutex       sync.RWMutex
	removeListenerCertificatesRequestArgsForCall []struct {
		arg1 *elbv2.RemoveListenerCertificatesInput
	}
	removeListenerCertificatesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.RemoveListenerCertificatesOutput
	}
	removeListenerCertificatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.RemoveListenerCertificatesOutput
	}
	RemoveListenerCertificatesWithContextStub        func(aws.Context, *elbv2.RemoveListenerCertificatesInput, ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error)
	removeListenerCertificatesWithContextMutex       sync.RWMutex
	removeListenerCertificatesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.RemoveListenerCertificatesInput
		arg3 []request.Option
	}
	removeListenerCertificatesWithContextReturns struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}
	removeListenerCertificatesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}
	RemoveTagsStub        func(*elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error)
	removeTagsMutex       sync.RWMutex
	removeTagsArgsForCall []struct {
		arg1 *elbv2.RemoveTagsInput
	}
	removeTagsReturns struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}
	removeTagsReturnsOnCall map[int]struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}
	RemoveTagsRequestStub        func(*elbv2.RemoveTagsInput) (*request.Request, *elbv2.RemoveTagsOutput)
	removeTagsRequestMutex       sync.RWMutex
	removeTagsRequestArgsForCall []struct {
		arg1 *elbv2.RemoveTagsInput
	}
	removeTagsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.RemoveTagsOutput
	}
	removeTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.RemoveTagsOutput
	}
	RemoveTagsWithContextStub        func(aws.Context, *elbv2.RemoveTagsInput, ...request.Option) (*elbv2.RemoveTagsOutput, error)
	removeTagsWithContextMutex       sync.RWMutex
	removeTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.RemoveTagsInput
		arg3 []request.Option
	}
	removeTagsWithContextReturns struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}
	removeTagsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}
	SetIpAddressTypeStub        func(*elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error)
	setIpAddressTypeMutex       sync.RWMutex
	setIpAddressTypeArgsForCall []struct {
		arg1 *elbv2.SetIpAddressTypeInput
	}
	setIpAddressTypeReturns struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}
	setIpAddressTypeReturnsOnCall map[int]struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}
	SetIpAddressTypeRequestStub        func(*elbv2.SetIpAddressTypeInput) (*request.Request, *elbv2.SetIpAddressTypeOutput)
	setIpAddressTypeRequestMutex       sync.RWMutex
	setIpAddressTypeRequestArgsForCall []struct {
		arg1 *elbv2.SetIpAddressTypeInput
	}
	setIpAddressTypeRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.SetIpAddressTypeOutput
	}
	setIpAddressTypeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.SetIpAddressTypeOutput
	}
	SetIpAddressTypeWithContextStub        func(aws.Context, *elbv2.SetIpAddressTypeInput, ...request.Option) (*elbv2.SetIpAddressTypeOutput, error)
	setIpAddressTypeWithContextMutex       sync.RWMutex
	setIpAddressTypeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.SetIpAddressTypeInput
		arg3 []request.Option
	}
	setIpAddressTypeWithContextReturns struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}
	setIpAddressTypeWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}
	SetRulePrioritiesStub        func(*elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error)
	setRulePrioritiesMutex       sync.RWMutex
	setRulePrioritiesArgsForCall []struct {
		arg1 *elbv2.SetRulePrioritiesInput
	}
	setRulePrioritiesReturns struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}
	setRulePrioritiesReturnsOnCall map[int]struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}
	SetRulePrioritiesRequestStub        func(*elbv2.SetRulePrioritiesInput) (*request.Request, *elbv2.SetRulePrioritiesOutput)
	setRulePrioritiesRequestMutex       sync.RWMutex
	setRulePrioritiesRequestArgsForCall []struct {
		arg1 *elbv2.SetRulePrioritiesInput
	}
	setRulePrioritiesRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.SetRulePrioritiesOutput
	}
	setRulePrioritiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.SetRulePrioritiesOutput
	}
	SetRulePrioritiesWithContextStub        func(aws.Context, *elbv2.SetRulePrioritiesInput, ...request.Option) (*elbv2.SetRulePrioritiesOutput, error)
	setRulePrioritiesWithContextMutex       sync.RWMutex
	setRulePrioritiesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.SetRulePrioritiesInput
		arg3 []request.Option
	}
	setRulePrioritiesWithContextReturns struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}
	setRulePrioritiesWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}
	SetSecurityGroupsStub        func(*elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error)
	setSecurityGroupsMutex       sync.RWMutex
	setSecurityGroupsArgsForCall []struct {
		arg1 *elbv2.SetSecurityGroupsInput
	}
	setSecurityGroupsReturns struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}
	setSecurityGroupsReturnsOnCall map[int]struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}
	SetSecurityGroupsRequestStub        func(*elbv2.SetSecurityGroupsInput) (*request.Request, *elbv2.SetSecurityGroupsOutput)
	setSecurityGroupsRequestMutex       sync.RWMutex
	setSecurityGroupsRequestArgsForCall []struct {
		arg1 *elbv2.SetSecurityGroupsInput
	}
	setSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.SetSecurityGroupsOutput
	}
	setSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.SetSecurityGroupsOutput
	}
	SetSecurityGroupsWithContextStub        func(aws.Context, *elbv2.SetSecurityGroupsInput, ...request.Option) (*elbv2.SetSecurityGroupsOutput, error)
	setSecurityGroupsWithContextMutex       sync.RWMutex
	setSecurityGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.SetSecurityGroupsInput
		arg3 []request.Option
	}
	setSecurityGroupsWithContextReturns struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}
	setSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}
	SetSubnetsStub        func(*elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error)
	setSubnetsMutex       sync.RWMutex
	setSubnetsArgsForCall []struct {
		arg1 *elbv2.SetSubnetsInput
	}
	setSubnetsReturns struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}
	setSubnetsReturnsOnCall map[int]struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}
	SetSubnetsRequestStub        func(*elbv2.SetSubnetsInput) (*request.Request, *elbv2.SetSubnetsOutput)
	setSubnetsRequestMutex       sync.RWMutex
	setSubnetsRequestArgsForCall []struct {
		arg1 *elbv2.SetSubnetsInput
	}
	setSubnetsRequestReturns struct {
		result1 *request.Request
		result2 *elbv2.SetSubnetsOutput
	}
	setSubnetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elbv2.SetSubnetsOutput
	}
	SetSubnetsWithContextStub        func(aws.Context, *elbv2.SetSubnetsInput, ...request.Option) (*elbv2.SetSubnetsOutput, error)
	setSubnetsWithContextMutex       sync.RWMutex
	setSubnetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.SetSubnetsInput
		arg3 []request.Option
	}
	setSubnetsWithContextReturns struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}
	setSubnetsWithContextReturnsOnCall map[int]struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}
	WaitUntilLoadBalancerAvailableStub        func(*elbv2.DescribeLoadBalancersInput) error
	waitUntilLoadBalancerAvailableMutex       sync.RWMutex
	waitUntilLoadBalancerAvailableArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}
	waitUntilLoadBalancerAvailableReturns struct {
		result1 error
	}
	waitUntilLoadBalancerAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilLoadBalancerAvailableWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error
	waitUntilLoadBalancerAvailableWithContextMutex       sync.RWMutex
	waitUntilLoadBalancerAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}
	waitUntilLoadBalancerAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilLoadBalancerAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilLoadBalancerExistsStub        func(*elbv2.DescribeLoadBalancersInput) error
	waitUntilLoadBalancerExistsMutex       sync.RWMutex
	waitUntilLoadBalancerExistsArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}
	waitUntilLoadBalancerExistsReturns struct {
		result1 error
	}
	waitUntilLoadBalancerExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilLoadBalancerExistsWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error
	waitUntilLoadBalancerExistsWithContextMutex       sync.RWMutex
	waitUntilLoadBalancerExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}
	waitUntilLoadBalancerExistsWithContextReturns struct {
		result1 error
	}
	waitUntilLoadBalancerExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilLoadBalancersDeletedStub        func(*elbv2.DescribeLoadBalancersInput) error
	waitUntilLoadBalancersDeletedMutex       sync.RWMutex
	waitUntilLoadBalancersDeletedArgsForCall []struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}
	waitUntilLoadBalancersDeletedReturns struct {
		result1 error
	}
	waitUntilLoadBalancersDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilLoadBalancersDeletedWithContextStub        func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error
	waitUntilLoadBalancersDeletedWithContextMutex       sync.RWMutex
	waitUntilLoadBalancersDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}
	waitUntilLoadBalancersDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilLoadBalancersDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTargetDeregisteredStub        func(*elbv2.DescribeTargetHealthInput) error
	waitUntilTargetDeregisteredMutex       sync.RWMutex
	waitUntilTargetDeregisteredArgsForCall []struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}
	waitUntilTargetDeregisteredReturns struct {
		result1 error
	}
	waitUntilTargetDeregisteredReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTargetDeregisteredWithContextStub        func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error
	waitUntilTargetDeregisteredWithContextMutex       sync.RWMutex
	waitUntilTargetDeregisteredWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.WaiterOption
	}
	waitUntilTargetDeregisteredWithContextReturns struct {
		result1 error
	}
	waitUntilTargetDeregisteredWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTargetInServiceStub        func(*elbv2.DescribeTargetHealthInput) error
	waitUntilTargetInServiceMutex       sync.RWMutex
	waitUntilTargetInServiceArgsForCall []struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}
	waitUntilTargetInServiceReturns struct {
		result1 error
	}
	waitUntilTargetInServiceReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTargetInServiceWithContextStub        func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error
	waitUntilTargetInServiceWithContextMutex       sync.RWMutex
	waitUntilTargetInServiceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.WaiterOption
	}
	waitUntilTargetInServiceWithContextReturns struct {
		result1 error
	}
	waitUntilTargetInServiceWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeELBV2API) AddListenerCertificates(arg1 *elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error) {
	fake.addListenerCertificatesMutex.Lock()
	ret, specificReturn := fake.addListenerCertificatesReturnsOnCall[len(fake.addListenerCertificatesArgsForCall)]
	fake.addListenerCertificatesArgsForCall = append(fake.addListenerCertificatesArgsForCall, struct {
		arg1 *elbv2.AddListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("AddListenerCertificates", []interface{}{arg1})
	fake.addListenerCertificatesMutex.Unlock()
	if fake.AddListenerCertificatesStub != nil {
		return fake.AddListenerCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addListenerCertificatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddListenerCertificatesCallCount() int {
	fake.addListenerCertificatesMutex.RLock()
	defer fake.addListenerCertificatesMutex.RUnlock()
	return len(fake.addListenerCertificatesArgsForCall)
}

func (fake *FakeELBV2API) AddListenerCertificatesCalls(stub func(*elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error)) {
	fake.addListenerCertificatesMutex.Lock()
	defer fake.addListenerCertificatesMutex.Unlock()
	fake.AddListenerCertificatesStub = stub
}

func (fake *FakeELBV2API) AddListenerCertificatesArgsForCall(i int) *elbv2.AddListenerCertificatesInput {
	fake.addListenerCertificatesMutex.RLock()
	defer fake.addListenerCertificatesMutex.RUnlock()
	argsForCall := fake.addListenerCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) AddListenerCertificatesReturns(result1 *elbv2.AddListenerCertificatesOutput, result2 error) {
	fake.addListenerCertificatesMutex.Lock()
	defer fake.addListenerCertificatesMutex.Unlock()
	fake.AddListenerCertificatesStub = nil
	fake.addListenerCertificatesReturns = struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddListenerCertificatesReturnsOnCall(i int, result1 *elbv2.AddListenerCertificatesOutput, result2 error) {
	fake.addListenerCertificatesMutex.Lock()
	defer fake.addListenerCertificatesMutex.Unlock()
	fake.AddListenerCertificatesStub = nil
	if fake.addListenerCertificatesReturnsOnCall == nil {
		fake.addListenerCertificatesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.AddListenerCertificatesOutput
			result2 error
		})
	}
	fake.addListenerCertificatesReturnsOnCall[i] = struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddListenerCertificatesRequest(arg1 *elbv2.AddListenerCertificatesInput) (*request.Request, *elbv2.AddListenerCertificatesOutput) {
	fake.addListenerCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.addListenerCertificatesRequestReturnsOnCall[len(fake.addListenerCertificatesRequestArgsForCall)]
	fake.addListenerCertificatesRequestArgsForCall = append(fake.addListenerCertificatesRequestArgsForCall, struct {
		arg1 *elbv2.AddListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("AddListenerCertificatesRequest", []interface{}{arg1})
	fake.addListenerCertificatesRequestMutex.Unlock()
	if fake.AddListenerCertificatesRequestStub != nil {
		return fake.AddListenerCertificatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addListenerCertificatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddListenerCertificatesRequestCallCount() int {
	fake.addListenerCertificatesRequestMutex.RLock()
	defer fake.addListenerCertificatesRequestMutex.RUnlock()
	return len(fake.addListenerCertificatesRequestArgsForCall)
}

func (fake *FakeELBV2API) AddListenerCertificatesRequestCalls(stub func(*elbv2.AddListenerCertificatesInput) (*request.Request, *elbv2.AddListenerCertificatesOutput)) {
	fake.addListenerCertificatesRequestMutex.Lock()
	defer fake.addListenerCertificatesRequestMutex.Unlock()
	fake.AddListenerCertificatesRequestStub = stub
}

func (fake *FakeELBV2API) AddListenerCertificatesRequestArgsForCall(i int) *elbv2.AddListenerCertificatesInput {
	fake.addListenerCertificatesRequestMutex.RLock()
	defer fake.addListenerCertificatesRequestMutex.RUnlock()
	argsForCall := fake.addListenerCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) AddListenerCertificatesRequestReturns(result1 *request.Request, result2 *elbv2.AddListenerCertificatesOutput) {
	fake.addListenerCertificatesRequestMutex.Lock()
	defer fake.addListenerCertificatesRequestMutex.Unlock()
	fake.AddListenerCertificatesRequestStub = nil
	fake.addListenerCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.AddListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) AddListenerCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.AddListenerCertificatesOutput) {
	fake.addListenerCertificatesRequestMutex.Lock()
	defer fake.addListenerCertificatesRequestMutex.Unlock()
	fake.AddListenerCertificatesRequestStub = nil
	if fake.addListenerCertificatesRequestReturnsOnCall == nil {
		fake.addListenerCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.AddListenerCertificatesOutput
		})
	}
	fake.addListenerCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.AddListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContext(arg1 aws.Context, arg2 *elbv2.AddListenerCertificatesInput, arg3 ...request.Option) (*elbv2.AddListenerCertificatesOutput, error) {
	fake.addListenerCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.addListenerCertificatesWithContextReturnsOnCall[len(fake.addListenerCertificatesWithContextArgsForCall)]
	fake.addListenerCertificatesWithContextArgsForCall = append(fake.addListenerCertificatesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.AddListenerCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddListenerCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.addListenerCertificatesWithContextMutex.Unlock()
	if fake.AddListenerCertificatesWithContextStub != nil {
		return fake.AddListenerCertificatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addListenerCertificatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContextCallCount() int {
	fake.addListenerCertificatesWithContextMutex.RLock()
	defer fake.addListenerCertificatesWithContextMutex.RUnlock()
	return len(fake.addListenerCertificatesWithContextArgsForCall)
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContextCalls(stub func(aws.Context, *elbv2.AddListenerCertificatesInput, ...request.Option) (*elbv2.AddListenerCertificatesOutput, error)) {
	fake.addListenerCertificatesWithContextMutex.Lock()
	defer fake.addListenerCertificatesWithContextMutex.Unlock()
	fake.AddListenerCertificatesWithContextStub = stub
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContextArgsForCall(i int) (aws.Context, *elbv2.AddListenerCertificatesInput, []request.Option) {
	fake.addListenerCertificatesWithContextMutex.RLock()
	defer fake.addListenerCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.addListenerCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContextReturns(result1 *elbv2.AddListenerCertificatesOutput, result2 error) {
	fake.addListenerCertificatesWithContextMutex.Lock()
	defer fake.addListenerCertificatesWithContextMutex.Unlock()
	fake.AddListenerCertificatesWithContextStub = nil
	fake.addListenerCertificatesWithContextReturns = struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddListenerCertificatesWithContextReturnsOnCall(i int, result1 *elbv2.AddListenerCertificatesOutput, result2 error) {
	fake.addListenerCertificatesWithContextMutex.Lock()
	defer fake.addListenerCertificatesWithContextMutex.Unlock()
	fake.AddListenerCertificatesWithContextStub = nil
	if fake.addListenerCertificatesWithContextReturnsOnCall == nil {
		fake.addListenerCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.AddListenerCertificatesOutput
			result2 error
		})
	}
	fake.addListenerCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.AddListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTags(arg1 *elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error) {
	fake.addTagsMutex.Lock()
	ret, specificReturn := fake.addTagsReturnsOnCall[len(fake.addTagsArgsForCall)]
	fake.addTagsArgsForCall = append(fake.addTagsArgsForCall, struct {
		arg1 *elbv2.AddTagsInput
	}{arg1})
	fake.recordInvocation("AddTags", []interface{}{arg1})
	fake.addTagsMutex.Unlock()
	if fake.AddTagsStub != nil {
		return fake.AddTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddTagsCallCount() int {
	fake.addTagsMutex.RLock()
	defer fake.addTagsMutex.RUnlock()
	return len(fake.addTagsArgsForCall)
}

func (fake *FakeELBV2API) AddTagsCalls(stub func(*elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error)) {
	fake.addTagsMutex.Lock()
	defer fake.addTagsMutex.Unlock()
	fake.AddTagsStub = stub
}

func (fake *FakeELBV2API) AddTagsArgsForCall(i int) *elbv2.AddTagsInput {
	fake.addTagsMutex.RLock()
	defer fake.addTagsMutex.RUnlock()
	argsForCall := fake.addTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) AddTagsReturns(result1 *elbv2.AddTagsOutput, result2 error) {
	fake.addTagsMutex.Lock()
	defer fake.addTagsMutex.Unlock()
	fake.AddTagsStub = nil
	fake.addTagsReturns = struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTagsReturnsOnCall(i int, result1 *elbv2.AddTagsOutput, result2 error) {
	fake.addTagsMutex.Lock()
	defer fake.addTagsMutex.Unlock()
	fake.AddTagsStub = nil
	if fake.addTagsReturnsOnCall == nil {
		fake.addTagsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.AddTagsOutput
			result2 error
		})
	}
	fake.addTagsReturnsOnCall[i] = struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTagsRequest(arg1 *elbv2.AddTagsInput) (*request.Request, *elbv2.AddTagsOutput) {
	fake.addTagsRequestMutex.Lock()
	ret, specificReturn := fake.addTagsRequestReturnsOnCall[len(fake.addTagsRequestArgsForCall)]
	fake.addTagsRequestArgsForCall = append(fake.addTagsRequestArgsForCall, struct {
		arg1 *elbv2.AddTagsInput
	}{arg1})
	fake.recordInvocation("AddTagsRequest", []interface{}{arg1})
	fake.addTagsRequestMutex.Unlock()
	if fake.AddTagsRequestStub != nil {
		return fake.AddTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddTagsRequestCallCount() int {
	fake.addTagsRequestMutex.RLock()
	defer fake.addTagsRequestMutex.RUnlock()
	return len(fake.addTagsRequestArgsForCall)
}

func (fake *FakeELBV2API) AddTagsRequestCalls(stub func(*elbv2.AddTagsInput) (*request.Request, *elbv2.AddTagsOutput)) {
	fake.addTagsRequestMutex.Lock()
	defer fake.addTagsRequestMutex.Unlock()
	fake.AddTagsRequestStub = stub
}

func (fake *FakeELBV2API) AddTagsRequestArgsForCall(i int) *elbv2.AddTagsInput {
	fake.addTagsRequestMutex.RLock()
	defer fake.addTagsRequestMutex.RUnlock()
	argsForCall := fake.addTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) AddTagsRequestReturns(result1 *request.Request, result2 *elbv2.AddTagsOutput) {
	fake.addTagsRequestMutex.Lock()
	defer fake.addTagsRequestMutex.Unlock()
	fake.AddTagsRequestStub = nil
	fake.addTagsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.AddTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.AddTagsOutput) {
	fake.addTagsRequestMutex.Lock()
	defer fake.addTagsRequestMutex.Unlock()
	fake.AddTagsRequestStub = nil
	if fake.addTagsRequestReturnsOnCall == nil {
		fake.addTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.AddTagsOutput
		})
	}
	fake.addTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.AddTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTagsWithContext(arg1 aws.Context, arg2 *elbv2.AddTagsInput, arg3 ...request.Option) (*elbv2.AddTagsOutput, error) {
	fake.addTagsWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsWithContextReturnsOnCall[len(fake.addTagsWithContextArgsForCall)]
	fake.addTagsWithContextArgsForCall = append(fake.addTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.AddTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsWithContextMutex.Unlock()
	if fake.AddTagsWithContextStub != nil {
		return fake.AddTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) AddTagsWithContextCallCount() int {
	fake.addTagsWithContextMutex.RLock()
	defer fake.addTagsWithContextMutex.RUnlock()
	return len(fake.addTagsWithContextArgsForCall)
}

func (fake *FakeELBV2API) AddTagsWithContextCalls(stub func(aws.Context, *elbv2.AddTagsInput, ...request.Option) (*elbv2.AddTagsOutput, error)) {
	fake.addTagsWithContextMutex.Lock()
	defer fake.addTagsWithContextMutex.Unlock()
	fake.AddTagsWithContextStub = stub
}

func (fake *FakeELBV2API) AddTagsWithContextArgsForCall(i int) (aws.Context, *elbv2.AddTagsInput, []request.Option) {
	fake.addTagsWithContextMutex.RLock()
	defer fake.addTagsWithContextMutex.RUnlock()
	argsForCall := fake.addTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) AddTagsWithContextReturns(result1 *elbv2.AddTagsOutput, result2 error) {
	fake.addTagsWithContextMutex.Lock()
	defer fake.addTagsWithContextMutex.Unlock()
	fake.AddTagsWithContextStub = nil
	fake.addTagsWithContextReturns = struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) AddTagsWithContextReturnsOnCall(i int, result1 *elbv2.AddTagsOutput, result2 error) {
	fake.addTagsWithContextMutex.Lock()
	defer fake.addTagsWithContextMutex.Unlock()
	fake.AddTagsWithContextStub = nil
	if fake.addTagsWithContextReturnsOnCall == nil {
		fake.addTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.AddTagsOutput
			result2 error
		})
	}
	fake.addTagsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.AddTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListener(arg1 *elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error) {
	fake.createListenerMutex.Lock()
	ret, specificReturn := fake.createListenerReturnsOnCall[len(fake.createListenerArgsForCall)]
	fake.createListenerArgsForCall = append(fake.createListenerArgsForCall, struct {
		arg1 *elbv2.CreateListenerInput
	}{arg1})
	fake.recordInvocation("CreateListener", []interface{}{arg1})
	fake.createListenerMutex.Unlock()
	if fake.CreateListenerStub != nil {
		return fake.CreateListenerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createListenerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateListenerCallCount() int {
	fake.createListenerMutex.RLock()
	defer fake.createListenerMutex.RUnlock()
	return len(fake.createListenerArgsForCall)
}

func (fake *FakeELBV2API) CreateListenerCalls(stub func(*elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error)) {
	fake.createListenerMutex.Lock()
	defer fake.createListenerMutex.Unlock()
	fake.CreateListenerStub = stub
}

func (fake *FakeELBV2API) CreateListenerArgsForCall(i int) *elbv2.CreateListenerInput {
	fake.createListenerMutex.RLock()
	defer fake.createListenerMutex.RUnlock()
	argsForCall := fake.createListenerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateListenerReturns(result1 *elbv2.CreateListenerOutput, result2 error) {
	fake.createListenerMutex.Lock()
	defer fake.createListenerMutex.Unlock()
	fake.CreateListenerStub = nil
	fake.createListenerReturns = struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListenerReturnsOnCall(i int, result1 *elbv2.CreateListenerOutput, result2 error) {
	fake.createListenerMutex.Lock()
	defer fake.createListenerMutex.Unlock()
	fake.CreateListenerStub = nil
	if fake.createListenerReturnsOnCall == nil {
		fake.createListenerReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateListenerOutput
			result2 error
		})
	}
	fake.createListenerReturnsOnCall[i] = struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListenerRequest(arg1 *elbv2.CreateListenerInput) (*request.Request, *elbv2.CreateListenerOutput) {
	fake.createListenerRequestMutex.Lock()
	ret, specificReturn := fake.createListenerRequestReturnsOnCall[len(fake.createListenerRequestArgsForCall)]
	fake.createListenerRequestArgsForCall = append(fake.createListenerRequestArgsForCall, struct {
		arg1 *elbv2.CreateListenerInput
	}{arg1})
	fake.recordInvocation("CreateListenerRequest", []interface{}{arg1})
	fake.createListenerRequestMutex.Unlock()
	if fake.CreateListenerRequestStub != nil {
		return fake.CreateListenerRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createListenerRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateListenerRequestCallCount() int {
	fake.createListenerRequestMutex.RLock()
	defer fake.createListenerRequestMutex.RUnlock()
	return len(fake.createListenerRequestArgsForCall)
}

func (fake *FakeELBV2API) CreateListenerRequestCalls(stub func(*elbv2.CreateListenerInput) (*request.Request, *elbv2.CreateListenerOutput)) {
	fake.createListenerRequestMutex.Lock()
	defer fake.createListenerRequestMutex.Unlock()
	fake.CreateListenerRequestStub = stub
}

func (fake *FakeELBV2API) CreateListenerRequestArgsForCall(i int) *elbv2.CreateListenerInput {
	fake.createListenerRequestMutex.RLock()
	defer fake.createListenerRequestMutex.RUnlock()
	argsForCall := fake.createListenerRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateListenerRequestReturns(result1 *request.Request, result2 *elbv2.CreateListenerOutput) {
	fake.createListenerRequestMutex.Lock()
	defer fake.createListenerRequestMutex.Unlock()
	fake.CreateListenerRequestStub = nil
	fake.createListenerRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.CreateListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListenerRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.CreateListenerOutput) {
	fake.createListenerRequestMutex.Lock()
	defer fake.createListenerRequestMutex.Unlock()
	fake.CreateListenerRequestStub = nil
	if fake.createListenerRequestReturnsOnCall == nil {
		fake.createListenerRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.CreateListenerOutput
		})
	}
	fake.createListenerRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.CreateListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListenerWithContext(arg1 aws.Context, arg2 *elbv2.CreateListenerInput, arg3 ...request.Option) (*elbv2.CreateListenerOutput, error) {
	fake.createListenerWithContextMutex.Lock()
	ret, specificReturn := fake.createListenerWithContextReturnsOnCall[len(fake.createListenerWithContextArgsForCall)]
	fake.createListenerWithContextArgsForCall = append(fake.createListenerWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.CreateListenerInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateListenerWithContext", []interface{}{arg1, arg2, arg3})
	fake.createListenerWithContextMutex.Unlock()
	if fake.CreateListenerWithContextStub != nil {
		return fake.CreateListenerWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createListenerWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateListenerWithContextCallCount() int {
	fake.createListenerWithContextMutex.RLock()
	defer fake.createListenerWithContextMutex.RUnlock()
	return len(fake.createListenerWithContextArgsForCall)
}

func (fake *FakeELBV2API) CreateListenerWithContextCalls(stub func(aws.Context, *elbv2.CreateListenerInput, ...request.Option) (*elbv2.CreateListenerOutput, error)) {
	fake.createListenerWithContextMutex.Lock()
	defer fake.createListenerWithContextMutex.Unlock()
	fake.CreateListenerWithContextStub = stub
}

func (fake *FakeELBV2API) CreateListenerWithContextArgsForCall(i int) (aws.Context, *elbv2.CreateListenerInput, []request.Option) {
	fake.createListenerWithContextMutex.RLock()
	defer fake.createListenerWithContextMutex.RUnlock()
	argsForCall := fake.createListenerWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) CreateListenerWithContextReturns(result1 *elbv2.CreateListenerOutput, result2 error) {
	fake.createListenerWithContextMutex.Lock()
	defer fake.createListenerWithContextMutex.Unlock()
	fake.CreateListenerWithContextStub = nil
	fake.createListenerWithContextReturns = struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateListenerWithContextReturnsOnCall(i int, result1 *elbv2.CreateListenerOutput, result2 error) {
	fake.createListenerWithContextMutex.Lock()
	defer fake.createListenerWithContextMutex.Unlock()
	fake.CreateListenerWithContextStub = nil
	if fake.createListenerWithContextReturnsOnCall == nil {
		fake.createListenerWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateListenerOutput
			result2 error
		})
	}
	fake.createListenerWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.CreateListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancer(arg1 *elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error) {
	fake.createLoadBalancerMutex.Lock()
	ret, specificReturn := fake.createLoadBalancerReturnsOnCall[len(fake.createLoadBalancerArgsForCall)]
	fake.createLoadBalancerArgsForCall = append(fake.createLoadBalancerArgsForCall, struct {
		arg1 *elbv2.CreateLoadBalancerInput
	}{arg1})
	fake.recordInvocation("CreateLoadBalancer", []interface{}{arg1})
	fake.createLoadBalancerMutex.Unlock()
	if fake.CreateLoadBalancerStub != nil {
		return fake.CreateLoadBalancerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoadBalancerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateLoadBalancerCallCount() int {
	fake.createLoadBalancerMutex.RLock()
	defer fake.createLoadBalancerMutex.RUnlock()
	return len(fake.createLoadBalancerArgsForCall)
}

func (fake *FakeELBV2API) CreateLoadBalancerCalls(stub func(*elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error)) {
	fake.createLoadBalancerMutex.Lock()
	defer fake.createLoadBalancerMutex.Unlock()
	fake.CreateLoadBalancerStub = stub
}

func (fake *FakeELBV2API) CreateLoadBalancerArgsForCall(i int) *elbv2.CreateLoadBalancerInput {
	fake.createLoadBalancerMutex.RLock()
	defer fake.createLoadBalancerMutex.RUnlock()
	argsForCall := fake.createLoadBalancerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateLoadBalancerReturns(result1 *elbv2.CreateLoadBalancerOutput, result2 error) {
	fake.createLoadBalancerMutex.Lock()
	defer fake.createLoadBalancerMutex.Unlock()
	fake.CreateLoadBalancerStub = nil
	fake.createLoadBalancerReturns = struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancerReturnsOnCall(i int, result1 *elbv2.CreateLoadBalancerOutput, result2 error) {
	fake.createLoadBalancerMutex.Lock()
	defer fake.createLoadBalancerMutex.Unlock()
	fake.CreateLoadBalancerStub = nil
	if fake.createLoadBalancerReturnsOnCall == nil {
		fake.createLoadBalancerReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateLoadBalancerOutput
			result2 error
		})
	}
	fake.createLoadBalancerReturnsOnCall[i] = struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancerRequest(arg1 *elbv2.CreateLoadBalancerInput) (*request.Request, *elbv2.CreateLoadBalancerOutput) {
	fake.createLoadBalancerRequestMutex.Lock()
	ret, specificReturn := fake.createLoadBalancerRequestReturnsOnCall[len(fake.createLoadBalancerRequestArgsForCall)]
	fake.createLoadBalancerRequestArgsForCall = append(fake.createLoadBalancerRequestArgsForCall, struct {
		arg1 *elbv2.CreateLoadBalancerInput
	}{arg1})
	fake.recordInvocation("CreateLoadBalancerRequest", []interface{}{arg1})
	fake.createLoadBalancerRequestMutex.Unlock()
	if fake.CreateLoadBalancerRequestStub != nil {
		return fake.CreateLoadBalancerRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoadBalancerRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateLoadBalancerRequestCallCount() int {
	fake.createLoadBalancerRequestMutex.RLock()
	defer fake.createLoadBalancerRequestMutex.RUnlock()
	return len(fake.createLoadBalancerRequestArgsForCall)
}

func (fake *FakeELBV2API) CreateLoadBalancerRequestCalls(stub func(*elbv2.CreateLoadBalancerInput) (*request.Request, *elbv2.CreateLoadBalancerOutput)) {
	fake.createLoadBalancerRequestMutex.Lock()
	defer fake.createLoadBalancerRequestMutex.Unlock()
	fake.CreateLoadBalancerRequestStub = stub
}

func (fake *FakeELBV2API) CreateLoadBalancerRequestArgsForCall(i int) *elbv2.CreateLoadBalancerInput {
	fake.createLoadBalancerRequestMutex.RLock()
	defer fake.createLoadBalancerRequestMutex.RUnlock()
	argsForCall := fake.createLoadBalancerRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateLoadBalancerRequestReturns(result1 *request.Request, result2 *elbv2.CreateLoadBalancerOutput) {
	fake.createLoadBalancerRequestMutex.Lock()
	defer fake.createLoadBalancerRequestMutex.Unlock()
	fake.CreateLoadBalancerRequestStub = nil
	fake.createLoadBalancerRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.CreateLoadBalancerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancerRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.CreateLoadBalancerOutput) {
	fake.createLoadBalancerRequestMutex.Lock()
	defer fake.createLoadBalancerRequestMutex.Unlock()
	fake.CreateLoadBalancerRequestStub = nil
	if fake.createLoadBalancerRequestReturnsOnCall == nil {
		fake.createLoadBalancerRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.CreateLoadBalancerOutput
		})
	}
	fake.createLoadBalancerRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.CreateLoadBalancerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContext(arg1 aws.Context, arg2 *elbv2.CreateLoadBalancerInput, arg3 ...request.Option) (*elbv2.CreateLoadBalancerOutput, error) {
	fake.createLoadBalancerWithContextMutex.Lock()
	ret, specificReturn := fake.createLoadBalancerWithContextReturnsOnCall[len(fake.createLoadBalancerWithContextArgsForCall)]
	fake.createLoadBalancerWithContextArgsForCall = append(fake.createLoadBalancerWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.CreateLoadBalancerInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateLoadBalancerWithContext", []interface{}{arg1, arg2, arg3})
	fake.createLoadBalancerWithContextMutex.Unlock()
	if fake.CreateLoadBalancerWithContextStub != nil {
		return fake.CreateLoadBalancerWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLoadBalancerWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContextCallCount() int {
	fake.createLoadBalancerWithContextMutex.RLock()
	defer fake.createLoadBalancerWithContextMutex.RUnlock()
	return len(fake.createLoadBalancerWithContextArgsForCall)
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContextCalls(stub func(aws.Context, *elbv2.CreateLoadBalancerInput, ...request.Option) (*elbv2.CreateLoadBalancerOutput, error)) {
	fake.createLoadBalancerWithContextMutex.Lock()
	defer fake.createLoadBalancerWithContextMutex.Unlock()
	fake.CreateLoadBalancerWithContextStub = stub
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContextArgsForCall(i int) (aws.Context, *elbv2.CreateLoadBalancerInput, []request.Option) {
	fake.createLoadBalancerWithContextMutex.RLock()
	defer fake.createLoadBalancerWithContextMutex.RUnlock()
	argsForCall := fake.createLoadBalancerWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContextReturns(result1 *elbv2.CreateLoadBalancerOutput, result2 error) {
	fake.createLoadBalancerWithContextMutex.Lock()
	defer fake.createLoadBalancerWithContextMutex.Unlock()
	fake.CreateLoadBalancerWithContextStub = nil
	fake.createLoadBalancerWithContextReturns = struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateLoadBalancerWithContextReturnsOnCall(i int, result1 *elbv2.CreateLoadBalancerOutput, result2 error) {
	fake.createLoadBalancerWithContextMutex.Lock()
	defer fake.createLoadBalancerWithContextMutex.Unlock()
	fake.CreateLoadBalancerWithContextStub = nil
	if fake.createLoadBalancerWithContextReturnsOnCall == nil {
		fake.createLoadBalancerWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateLoadBalancerOutput
			result2 error
		})
	}
	fake.createLoadBalancerWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.CreateLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRule(arg1 *elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error) {
	fake.createRuleMutex.Lock()
	ret, specificReturn := fake.createRuleReturnsOnCall[len(fake.createRuleArgsForCall)]
	fake.createRuleArgsForCall = append(fake.createRuleArgsForCall, struct {
		arg1 *elbv2.CreateRuleInput
	}{arg1})
	fake.recordInvocation("CreateRule", []interface{}{arg1})
	fake.createRuleMutex.Unlock()
	if fake.CreateRuleStub != nil {
		return fake.CreateRuleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRuleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateRuleCallCount() int {
	fake.createRuleMutex.RLock()
	defer fake.createRuleMutex.RUnlock()
	return len(fake.createRuleArgsForCall)
}

func (fake *FakeELBV2API) CreateRuleCalls(stub func(*elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error)) {
	fake.createRuleMutex.Lock()
	defer fake.createRuleMutex.Unlock()
	fake.CreateRuleStub = stub
}

func (fake *FakeELBV2API) CreateRuleArgsForCall(i int) *elbv2.CreateRuleInput {
	fake.createRuleMutex.RLock()
	defer fake.createRuleMutex.RUnlock()
	argsForCall := fake.createRuleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateRuleReturns(result1 *elbv2.CreateRuleOutput, result2 error) {
	fake.createRuleMutex.Lock()
	defer fake.createRuleMutex.Unlock()
	fake.CreateRuleStub = nil
	fake.createRuleReturns = struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRuleReturnsOnCall(i int, result1 *elbv2.CreateRuleOutput, result2 error) {
	fake.createRuleMutex.Lock()
	defer fake.createRuleMutex.Unlock()
	fake.CreateRuleStub = nil
	if fake.createRuleReturnsOnCall == nil {
		fake.createRuleReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateRuleOutput
			result2 error
		})
	}
	fake.createRuleReturnsOnCall[i] = struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRuleRequest(arg1 *elbv2.CreateRuleInput) (*request.Request, *elbv2.CreateRuleOutput) {
	fake.createRuleRequestMutex.Lock()
	ret, specificReturn := fake.createRuleRequestReturnsOnCall[len(fake.createRuleRequestArgsForCall)]
	fake.createRuleRequestArgsForCall = append(fake.createRuleRequestArgsForCall, struct {
		arg1 *elbv2.CreateRuleInput
	}{arg1})
	fake.recordInvocation("CreateRuleRequest", []interface{}{arg1})
	fake.createRuleRequestMutex.Unlock()
	if fake.CreateRuleRequestStub != nil {
		return fake.CreateRuleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRuleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateRuleRequestCallCount() int {
	fake.createRuleRequestMutex.RLock()
	defer fake.createRuleRequestMutex.RUnlock()
	return len(fake.createRuleRequestArgsForCall)
}

func (fake *FakeELBV2API) CreateRuleRequestCalls(stub func(*elbv2.CreateRuleInput) (*request.Request, *elbv2.CreateRuleOutput)) {
	fake.createRuleRequestMutex.Lock()
	defer fake.createRuleRequestMutex.Unlock()
	fake.CreateRuleRequestStub = stub
}

func (fake *FakeELBV2API) CreateRuleRequestArgsForCall(i int) *elbv2.CreateRuleInput {
	fake.createRuleRequestMutex.RLock()
	defer fake.createRuleRequestMutex.RUnlock()
	argsForCall := fake.createRuleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateRuleRequestReturns(result1 *request.Request, result2 *elbv2.CreateRuleOutput) {
	fake.createRuleRequestMutex.Lock()
	defer fake.createRuleRequestMutex.Unlock()
	fake.CreateRuleRequestStub = nil
	fake.createRuleRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.CreateRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRuleRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.CreateRuleOutput) {
	fake.createRuleRequestMutex.Lock()
	defer fake.createRuleRequestMutex.Unlock()
	fake.CreateRuleRequestStub = nil
	if fake.createRuleRequestReturnsOnCall == nil {
		fake.createRuleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.CreateRuleOutput
		})
	}
	fake.createRuleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.CreateRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRuleWithContext(arg1 aws.Context, arg2 *elbv2.CreateRuleInput, arg3 ...request.Option) (*elbv2.CreateRuleOutput, error) {
	fake.createRuleWithContextMutex.Lock()
	ret, specificReturn := fake.createRuleWithContextReturnsOnCall[len(fake.createRuleWithContextArgsForCall)]
	fake.createRuleWithContextArgsForCall = append(fake.createRuleWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.CreateRuleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateRuleWithContext", []interface{}{arg1, arg2, arg3})
	fake.createRuleWithContextMutex.Unlock()
	if fake.CreateRuleWithContextStub != nil {
		return fake.CreateRuleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRuleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateRuleWithContextCallCount() int {
	fake.createRuleWithContextMutex.RLock()
	defer fake.createRuleWithContextMutex.RUnlock()
	return len(fake.createRuleWithContextArgsForCall)
}

func (fake *FakeELBV2API) CreateRuleWithContextCalls(stub func(aws.Context, *elbv2.CreateRuleInput, ...request.Option) (*elbv2.CreateRuleOutput, error)) {
	fake.createRuleWithContextMutex.Lock()
	defer fake.createRuleWithContextMutex.Unlock()
	fake.CreateRuleWithContextStub = stub
}

func (fake *FakeELBV2API) CreateRuleWithContextArgsForCall(i int) (aws.Context, *elbv2.CreateRuleInput, []request.Option) {
	fake.createRuleWithContextMutex.RLock()
	defer fake.createRuleWithContextMutex.RUnlock()
	argsForCall := fake.createRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) CreateRuleWithContextReturns(result1 *elbv2.CreateRuleOutput, result2 error) {
	fake.createRuleWithContextMutex.Lock()
	defer fake.createRuleWithContextMutex.Unlock()
	fake.CreateRuleWithContextStub = nil
	fake.createRuleWithContextReturns = struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateRuleWithContextReturnsOnCall(i int, result1 *elbv2.CreateRuleOutput, result2 error) {
	fake.createRuleWithContextMutex.Lock()
	defer fake.createRuleWithContextMutex.Unlock()
	fake.CreateRuleWithContextStub = nil
	if fake.createRuleWithContextReturnsOnCall == nil {
		fake.createRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateRuleOutput
			result2 error
		})
	}
	fake.createRuleWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.CreateRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroup(arg1 *elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error) {
	fake.createTargetGroupMutex.Lock()
	ret, specificReturn := fake.createTargetGroupReturnsOnCall[len(fake.createTargetGroupArgsForCall)]
	fake.createTargetGroupArgsForCall = append(fake.createTargetGroupArgsForCall, struct {
		arg1 *elbv2.CreateTargetGroupInput
	}{arg1})
	fake.recordInvocation("CreateTargetGroup", []interface{}{arg1})
	fake.createTargetGroupMutex.Unlock()
	if fake.CreateTargetGroupStub != nil {
		return fake.CreateTargetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTargetGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateTargetGroupCallCount() int {
	fake.createTargetGroupMutex.RLock()
	defer fake.createTargetGroupMutex.RUnlock()
	return len(fake.createTargetGroupArgsForCall)
}

func (fake *FakeELBV2API) CreateTargetGroupCalls(stub func(*elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error)) {
	fake.createTargetGroupMutex.Lock()
	defer fake.createTargetGroupMutex.Unlock()
	fake.CreateTargetGroupStub = stub
}

func (fake *FakeELBV2API) CreateTargetGroupArgsForCall(i int) *elbv2.CreateTargetGroupInput {
	fake.createTargetGroupMutex.RLock()
	defer fake.createTargetGroupMutex.RUnlock()
	argsForCall := fake.createTargetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateTargetGroupReturns(result1 *elbv2.CreateTargetGroupOutput, result2 error) {
	fake.createTargetGroupMutex.Lock()
	defer fake.createTargetGroupMutex.Unlock()
	fake.CreateTargetGroupStub = nil
	fake.createTargetGroupReturns = struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroupReturnsOnCall(i int, result1 *elbv2.CreateTargetGroupOutput, result2 error) {
	fake.createTargetGroupMutex.Lock()
	defer fake.createTargetGroupMutex.Unlock()
	fake.CreateTargetGroupStub = nil
	if fake.createTargetGroupReturnsOnCall == nil {
		fake.createTargetGroupReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateTargetGroupOutput
			result2 error
		})
	}
	fake.createTargetGroupReturnsOnCall[i] = struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroupRequest(arg1 *elbv2.CreateTargetGroupInput) (*request.Request, *elbv2.CreateTargetGroupOutput) {
	fake.createTargetGroupRequestMutex.Lock()
	ret, specificReturn := fake.createTargetGroupRequestReturnsOnCall[len(fake.createTargetGroupRequestArgsForCall)]
	fake.createTargetGroupRequestArgsForCall = append(fake.createTargetGroupRequestArgsForCall, struct {
		arg1 *elbv2.CreateTargetGroupInput
	}{arg1})
	fake.recordInvocation("CreateTargetGroupRequest", []interface{}{arg1})
	fake.createTargetGroupRequestMutex.Unlock()
	if fake.CreateTargetGroupRequestStub != nil {
		return fake.CreateTargetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTargetGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateTargetGroupRequestCallCount() int {
	fake.createTargetGroupRequestMutex.RLock()
	defer fake.createTargetGroupRequestMutex.RUnlock()
	return len(fake.createTargetGroupRequestArgsForCall)
}

func (fake *FakeELBV2API) CreateTargetGroupRequestCalls(stub func(*elbv2.CreateTargetGroupInput) (*request.Request, *elbv2.CreateTargetGroupOutput)) {
	fake.createTargetGroupRequestMutex.Lock()
	defer fake.createTargetGroupRequestMutex.Unlock()
	fake.CreateTargetGroupRequestStub = stub
}

func (fake *FakeELBV2API) CreateTargetGroupRequestArgsForCall(i int) *elbv2.CreateTargetGroupInput {
	fake.createTargetGroupRequestMutex.RLock()
	defer fake.createTargetGroupRequestMutex.RUnlock()
	argsForCall := fake.createTargetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) CreateTargetGroupRequestReturns(result1 *request.Request, result2 *elbv2.CreateTargetGroupOutput) {
	fake.createTargetGroupRequestMutex.Lock()
	defer fake.createTargetGroupRequestMutex.Unlock()
	fake.CreateTargetGroupRequestStub = nil
	fake.createTargetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.CreateTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.CreateTargetGroupOutput) {
	fake.createTargetGroupRequestMutex.Lock()
	defer fake.createTargetGroupRequestMutex.Unlock()
	fake.CreateTargetGroupRequestStub = nil
	if fake.createTargetGroupRequestReturnsOnCall == nil {
		fake.createTargetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.CreateTargetGroupOutput
		})
	}
	fake.createTargetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.CreateTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroupWithContext(arg1 aws.Context, arg2 *elbv2.CreateTargetGroupInput, arg3 ...request.Option) (*elbv2.CreateTargetGroupOutput, error) {
	fake.createTargetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createTargetGroupWithContextReturnsOnCall[len(fake.createTargetGroupWithContextArgsForCall)]
	fake.createTargetGroupWithContextArgsForCall = append(fake.createTargetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.CreateTargetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTargetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTargetGroupWithContextMutex.Unlock()
	if fake.CreateTargetGroupWithContextStub != nil {
		return fake.CreateTargetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTargetGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) CreateTargetGroupWithContextCallCount() int {
	fake.createTargetGroupWithContextMutex.RLock()
	defer fake.createTargetGroupWithContextMutex.RUnlock()
	return len(fake.createTargetGroupWithContextArgsForCall)
}

func (fake *FakeELBV2API) CreateTargetGroupWithContextCalls(stub func(aws.Context, *elbv2.CreateTargetGroupInput, ...request.Option) (*elbv2.CreateTargetGroupOutput, error)) {
	fake.createTargetGroupWithContextMutex.Lock()
	defer fake.createTargetGroupWithContextMutex.Unlock()
	fake.CreateTargetGroupWithContextStub = stub
}

func (fake *FakeELBV2API) CreateTargetGroupWithContextArgsForCall(i int) (aws.Context, *elbv2.CreateTargetGroupInput, []request.Option) {
	fake.createTargetGroupWithContextMutex.RLock()
	defer fake.createTargetGroupWithContextMutex.RUnlock()
	argsForCall := fake.createTargetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) CreateTargetGroupWithContextReturns(result1 *elbv2.CreateTargetGroupOutput, result2 error) {
	fake.createTargetGroupWithContextMutex.Lock()
	defer fake.createTargetGroupWithContextMutex.Unlock()
	fake.CreateTargetGroupWithContextStub = nil
	fake.createTargetGroupWithContextReturns = struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) CreateTargetGroupWithContextReturnsOnCall(i int, result1 *elbv2.CreateTargetGroupOutput, result2 error) {
	fake.createTargetGroupWithContextMutex.Lock()
	defer fake.createTargetGroupWithContextMutex.Unlock()
	fake.CreateTargetGroupWithContextStub = nil
	if fake.createTargetGroupWithContextReturnsOnCall == nil {
		fake.createTargetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.CreateTargetGroupOutput
			result2 error
		})
	}
	fake.createTargetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.CreateTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListener(arg1 *elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error) {
	fake.deleteListenerMutex.Lock()
	ret, specificReturn := fake.deleteListenerReturnsOnCall[len(fake.deleteListenerArgsForCall)]
	fake.deleteListenerArgsForCall = append(fake.deleteListenerArgsForCall, struct {
		arg1 *elbv2.DeleteListenerInput
	}{arg1})
	fake.recordInvocation("DeleteListener", []interface{}{arg1})
	fake.deleteListenerMutex.Unlock()
	if fake.DeleteListenerStub != nil {
		return fake.DeleteListenerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteListenerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteListenerCallCount() int {
	fake.deleteListenerMutex.RLock()
	defer fake.deleteListenerMutex.RUnlock()
	return len(fake.deleteListenerArgsForCall)
}

func (fake *FakeELBV2API) DeleteListenerCalls(stub func(*elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error)) {
	fake.deleteListenerMutex.Lock()
	defer fake.deleteListenerMutex.Unlock()
	fake.DeleteListenerStub = stub
}

func (fake *FakeELBV2API) DeleteListenerArgsForCall(i int) *elbv2.DeleteListenerInput {
	fake.deleteListenerMutex.RLock()
	defer fake.deleteListenerMutex.RUnlock()
	argsForCall := fake.deleteListenerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteListenerReturns(result1 *elbv2.DeleteListenerOutput, result2 error) {
	fake.deleteListenerMutex.Lock()
	defer fake.deleteListenerMutex.Unlock()
	fake.DeleteListenerStub = nil
	fake.deleteListenerReturns = struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListenerReturnsOnCall(i int, result1 *elbv2.DeleteListenerOutput, result2 error) {
	fake.deleteListenerMutex.Lock()
	defer fake.deleteListenerMutex.Unlock()
	fake.DeleteListenerStub = nil
	if fake.deleteListenerReturnsOnCall == nil {
		fake.deleteListenerReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteListenerOutput
			result2 error
		})
	}
	fake.deleteListenerReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListenerRequest(arg1 *elbv2.DeleteListenerInput) (*request.Request, *elbv2.DeleteListenerOutput) {
	fake.deleteListenerRequestMutex.Lock()
	ret, specificReturn := fake.deleteListenerRequestReturnsOnCall[len(fake.deleteListenerRequestArgsForCall)]
	fake.deleteListenerRequestArgsForCall = append(fake.deleteListenerRequestArgsForCall, struct {
		arg1 *elbv2.DeleteListenerInput
	}{arg1})
	fake.recordInvocation("DeleteListenerRequest", []interface{}{arg1})
	fake.deleteListenerRequestMutex.Unlock()
	if fake.DeleteListenerRequestStub != nil {
		return fake.DeleteListenerRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteListenerRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteListenerRequestCallCount() int {
	fake.deleteListenerRequestMutex.RLock()
	defer fake.deleteListenerRequestMutex.RUnlock()
	return len(fake.deleteListenerRequestArgsForCall)
}

func (fake *FakeELBV2API) DeleteListenerRequestCalls(stub func(*elbv2.DeleteListenerInput) (*request.Request, *elbv2.DeleteListenerOutput)) {
	fake.deleteListenerRequestMutex.Lock()
	defer fake.deleteListenerRequestMutex.Unlock()
	fake.DeleteListenerRequestStub = stub
}

func (fake *FakeELBV2API) DeleteListenerRequestArgsForCall(i int) *elbv2.DeleteListenerInput {
	fake.deleteListenerRequestMutex.RLock()
	defer fake.deleteListenerRequestMutex.RUnlock()
	argsForCall := fake.deleteListenerRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteListenerRequestReturns(result1 *request.Request, result2 *elbv2.DeleteListenerOutput) {
	fake.deleteListenerRequestMutex.Lock()
	defer fake.deleteListenerRequestMutex.Unlock()
	fake.DeleteListenerRequestStub = nil
	fake.deleteListenerRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DeleteListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListenerRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DeleteListenerOutput) {
	fake.deleteListenerRequestMutex.Lock()
	defer fake.deleteListenerRequestMutex.Unlock()
	fake.DeleteListenerRequestStub = nil
	if fake.deleteListenerRequestReturnsOnCall == nil {
		fake.deleteListenerRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DeleteListenerOutput
		})
	}
	fake.deleteListenerRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DeleteListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListenerWithContext(arg1 aws.Context, arg2 *elbv2.DeleteListenerInput, arg3 ...request.Option) (*elbv2.DeleteListenerOutput, error) {
	fake.deleteListenerWithContextMutex.Lock()
	ret, specificReturn := fake.deleteListenerWithContextReturnsOnCall[len(fake.deleteListenerWithContextArgsForCall)]
	fake.deleteListenerWithContextArgsForCall = append(fake.deleteListenerWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteListenerInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteListenerWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteListenerWithContextMutex.Unlock()
	if fake.DeleteListenerWithContextStub != nil {
		return fake.DeleteListenerWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteListenerWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteListenerWithContextCallCount() int {
	fake.deleteListenerWithContextMutex.RLock()
	defer fake.deleteListenerWithContextMutex.RUnlock()
	return len(fake.deleteListenerWithContextArgsForCall)
}

func (fake *FakeELBV2API) DeleteListenerWithContextCalls(stub func(aws.Context, *elbv2.DeleteListenerInput, ...request.Option) (*elbv2.DeleteListenerOutput, error)) {
	fake.deleteListenerWithContextMutex.Lock()
	defer fake.deleteListenerWithContextMutex.Unlock()
	fake.DeleteListenerWithContextStub = stub
}

func (fake *FakeELBV2API) DeleteListenerWithContextArgsForCall(i int) (aws.Context, *elbv2.DeleteListenerInput, []request.Option) {
	fake.deleteListenerWithContextMutex.RLock()
	defer fake.deleteListenerWithContextMutex.RUnlock()
	argsForCall := fake.deleteListenerWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DeleteListenerWithContextReturns(result1 *elbv2.DeleteListenerOutput, result2 error) {
	fake.deleteListenerWithContextMutex.Lock()
	defer fake.deleteListenerWithContextMutex.Unlock()
	fake.DeleteListenerWithContextStub = nil
	fake.deleteListenerWithContextReturns = struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteListenerWithContextReturnsOnCall(i int, result1 *elbv2.DeleteListenerOutput, result2 error) {
	fake.deleteListenerWithContextMutex.Lock()
	defer fake.deleteListenerWithContextMutex.Unlock()
	fake.DeleteListenerWithContextStub = nil
	if fake.deleteListenerWithContextReturnsOnCall == nil {
		fake.deleteListenerWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteListenerOutput
			result2 error
		})
	}
	fake.deleteListenerWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancer(arg1 *elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error) {
	fake.deleteLoadBalancerMutex.Lock()
	ret, specificReturn := fake.deleteLoadBalancerReturnsOnCall[len(fake.deleteLoadBalancerArgsForCall)]
	fake.deleteLoadBalancerArgsForCall = append(fake.deleteLoadBalancerArgsForCall, struct {
		arg1 *elbv2.DeleteLoadBalancerInput
	}{arg1})
	fake.recordInvocation("DeleteLoadBalancer", []interface{}{arg1})
	fake.deleteLoadBalancerMutex.Unlock()
	if fake.DeleteLoadBalancerStub != nil {
		return fake.DeleteLoadBalancerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoadBalancerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteLoadBalancerCallCount() int {
	fake.deleteLoadBalancerMutex.RLock()
	defer fake.deleteLoadBalancerMutex.RUnlock()
	return len(fake.deleteLoadBalancerArgsForCall)
}

func (fake *FakeELBV2API) DeleteLoadBalancerCalls(stub func(*elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error)) {
	fake.deleteLoadBalancerMutex.Lock()
	defer fake.deleteLoadBalancerMutex.Unlock()
	fake.DeleteLoadBalancerStub = stub
}

func (fake *FakeELBV2API) DeleteLoadBalancerArgsForCall(i int) *elbv2.DeleteLoadBalancerInput {
	fake.deleteLoadBalancerMutex.RLock()
	defer fake.deleteLoadBalancerMutex.RUnlock()
	argsForCall := fake.deleteLoadBalancerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteLoadBalancerReturns(result1 *elbv2.DeleteLoadBalancerOutput, result2 error) {
	fake.deleteLoadBalancerMutex.Lock()
	defer fake.deleteLoadBalancerMutex.Unlock()
	fake.DeleteLoadBalancerStub = nil
	fake.deleteLoadBalancerReturns = struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancerReturnsOnCall(i int, result1 *elbv2.DeleteLoadBalancerOutput, result2 error) {
	fake.deleteLoadBalancerMutex.Lock()
	defer fake.deleteLoadBalancerMutex.Unlock()
	fake.DeleteLoadBalancerStub = nil
	if fake.deleteLoadBalancerReturnsOnCall == nil {
		fake.deleteLoadBalancerReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteLoadBalancerOutput
			result2 error
		})
	}
	fake.deleteLoadBalancerReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequest(arg1 *elbv2.DeleteLoadBalancerInput) (*request.Request, *elbv2.DeleteLoadBalancerOutput) {
	fake.deleteLoadBalancerRequestMutex.Lock()
	ret, specificReturn := fake.deleteLoadBalancerRequestReturnsOnCall[len(fake.deleteLoadBalancerRequestArgsForCall)]
	fake.deleteLoadBalancerRequestArgsForCall = append(fake.deleteLoadBalancerRequestArgsForCall, struct {
		arg1 *elbv2.DeleteLoadBalancerInput
	}{arg1})
	fake.recordInvocation("DeleteLoadBalancerRequest", []interface{}{arg1})
	fake.deleteLoadBalancerRequestMutex.Unlock()
	if fake.DeleteLoadBalancerRequestStub != nil {
		return fake.DeleteLoadBalancerRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoadBalancerRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequestCallCount() int {
	fake.deleteLoadBalancerRequestMutex.RLock()
	defer fake.deleteLoadBalancerRequestMutex.RUnlock()
	return len(fake.deleteLoadBalancerRequestArgsForCall)
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequestCalls(stub func(*elbv2.DeleteLoadBalancerInput) (*request.Request, *elbv2.DeleteLoadBalancerOutput)) {
	fake.deleteLoadBalancerRequestMutex.Lock()
	defer fake.deleteLoadBalancerRequestMutex.Unlock()
	fake.DeleteLoadBalancerRequestStub = stub
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequestArgsForCall(i int) *elbv2.DeleteLoadBalancerInput {
	fake.deleteLoadBalancerRequestMutex.RLock()
	defer fake.deleteLoadBalancerRequestMutex.RUnlock()
	argsForCall := fake.deleteLoadBalancerRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequestReturns(result1 *request.Request, result2 *elbv2.DeleteLoadBalancerOutput) {
	fake.deleteLoadBalancerRequestMutex.Lock()
	defer fake.deleteLoadBalancerRequestMutex.Unlock()
	fake.DeleteLoadBalancerRequestStub = nil
	fake.deleteLoadBalancerRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DeleteLoadBalancerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancerRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DeleteLoadBalancerOutput) {
	fake.deleteLoadBalancerRequestMutex.Lock()
	defer fake.deleteLoadBalancerRequestMutex.Unlock()
	fake.DeleteLoadBalancerRequestStub = nil
	if fake.deleteLoadBalancerRequestReturnsOnCall == nil {
		fake.deleteLoadBalancerRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DeleteLoadBalancerOutput
		})
	}
	fake.deleteLoadBalancerRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DeleteLoadBalancerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContext(arg1 aws.Context, arg2 *elbv2.DeleteLoadBalancerInput, arg3 ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error) {
	fake.deleteLoadBalancerWithContextMutex.Lock()
	ret, specificReturn := fake.deleteLoadBalancerWithContextReturnsOnCall[len(fake.deleteLoadBalancerWithContextArgsForCall)]
	fake.deleteLoadBalancerWithContextArgsForCall = append(fake.deleteLoadBalancerWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteLoadBalancerInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteLoadBalancerWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteLoadBalancerWithContextMutex.Unlock()
	if fake.DeleteLoadBalancerWithContextStub != nil {
		return fake.DeleteLoadBalancerWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLoadBalancerWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContextCallCount() int {
	fake.deleteLoadBalancerWithContextMutex.RLock()
	defer fake.deleteLoadBalancerWithContextMutex.RUnlock()
	return len(fake.deleteLoadBalancerWithContextArgsForCall)
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContextCalls(stub func(aws.Context, *elbv2.DeleteLoadBalancerInput, ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error)) {
	fake.deleteLoadBalancerWithContextMutex.Lock()
	defer fake.deleteLoadBalancerWithContextMutex.Unlock()
	fake.DeleteLoadBalancerWithContextStub = stub
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContextArgsForCall(i int) (aws.Context, *elbv2.DeleteLoadBalancerInput, []request.Option) {
	fake.deleteLoadBalancerWithContextMutex.RLock()
	defer fake.deleteLoadBalancerWithContextMutex.RUnlock()
	argsForCall := fake.deleteLoadBalancerWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContextReturns(result1 *elbv2.DeleteLoadBalancerOutput, result2 error) {
	fake.deleteLoadBalancerWithContextMutex.Lock()
	defer fake.deleteLoadBalancerWithContextMutex.Unlock()
	fake.DeleteLoadBalancerWithContextStub = nil
	fake.deleteLoadBalancerWithContextReturns = struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteLoadBalancerWithContextReturnsOnCall(i int, result1 *elbv2.DeleteLoadBalancerOutput, result2 error) {
	fake.deleteLoadBalancerWithContextMutex.Lock()
	defer fake.deleteLoadBalancerWithContextMutex.Unlock()
	fake.DeleteLoadBalancerWithContextStub = nil
	if fake.deleteLoadBalancerWithContextReturnsOnCall == nil {
		fake.deleteLoadBalancerWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteLoadBalancerOutput
			result2 error
		})
	}
	fake.deleteLoadBalancerWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteLoadBalancerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRule(arg1 *elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error) {
	fake.deleteRuleMutex.Lock()
	ret, specificReturn := fake.deleteRuleReturnsOnCall[len(fake.deleteRuleArgsForCall)]
	fake.deleteRuleArgsForCall = append(fake.deleteRuleArgsForCall, struct {
		arg1 *elbv2.DeleteRuleInput
	}{arg1})
	fake.recordInvocation("DeleteRule", []interface{}{arg1})
	fake.deleteRuleMutex.Unlock()
	if fake.DeleteRuleStub != nil {
		return fake.DeleteRuleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRuleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteRuleCallCount() int {
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	return len(fake.deleteRuleArgsForCall)
}

func (fake *FakeELBV2API) DeleteRuleCalls(stub func(*elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error)) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = stub
}

func (fake *FakeELBV2API) DeleteRuleArgsForCall(i int) *elbv2.DeleteRuleInput {
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	argsForCall := fake.deleteRuleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteRuleReturns(result1 *elbv2.DeleteRuleOutput, result2 error) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = nil
	fake.deleteRuleReturns = struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRuleReturnsOnCall(i int, result1 *elbv2.DeleteRuleOutput, result2 error) {
	fake.deleteRuleMutex.Lock()
	defer fake.deleteRuleMutex.Unlock()
	fake.DeleteRuleStub = nil
	if fake.deleteRuleReturnsOnCall == nil {
		fake.deleteRuleReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteRuleOutput
			result2 error
		})
	}
	fake.deleteRuleReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRuleRequest(arg1 *elbv2.DeleteRuleInput) (*request.Request, *elbv2.DeleteRuleOutput) {
	fake.deleteRuleRequestMutex.Lock()
	ret, specificReturn := fake.deleteRuleRequestReturnsOnCall[len(fake.deleteRuleRequestArgsForCall)]
	fake.deleteRuleRequestArgsForCall = append(fake.deleteRuleRequestArgsForCall, struct {
		arg1 *elbv2.DeleteRuleInput
	}{arg1})
	fake.recordInvocation("DeleteRuleRequest", []interface{}{arg1})
	fake.deleteRuleRequestMutex.Unlock()
	if fake.DeleteRuleRequestStub != nil {
		return fake.DeleteRuleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRuleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteRuleRequestCallCount() int {
	fake.deleteRuleRequestMutex.RLock()
	defer fake.deleteRuleRequestMutex.RUnlock()
	return len(fake.deleteRuleRequestArgsForCall)
}

func (fake *FakeELBV2API) DeleteRuleRequestCalls(stub func(*elbv2.DeleteRuleInput) (*request.Request, *elbv2.DeleteRuleOutput)) {
	fake.deleteRuleRequestMutex.Lock()
	defer fake.deleteRuleRequestMutex.Unlock()
	fake.DeleteRuleRequestStub = stub
}

func (fake *FakeELBV2API) DeleteRuleRequestArgsForCall(i int) *elbv2.DeleteRuleInput {
	fake.deleteRuleRequestMutex.RLock()
	defer fake.deleteRuleRequestMutex.RUnlock()
	argsForCall := fake.deleteRuleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteRuleRequestReturns(result1 *request.Request, result2 *elbv2.DeleteRuleOutput) {
	fake.deleteRuleRequestMutex.Lock()
	defer fake.deleteRuleRequestMutex.Unlock()
	fake.DeleteRuleRequestStub = nil
	fake.deleteRuleRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DeleteRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRuleRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DeleteRuleOutput) {
	fake.deleteRuleRequestMutex.Lock()
	defer fake.deleteRuleRequestMutex.Unlock()
	fake.DeleteRuleRequestStub = nil
	if fake.deleteRuleRequestReturnsOnCall == nil {
		fake.deleteRuleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DeleteRuleOutput
		})
	}
	fake.deleteRuleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DeleteRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRuleWithContext(arg1 aws.Context, arg2 *elbv2.DeleteRuleInput, arg3 ...request.Option) (*elbv2.DeleteRuleOutput, error) {
	fake.deleteRuleWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRuleWithContextReturnsOnCall[len(fake.deleteRuleWithContextArgsForCall)]
	fake.deleteRuleWithContextArgsForCall = append(fake.deleteRuleWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteRuleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRuleWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRuleWithContextMutex.Unlock()
	if fake.DeleteRuleWithContextStub != nil {
		return fake.DeleteRuleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRuleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteRuleWithContextCallCount() int {
	fake.deleteRuleWithContextMutex.RLock()
	defer fake.deleteRuleWithContextMutex.RUnlock()
	return len(fake.deleteRuleWithContextArgsForCall)
}

func (fake *FakeELBV2API) DeleteRuleWithContextCalls(stub func(aws.Context, *elbv2.DeleteRuleInput, ...request.Option) (*elbv2.DeleteRuleOutput, error)) {
	fake.deleteRuleWithContextMutex.Lock()
	defer fake.deleteRuleWithContextMutex.Unlock()
	fake.DeleteRuleWithContextStub = stub
}

func (fake *FakeELBV2API) DeleteRuleWithContextArgsForCall(i int) (aws.Context, *elbv2.DeleteRuleInput, []request.Option) {
	fake.deleteRuleWithContextMutex.RLock()
	defer fake.deleteRuleWithContextMutex.RUnlock()
	argsForCall := fake.deleteRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DeleteRuleWithContextReturns(result1 *elbv2.DeleteRuleOutput, result2 error) {
	fake.deleteRuleWithContextMutex.Lock()
	defer fake.deleteRuleWithContextMutex.Unlock()
	fake.DeleteRuleWithContextStub = nil
	fake.deleteRuleWithContextReturns = struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteRuleWithContextReturnsOnCall(i int, result1 *elbv2.DeleteRuleOutput, result2 error) {
	fake.deleteRuleWithContextMutex.Lock()
	defer fake.deleteRuleWithContextMutex.Unlock()
	fake.DeleteRuleWithContextStub = nil
	if fake.deleteRuleWithContextReturnsOnCall == nil {
		fake.deleteRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteRuleOutput
			result2 error
		})
	}
	fake.deleteRuleWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroup(arg1 *elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error) {
	fake.deleteTargetGroupMutex.Lock()
	ret, specificReturn := fake.deleteTargetGroupReturnsOnCall[len(fake.deleteTargetGroupArgsForCall)]
	fake.deleteTargetGroupArgsForCall = append(fake.deleteTargetGroupArgsForCall, struct {
		arg1 *elbv2.DeleteTargetGroupInput
	}{arg1})
	fake.recordInvocation("DeleteTargetGroup", []interface{}{arg1})
	fake.deleteTargetGroupMutex.Unlock()
	if fake.DeleteTargetGroupStub != nil {
		return fake.DeleteTargetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTargetGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteTargetGroupCallCount() int {
	fake.deleteTargetGroupMutex.RLock()
	defer fake.deleteTargetGroupMutex.RUnlock()
	return len(fake.deleteTargetGroupArgsForCall)
}

func (fake *FakeELBV2API) DeleteTargetGroupCalls(stub func(*elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error)) {
	fake.deleteTargetGroupMutex.Lock()
	defer fake.deleteTargetGroupMutex.Unlock()
	fake.DeleteTargetGroupStub = stub
}

func (fake *FakeELBV2API) DeleteTargetGroupArgsForCall(i int) *elbv2.DeleteTargetGroupInput {
	fake.deleteTargetGroupMutex.RLock()
	defer fake.deleteTargetGroupMutex.RUnlock()
	argsForCall := fake.deleteTargetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteTargetGroupReturns(result1 *elbv2.DeleteTargetGroupOutput, result2 error) {
	fake.deleteTargetGroupMutex.Lock()
	defer fake.deleteTargetGroupMutex.Unlock()
	fake.DeleteTargetGroupStub = nil
	fake.deleteTargetGroupReturns = struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroupReturnsOnCall(i int, result1 *elbv2.DeleteTargetGroupOutput, result2 error) {
	fake.deleteTargetGroupMutex.Lock()
	defer fake.deleteTargetGroupMutex.Unlock()
	fake.DeleteTargetGroupStub = nil
	if fake.deleteTargetGroupReturnsOnCall == nil {
		fake.deleteTargetGroupReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteTargetGroupOutput
			result2 error
		})
	}
	fake.deleteTargetGroupReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroupRequest(arg1 *elbv2.DeleteTargetGroupInput) (*request.Request, *elbv2.DeleteTargetGroupOutput) {
	fake.deleteTargetGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteTargetGroupRequestReturnsOnCall[len(fake.deleteTargetGroupRequestArgsForCall)]
	fake.deleteTargetGroupRequestArgsForCall = append(fake.deleteTargetGroupRequestArgsForCall, struct {
		arg1 *elbv2.DeleteTargetGroupInput
	}{arg1})
	fake.recordInvocation("DeleteTargetGroupRequest", []interface{}{arg1})
	fake.deleteTargetGroupRequestMutex.Unlock()
	if fake.DeleteTargetGroupRequestStub != nil {
		return fake.DeleteTargetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTargetGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteTargetGroupRequestCallCount() int {
	fake.deleteTargetGroupRequestMutex.RLock()
	defer fake.deleteTargetGroupRequestMutex.RUnlock()
	return len(fake.deleteTargetGroupRequestArgsForCall)
}

func (fake *FakeELBV2API) DeleteTargetGroupRequestCalls(stub func(*elbv2.DeleteTargetGroupInput) (*request.Request, *elbv2.DeleteTargetGroupOutput)) {
	fake.deleteTargetGroupRequestMutex.Lock()
	defer fake.deleteTargetGroupRequestMutex.Unlock()
	fake.DeleteTargetGroupRequestStub = stub
}

func (fake *FakeELBV2API) DeleteTargetGroupRequestArgsForCall(i int) *elbv2.DeleteTargetGroupInput {
	fake.deleteTargetGroupRequestMutex.RLock()
	defer fake.deleteTargetGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteTargetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeleteTargetGroupRequestReturns(result1 *request.Request, result2 *elbv2.DeleteTargetGroupOutput) {
	fake.deleteTargetGroupRequestMutex.Lock()
	defer fake.deleteTargetGroupRequestMutex.Unlock()
	fake.DeleteTargetGroupRequestStub = nil
	fake.deleteTargetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DeleteTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DeleteTargetGroupOutput) {
	fake.deleteTargetGroupRequestMutex.Lock()
	defer fake.deleteTargetGroupRequestMutex.Unlock()
	fake.DeleteTargetGroupRequestStub = nil
	if fake.deleteTargetGroupRequestReturnsOnCall == nil {
		fake.deleteTargetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DeleteTargetGroupOutput
		})
	}
	fake.deleteTargetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DeleteTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContext(arg1 aws.Context, arg2 *elbv2.DeleteTargetGroupInput, arg3 ...request.Option) (*elbv2.DeleteTargetGroupOutput, error) {
	fake.deleteTargetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTargetGroupWithContextReturnsOnCall[len(fake.deleteTargetGroupWithContextArgsForCall)]
	fake.deleteTargetGroupWithContextArgsForCall = append(fake.deleteTargetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DeleteTargetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTargetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTargetGroupWithContextMutex.Unlock()
	if fake.DeleteTargetGroupWithContextStub != nil {
		return fake.DeleteTargetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTargetGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContextCallCount() int {
	fake.deleteTargetGroupWithContextMutex.RLock()
	defer fake.deleteTargetGroupWithContextMutex.RUnlock()
	return len(fake.deleteTargetGroupWithContextArgsForCall)
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContextCalls(stub func(aws.Context, *elbv2.DeleteTargetGroupInput, ...request.Option) (*elbv2.DeleteTargetGroupOutput, error)) {
	fake.deleteTargetGroupWithContextMutex.Lock()
	defer fake.deleteTargetGroupWithContextMutex.Unlock()
	fake.DeleteTargetGroupWithContextStub = stub
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContextArgsForCall(i int) (aws.Context, *elbv2.DeleteTargetGroupInput, []request.Option) {
	fake.deleteTargetGroupWithContextMutex.RLock()
	defer fake.deleteTargetGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteTargetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContextReturns(result1 *elbv2.DeleteTargetGroupOutput, result2 error) {
	fake.deleteTargetGroupWithContextMutex.Lock()
	defer fake.deleteTargetGroupWithContextMutex.Unlock()
	fake.DeleteTargetGroupWithContextStub = nil
	fake.deleteTargetGroupWithContextReturns = struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeleteTargetGroupWithContextReturnsOnCall(i int, result1 *elbv2.DeleteTargetGroupOutput, result2 error) {
	fake.deleteTargetGroupWithContextMutex.Lock()
	defer fake.deleteTargetGroupWithContextMutex.Unlock()
	fake.DeleteTargetGroupWithContextStub = nil
	if fake.deleteTargetGroupWithContextReturnsOnCall == nil {
		fake.deleteTargetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeleteTargetGroupOutput
			result2 error
		})
	}
	fake.deleteTargetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DeleteTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargets(arg1 *elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error) {
	fake.deregisterTargetsMutex.Lock()
	ret, specificReturn := fake.deregisterTargetsReturnsOnCall[len(fake.deregisterTargetsArgsForCall)]
	fake.deregisterTargetsArgsForCall = append(fake.deregisterTargetsArgsForCall, struct {
		arg1 *elbv2.DeregisterTargetsInput
	}{arg1})
	fake.recordInvocation("DeregisterTargets", []interface{}{arg1})
	fake.deregisterTargetsMutex.Unlock()
	if fake.DeregisterTargetsStub != nil {
		return fake.DeregisterTargetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTargetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeregisterTargetsCallCount() int {
	fake.deregisterTargetsMutex.RLock()
	defer fake.deregisterTargetsMutex.RUnlock()
	return len(fake.deregisterTargetsArgsForCall)
}

func (fake *FakeELBV2API) DeregisterTargetsCalls(stub func(*elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error)) {
	fake.deregisterTargetsMutex.Lock()
	defer fake.deregisterTargetsMutex.Unlock()
	fake.DeregisterTargetsStub = stub
}

func (fake *FakeELBV2API) DeregisterTargetsArgsForCall(i int) *elbv2.DeregisterTargetsInput {
	fake.deregisterTargetsMutex.RLock()
	defer fake.deregisterTargetsMutex.RUnlock()
	argsForCall := fake.deregisterTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeregisterTargetsReturns(result1 *elbv2.DeregisterTargetsOutput, result2 error) {
	fake.deregisterTargetsMutex.Lock()
	defer fake.deregisterTargetsMutex.Unlock()
	fake.DeregisterTargetsStub = nil
	fake.deregisterTargetsReturns = struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargetsReturnsOnCall(i int, result1 *elbv2.DeregisterTargetsOutput, result2 error) {
	fake.deregisterTargetsMutex.Lock()
	defer fake.deregisterTargetsMutex.Unlock()
	fake.DeregisterTargetsStub = nil
	if fake.deregisterTargetsReturnsOnCall == nil {
		fake.deregisterTargetsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeregisterTargetsOutput
			result2 error
		})
	}
	fake.deregisterTargetsReturnsOnCall[i] = struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargetsRequest(arg1 *elbv2.DeregisterTargetsInput) (*request.Request, *elbv2.DeregisterTargetsOutput) {
	fake.deregisterTargetsRequestMutex.Lock()
	ret, specificReturn := fake.deregisterTargetsRequestReturnsOnCall[len(fake.deregisterTargetsRequestArgsForCall)]
	fake.deregisterTargetsRequestArgsForCall = append(fake.deregisterTargetsRequestArgsForCall, struct {
		arg1 *elbv2.DeregisterTargetsInput
	}{arg1})
	fake.recordInvocation("DeregisterTargetsRequest", []interface{}{arg1})
	fake.deregisterTargetsRequestMutex.Unlock()
	if fake.DeregisterTargetsRequestStub != nil {
		return fake.DeregisterTargetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTargetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeregisterTargetsRequestCallCount() int {
	fake.deregisterTargetsRequestMutex.RLock()
	defer fake.deregisterTargetsRequestMutex.RUnlock()
	return len(fake.deregisterTargetsRequestArgsForCall)
}

func (fake *FakeELBV2API) DeregisterTargetsRequestCalls(stub func(*elbv2.DeregisterTargetsInput) (*request.Request, *elbv2.DeregisterTargetsOutput)) {
	fake.deregisterTargetsRequestMutex.Lock()
	defer fake.deregisterTargetsRequestMutex.Unlock()
	fake.DeregisterTargetsRequestStub = stub
}

func (fake *FakeELBV2API) DeregisterTargetsRequestArgsForCall(i int) *elbv2.DeregisterTargetsInput {
	fake.deregisterTargetsRequestMutex.RLock()
	defer fake.deregisterTargetsRequestMutex.RUnlock()
	argsForCall := fake.deregisterTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DeregisterTargetsRequestReturns(result1 *request.Request, result2 *elbv2.DeregisterTargetsOutput) {
	fake.deregisterTargetsRequestMutex.Lock()
	defer fake.deregisterTargetsRequestMutex.Unlock()
	fake.DeregisterTargetsRequestStub = nil
	fake.deregisterTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DeregisterTargetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DeregisterTargetsOutput) {
	fake.deregisterTargetsRequestMutex.Lock()
	defer fake.deregisterTargetsRequestMutex.Unlock()
	fake.DeregisterTargetsRequestStub = nil
	if fake.deregisterTargetsRequestReturnsOnCall == nil {
		fake.deregisterTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DeregisterTargetsOutput
		})
	}
	fake.deregisterTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DeregisterTargetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargetsWithContext(arg1 aws.Context, arg2 *elbv2.DeregisterTargetsInput, arg3 ...request.Option) (*elbv2.DeregisterTargetsOutput, error) {
	fake.deregisterTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterTargetsWithContextReturnsOnCall[len(fake.deregisterTargetsWithContextArgsForCall)]
	fake.deregisterTargetsWithContextArgsForCall = append(fake.deregisterTargetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DeregisterTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeregisterTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterTargetsWithContextMutex.Unlock()
	if fake.DeregisterTargetsWithContextStub != nil {
		return fake.DeregisterTargetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTargetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DeregisterTargetsWithContextCallCount() int {
	fake.deregisterTargetsWithContextMutex.RLock()
	defer fake.deregisterTargetsWithContextMutex.RUnlock()
	return len(fake.deregisterTargetsWithContextArgsForCall)
}

func (fake *FakeELBV2API) DeregisterTargetsWithContextCalls(stub func(aws.Context, *elbv2.DeregisterTargetsInput, ...request.Option) (*elbv2.DeregisterTargetsOutput, error)) {
	fake.deregisterTargetsWithContextMutex.Lock()
	defer fake.deregisterTargetsWithContextMutex.Unlock()
	fake.DeregisterTargetsWithContextStub = stub
}

func (fake *FakeELBV2API) DeregisterTargetsWithContextArgsForCall(i int) (aws.Context, *elbv2.DeregisterTargetsInput, []request.Option) {
	fake.deregisterTargetsWithContextMutex.RLock()
	defer fake.deregisterTargetsWithContextMutex.RUnlock()
	argsForCall := fake.deregisterTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DeregisterTargetsWithContextReturns(result1 *elbv2.DeregisterTargetsOutput, result2 error) {
	fake.deregisterTargetsWithContextMutex.Lock()
	defer fake.deregisterTargetsWithContextMutex.Unlock()
	fake.DeregisterTargetsWithContextStub = nil
	fake.deregisterTargetsWithContextReturns = struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DeregisterTargetsWithContextReturnsOnCall(i int, result1 *elbv2.DeregisterTargetsOutput, result2 error) {
	fake.deregisterTargetsWithContextMutex.Lock()
	defer fake.deregisterTargetsWithContextMutex.Unlock()
	fake.DeregisterTargetsWithContextStub = nil
	if fake.deregisterTargetsWithContextReturnsOnCall == nil {
		fake.deregisterTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DeregisterTargetsOutput
			result2 error
		})
	}
	fake.deregisterTargetsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DeregisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimits(arg1 *elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error) {
	fake.describeAccountLimitsMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsReturnsOnCall[len(fake.describeAccountLimitsArgsForCall)]
	fake.describeAccountLimitsArgsForCall = append(fake.describeAccountLimitsArgsForCall, struct {
		arg1 *elbv2.DescribeAccountLimitsInput
	}{arg1})
	fake.recordInvocation("DescribeAccountLimits", []interface{}{arg1})
	fake.describeAccountLimitsMutex.Unlock()
	if fake.DescribeAccountLimitsStub != nil {
		return fake.DescribeAccountLimitsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountLimitsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeAccountLimitsCallCount() int {
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	return len(fake.describeAccountLimitsArgsForCall)
}

func (fake *FakeELBV2API) DescribeAccountLimitsCalls(stub func(*elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error)) {
	fake.describeAccountLimitsMutex.Lock()
	defer fake.describeAccountLimitsMutex.Unlock()
	fake.DescribeAccountLimitsStub = stub
}

func (fake *FakeELBV2API) DescribeAccountLimitsArgsForCall(i int) *elbv2.DescribeAccountLimitsInput {
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	argsForCall := fake.describeAccountLimitsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeAccountLimitsReturns(result1 *elbv2.DescribeAccountLimitsOutput, result2 error) {
	fake.describeAccountLimitsMutex.Lock()
	defer fake.describeAccountLimitsMutex.Unlock()
	fake.DescribeAccountLimitsStub = nil
	fake.describeAccountLimitsReturns = struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimitsReturnsOnCall(i int, result1 *elbv2.DescribeAccountLimitsOutput, result2 error) {
	fake.describeAccountLimitsMutex.Lock()
	defer fake.describeAccountLimitsMutex.Unlock()
	fake.DescribeAccountLimitsStub = nil
	if fake.describeAccountLimitsReturnsOnCall == nil {
		fake.describeAccountLimitsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeAccountLimitsOutput
			result2 error
		})
	}
	fake.describeAccountLimitsReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequest(arg1 *elbv2.DescribeAccountLimitsInput) (*request.Request, *elbv2.DescribeAccountLimitsOutput) {
	fake.describeAccountLimitsRequestMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsRequestReturnsOnCall[len(fake.describeAccountLimitsRequestArgsForCall)]
	fake.describeAccountLimitsRequestArgsForCall = append(fake.describeAccountLimitsRequestArgsForCall, struct {
		arg1 *elbv2.DescribeAccountLimitsInput
	}{arg1})
	fake.recordInvocation("DescribeAccountLimitsRequest", []interface{}{arg1})
	fake.describeAccountLimitsRequestMutex.Unlock()
	if fake.DescribeAccountLimitsRequestStub != nil {
		return fake.DescribeAccountLimitsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountLimitsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequestCallCount() int {
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	return len(fake.describeAccountLimitsRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequestCalls(stub func(*elbv2.DescribeAccountLimitsInput) (*request.Request, *elbv2.DescribeAccountLimitsOutput)) {
	fake.describeAccountLimitsRequestMutex.Lock()
	defer fake.describeAccountLimitsRequestMutex.Unlock()
	fake.DescribeAccountLimitsRequestStub = stub
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequestArgsForCall(i int) *elbv2.DescribeAccountLimitsInput {
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	argsForCall := fake.describeAccountLimitsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequestReturns(result1 *request.Request, result2 *elbv2.DescribeAccountLimitsOutput) {
	fake.describeAccountLimitsRequestMutex.Lock()
	defer fake.describeAccountLimitsRequestMutex.Unlock()
	fake.DescribeAccountLimitsRequestStub = nil
	fake.describeAccountLimitsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeAccountLimitsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimitsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeAccountLimitsOutput) {
	fake.describeAccountLimitsRequestMutex.Lock()
	defer fake.describeAccountLimitsRequestMutex.Unlock()
	fake.DescribeAccountLimitsRequestStub = nil
	if fake.describeAccountLimitsRequestReturnsOnCall == nil {
		fake.describeAccountLimitsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeAccountLimitsOutput
		})
	}
	fake.describeAccountLimitsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeAccountLimitsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContext(arg1 aws.Context, arg2 *elbv2.DescribeAccountLimitsInput, arg3 ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error) {
	fake.describeAccountLimitsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsWithContextReturnsOnCall[len(fake.describeAccountLimitsWithContextArgsForCall)]
	fake.describeAccountLimitsWithContextArgsForCall = append(fake.describeAccountLimitsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeAccountLimitsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAccountLimitsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAccountLimitsWithContextMutex.Unlock()
	if fake.DescribeAccountLimitsWithContextStub != nil {
		return fake.DescribeAccountLimitsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountLimitsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContextCallCount() int {
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	return len(fake.describeAccountLimitsWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContextCalls(stub func(aws.Context, *elbv2.DescribeAccountLimitsInput, ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error)) {
	fake.describeAccountLimitsWithContextMutex.Lock()
	defer fake.describeAccountLimitsWithContextMutex.Unlock()
	fake.DescribeAccountLimitsWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeAccountLimitsInput, []request.Option) {
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	argsForCall := fake.describeAccountLimitsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContextReturns(result1 *elbv2.DescribeAccountLimitsOutput, result2 error) {
	fake.describeAccountLimitsWithContextMutex.Lock()
	defer fake.describeAccountLimitsWithContextMutex.Unlock()
	fake.DescribeAccountLimitsWithContextStub = nil
	fake.describeAccountLimitsWithContextReturns = struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeAccountLimitsWithContextReturnsOnCall(i int, result1 *elbv2.DescribeAccountLimitsOutput, result2 error) {
	fake.describeAccountLimitsWithContextMutex.Lock()
	defer fake.describeAccountLimitsWithContextMutex.Unlock()
	fake.DescribeAccountLimitsWithContextStub = nil
	if fake.describeAccountLimitsWithContextReturnsOnCall == nil {
		fake.describeAccountLimitsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeAccountLimitsOutput
			result2 error
		})
	}
	fake.describeAccountLimitsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificates(arg1 *elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error) {
	fake.describeListenerCertificatesMutex.Lock()
	ret, specificReturn := fake.describeListenerCertificatesReturnsOnCall[len(fake.describeListenerCertificatesArgsForCall)]
	fake.describeListenerCertificatesArgsForCall = append(fake.describeListenerCertificatesArgsForCall, struct {
		arg1 *elbv2.DescribeListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("DescribeListenerCertificates", []interface{}{arg1})
	fake.describeListenerCertificatesMutex.Unlock()
	if fake.DescribeListenerCertificatesStub != nil {
		return fake.DescribeListenerCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenerCertificatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenerCertificatesCallCount() int {
	fake.describeListenerCertificatesMutex.RLock()
	defer fake.describeListenerCertificatesMutex.RUnlock()
	return len(fake.describeListenerCertificatesArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenerCertificatesCalls(stub func(*elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error)) {
	fake.describeListenerCertificatesMutex.Lock()
	defer fake.describeListenerCertificatesMutex.Unlock()
	fake.DescribeListenerCertificatesStub = stub
}

func (fake *FakeELBV2API) DescribeListenerCertificatesArgsForCall(i int) *elbv2.DescribeListenerCertificatesInput {
	fake.describeListenerCertificatesMutex.RLock()
	defer fake.describeListenerCertificatesMutex.RUnlock()
	argsForCall := fake.describeListenerCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeListenerCertificatesReturns(result1 *elbv2.DescribeListenerCertificatesOutput, result2 error) {
	fake.describeListenerCertificatesMutex.Lock()
	defer fake.describeListenerCertificatesMutex.Unlock()
	fake.DescribeListenerCertificatesStub = nil
	fake.describeListenerCertificatesReturns = struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificatesReturnsOnCall(i int, result1 *elbv2.DescribeListenerCertificatesOutput, result2 error) {
	fake.describeListenerCertificatesMutex.Lock()
	defer fake.describeListenerCertificatesMutex.Unlock()
	fake.DescribeListenerCertificatesStub = nil
	if fake.describeListenerCertificatesReturnsOnCall == nil {
		fake.describeListenerCertificatesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeListenerCertificatesOutput
			result2 error
		})
	}
	fake.describeListenerCertificatesReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequest(arg1 *elbv2.DescribeListenerCertificatesInput) (*request.Request, *elbv2.DescribeListenerCertificatesOutput) {
	fake.describeListenerCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.describeListenerCertificatesRequestReturnsOnCall[len(fake.describeListenerCertificatesRequestArgsForCall)]
	fake.describeListenerCertificatesRequestArgsForCall = append(fake.describeListenerCertificatesRequestArgsForCall, struct {
		arg1 *elbv2.DescribeListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("DescribeListenerCertificatesRequest", []interface{}{arg1})
	fake.describeListenerCertificatesRequestMutex.Unlock()
	if fake.DescribeListenerCertificatesRequestStub != nil {
		return fake.DescribeListenerCertificatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenerCertificatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequestCallCount() int {
	fake.describeListenerCertificatesRequestMutex.RLock()
	defer fake.describeListenerCertificatesRequestMutex.RUnlock()
	return len(fake.describeListenerCertificatesRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequestCalls(stub func(*elbv2.DescribeListenerCertificatesInput) (*request.Request, *elbv2.DescribeListenerCertificatesOutput)) {
	fake.describeListenerCertificatesRequestMutex.Lock()
	defer fake.describeListenerCertificatesRequestMutex.Unlock()
	fake.DescribeListenerCertificatesRequestStub = stub
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequestArgsForCall(i int) *elbv2.DescribeListenerCertificatesInput {
	fake.describeListenerCertificatesRequestMutex.RLock()
	defer fake.describeListenerCertificatesRequestMutex.RUnlock()
	argsForCall := fake.describeListenerCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequestReturns(result1 *request.Request, result2 *elbv2.DescribeListenerCertificatesOutput) {
	fake.describeListenerCertificatesRequestMutex.Lock()
	defer fake.describeListenerCertificatesRequestMutex.Unlock()
	fake.DescribeListenerCertificatesRequestStub = nil
	fake.describeListenerCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeListenerCertificatesOutput) {
	fake.describeListenerCertificatesRequestMutex.Lock()
	defer fake.describeListenerCertificatesRequestMutex.Unlock()
	fake.DescribeListenerCertificatesRequestStub = nil
	if fake.describeListenerCertificatesRequestReturnsOnCall == nil {
		fake.describeListenerCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeListenerCertificatesOutput
		})
	}
	fake.describeListenerCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeListenerCertificatesInput, arg3 ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error) {
	fake.describeListenerCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeListenerCertificatesWithContextReturnsOnCall[len(fake.describeListenerCertificatesWithContextArgsForCall)]
	fake.describeListenerCertificatesWithContextArgsForCall = append(fake.describeListenerCertificatesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenerCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeListenerCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeListenerCertificatesWithContextMutex.Unlock()
	if fake.DescribeListenerCertificatesWithContextStub != nil {
		return fake.DescribeListenerCertificatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenerCertificatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContextCallCount() int {
	fake.describeListenerCertificatesWithContextMutex.RLock()
	defer fake.describeListenerCertificatesWithContextMutex.RUnlock()
	return len(fake.describeListenerCertificatesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContextCalls(stub func(aws.Context, *elbv2.DescribeListenerCertificatesInput, ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error)) {
	fake.describeListenerCertificatesWithContextMutex.Lock()
	defer fake.describeListenerCertificatesWithContextMutex.Unlock()
	fake.DescribeListenerCertificatesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeListenerCertificatesInput, []request.Option) {
	fake.describeListenerCertificatesWithContextMutex.RLock()
	defer fake.describeListenerCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.describeListenerCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContextReturns(result1 *elbv2.DescribeListenerCertificatesOutput, result2 error) {
	fake.describeListenerCertificatesWithContextMutex.Lock()
	defer fake.describeListenerCertificatesWithContextMutex.Unlock()
	fake.DescribeListenerCertificatesWithContextStub = nil
	fake.describeListenerCertificatesWithContextReturns = struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenerCertificatesWithContextReturnsOnCall(i int, result1 *elbv2.DescribeListenerCertificatesOutput, result2 error) {
	fake.describeListenerCertificatesWithContextMutex.Lock()
	defer fake.describeListenerCertificatesWithContextMutex.Unlock()
	fake.DescribeListenerCertificatesWithContextStub = nil
	if fake.describeListenerCertificatesWithContextReturnsOnCall == nil {
		fake.describeListenerCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeListenerCertificatesOutput
			result2 error
		})
	}
	fake.describeListenerCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListeners(arg1 *elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error) {
	fake.describeListenersMutex.Lock()
	ret, specificReturn := fake.describeListenersReturnsOnCall[len(fake.describeListenersArgsForCall)]
	fake.describeListenersArgsForCall = append(fake.describeListenersArgsForCall, struct {
		arg1 *elbv2.DescribeListenersInput
	}{arg1})
	fake.recordInvocation("DescribeListeners", []interface{}{arg1})
	fake.describeListenersMutex.Unlock()
	if fake.DescribeListenersStub != nil {
		return fake.DescribeListenersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenersCallCount() int {
	fake.describeListenersMutex.RLock()
	defer fake.describeListenersMutex.RUnlock()
	return len(fake.describeListenersArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenersCalls(stub func(*elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error)) {
	fake.describeListenersMutex.Lock()
	defer fake.describeListenersMutex.Unlock()
	fake.DescribeListenersStub = stub
}

func (fake *FakeELBV2API) DescribeListenersArgsForCall(i int) *elbv2.DescribeListenersInput {
	fake.describeListenersMutex.RLock()
	defer fake.describeListenersMutex.RUnlock()
	argsForCall := fake.describeListenersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeListenersReturns(result1 *elbv2.DescribeListenersOutput, result2 error) {
	fake.describeListenersMutex.Lock()
	defer fake.describeListenersMutex.Unlock()
	fake.DescribeListenersStub = nil
	fake.describeListenersReturns = struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenersReturnsOnCall(i int, result1 *elbv2.DescribeListenersOutput, result2 error) {
	fake.describeListenersMutex.Lock()
	defer fake.describeListenersMutex.Unlock()
	fake.DescribeListenersStub = nil
	if fake.describeListenersReturnsOnCall == nil {
		fake.describeListenersReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeListenersOutput
			result2 error
		})
	}
	fake.describeListenersReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenersPages(arg1 *elbv2.DescribeListenersInput, arg2 func(*elbv2.DescribeListenersOutput, bool) bool) error {
	fake.describeListenersPagesMutex.Lock()
	ret, specificReturn := fake.describeListenersPagesReturnsOnCall[len(fake.describeListenersPagesArgsForCall)]
	fake.describeListenersPagesArgsForCall = append(fake.describeListenersPagesArgsForCall, struct {
		arg1 *elbv2.DescribeListenersInput
		arg2 func(*elbv2.DescribeListenersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeListenersPages", []interface{}{arg1, arg2})
	fake.describeListenersPagesMutex.Unlock()
	if fake.DescribeListenersPagesStub != nil {
		return fake.DescribeListenersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeListenersPagesReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeListenersPagesCallCount() int {
	fake.describeListenersPagesMutex.RLock()
	defer fake.describeListenersPagesMutex.RUnlock()
	return len(fake.describeListenersPagesArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenersPagesCalls(stub func(*elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool) error) {
	fake.describeListenersPagesMutex.Lock()
	defer fake.describeListenersPagesMutex.Unlock()
	fake.DescribeListenersPagesStub = stub
}

func (fake *FakeELBV2API) DescribeListenersPagesArgsForCall(i int) (*elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool) {
	fake.describeListenersPagesMutex.RLock()
	defer fake.describeListenersPagesMutex.RUnlock()
	argsForCall := fake.describeListenersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeELBV2API) DescribeListenersPagesReturns(result1 error) {
	fake.describeListenersPagesMutex.Lock()
	defer fake.describeListenersPagesMutex.Unlock()
	fake.DescribeListenersPagesStub = nil
	fake.describeListenersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeListenersPagesReturnsOnCall(i int, result1 error) {
	fake.describeListenersPagesMutex.Lock()
	defer fake.describeListenersPagesMutex.Unlock()
	fake.DescribeListenersPagesStub = nil
	if fake.describeListenersPagesReturnsOnCall == nil {
		fake.describeListenersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeListenersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeListenersInput, arg3 func(*elbv2.DescribeListenersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeListenersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeListenersPagesWithContextReturnsOnCall[len(fake.describeListenersPagesWithContextArgsForCall)]
	fake.describeListenersPagesWithContextArgsForCall = append(fake.describeListenersPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenersInput
		arg3 func(*elbv2.DescribeListenersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeListenersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeListenersPagesWithContextMutex.Unlock()
	if fake.DescribeListenersPagesWithContextStub != nil {
		return fake.DescribeListenersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeListenersPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContextCallCount() int {
	fake.describeListenersPagesWithContextMutex.RLock()
	defer fake.describeListenersPagesWithContextMutex.RUnlock()
	return len(fake.describeListenersPagesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContextCalls(stub func(aws.Context, *elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool, ...request.Option) error) {
	fake.describeListenersPagesWithContextMutex.Lock()
	defer fake.describeListenersPagesWithContextMutex.Unlock()
	fake.DescribeListenersPagesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool, []request.Option) {
	fake.describeListenersPagesWithContextMutex.RLock()
	defer fake.describeListenersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeListenersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContextReturns(result1 error) {
	fake.describeListenersPagesWithContextMutex.Lock()
	defer fake.describeListenersPagesWithContextMutex.Unlock()
	fake.DescribeListenersPagesWithContextStub = nil
	fake.describeListenersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeListenersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeListenersPagesWithContextMutex.Lock()
	defer fake.describeListenersPagesWithContextMutex.Unlock()
	fake.DescribeListenersPagesWithContextStub = nil
	if fake.describeListenersPagesWithContextReturnsOnCall == nil {
		fake.describeListenersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeListenersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeListenersRequest(arg1 *elbv2.DescribeListenersInput) (*request.Request, *elbv2.DescribeListenersOutput) {
	fake.describeListenersRequestMutex.Lock()
	ret, specificReturn := fake.describeListenersRequestReturnsOnCall[len(fake.describeListenersRequestArgsForCall)]
	fake.describeListenersRequestArgsForCall = append(fake.describeListenersRequestArgsForCall, struct {
		arg1 *elbv2.DescribeListenersInput
	}{arg1})
	fake.recordInvocation("DescribeListenersRequest", []interface{}{arg1})
	fake.describeListenersRequestMutex.Unlock()
	if fake.DescribeListenersRequestStub != nil {
		return fake.DescribeListenersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenersRequestCallCount() int {
	fake.describeListenersRequestMutex.RLock()
	defer fake.describeListenersRequestMutex.RUnlock()
	return len(fake.describeListenersRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenersRequestCalls(stub func(*elbv2.DescribeListenersInput) (*request.Request, *elbv2.DescribeListenersOutput)) {
	fake.describeListenersRequestMutex.Lock()
	defer fake.describeListenersRequestMutex.Unlock()
	fake.DescribeListenersRequestStub = stub
}

func (fake *FakeELBV2API) DescribeListenersRequestArgsForCall(i int) *elbv2.DescribeListenersInput {
	fake.describeListenersRequestMutex.RLock()
	defer fake.describeListenersRequestMutex.RUnlock()
	argsForCall := fake.describeListenersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeListenersRequestReturns(result1 *request.Request, result2 *elbv2.DescribeListenersOutput) {
	fake.describeListenersRequestMutex.Lock()
	defer fake.describeListenersRequestMutex.Unlock()
	fake.DescribeListenersRequestStub = nil
	fake.describeListenersRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenersOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeListenersOutput) {
	fake.describeListenersRequestMutex.Lock()
	defer fake.describeListenersRequestMutex.Unlock()
	fake.DescribeListenersRequestStub = nil
	if fake.describeListenersRequestReturnsOnCall == nil {
		fake.describeListenersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeListenersOutput
		})
	}
	fake.describeListenersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeListenersOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenersWithContext(arg1 aws.Context, arg2 *elbv2.DescribeListenersInput, arg3 ...request.Option) (*elbv2.DescribeListenersOutput, error) {
	fake.describeListenersWithContextMutex.Lock()
	ret, specificReturn := fake.describeListenersWithContextReturnsOnCall[len(fake.describeListenersWithContextArgsForCall)]
	fake.describeListenersWithContextArgsForCall = append(fake.describeListenersWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeListenersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeListenersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeListenersWithContextMutex.Unlock()
	if fake.DescribeListenersWithContextStub != nil {
		return fake.DescribeListenersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeListenersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeListenersWithContextCallCount() int {
	fake.describeListenersWithContextMutex.RLock()
	defer fake.describeListenersWithContextMutex.RUnlock()
	return len(fake.describeListenersWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeListenersWithContextCalls(stub func(aws.Context, *elbv2.DescribeListenersInput, ...request.Option) (*elbv2.DescribeListenersOutput, error)) {
	fake.describeListenersWithContextMutex.Lock()
	defer fake.describeListenersWithContextMutex.Unlock()
	fake.DescribeListenersWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeListenersWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeListenersInput, []request.Option) {
	fake.describeListenersWithContextMutex.RLock()
	defer fake.describeListenersWithContextMutex.RUnlock()
	argsForCall := fake.describeListenersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeListenersWithContextReturns(result1 *elbv2.DescribeListenersOutput, result2 error) {
	fake.describeListenersWithContextMutex.Lock()
	defer fake.describeListenersWithContextMutex.Unlock()
	fake.DescribeListenersWithContextStub = nil
	fake.describeListenersWithContextReturns = struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeListenersWithContextReturnsOnCall(i int, result1 *elbv2.DescribeListenersOutput, result2 error) {
	fake.describeListenersWithContextMutex.Lock()
	defer fake.describeListenersWithContextMutex.Unlock()
	fake.DescribeListenersWithContextStub = nil
	if fake.describeListenersWithContextReturnsOnCall == nil {
		fake.describeListenersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeListenersOutput
			result2 error
		})
	}
	fake.describeListenersWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeListenersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributes(arg1 *elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	fake.describeLoadBalancerAttributesMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancerAttributesReturnsOnCall[len(fake.describeLoadBalancerAttributesArgsForCall)]
	fake.describeLoadBalancerAttributesArgsForCall = append(fake.describeLoadBalancerAttributesArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancerAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeLoadBalancerAttributes", []interface{}{arg1})
	fake.describeLoadBalancerAttributesMutex.Unlock()
	if fake.DescribeLoadBalancerAttributesStub != nil {
		return fake.DescribeLoadBalancerAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancerAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesCallCount() int {
	fake.describeLoadBalancerAttributesMutex.RLock()
	defer fake.describeLoadBalancerAttributesMutex.RUnlock()
	return len(fake.describeLoadBalancerAttributesArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesCalls(stub func(*elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error)) {
	fake.describeLoadBalancerAttributesMutex.Lock()
	defer fake.describeLoadBalancerAttributesMutex.Unlock()
	fake.DescribeLoadBalancerAttributesStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesArgsForCall(i int) *elbv2.DescribeLoadBalancerAttributesInput {
	fake.describeLoadBalancerAttributesMutex.RLock()
	defer fake.describeLoadBalancerAttributesMutex.RUnlock()
	argsForCall := fake.describeLoadBalancerAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesReturns(result1 *elbv2.DescribeLoadBalancerAttributesOutput, result2 error) {
	fake.describeLoadBalancerAttributesMutex.Lock()
	defer fake.describeLoadBalancerAttributesMutex.Unlock()
	fake.DescribeLoadBalancerAttributesStub = nil
	fake.describeLoadBalancerAttributesReturns = struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesReturnsOnCall(i int, result1 *elbv2.DescribeLoadBalancerAttributesOutput, result2 error) {
	fake.describeLoadBalancerAttributesMutex.Lock()
	defer fake.describeLoadBalancerAttributesMutex.Unlock()
	fake.DescribeLoadBalancerAttributesStub = nil
	if fake.describeLoadBalancerAttributesReturnsOnCall == nil {
		fake.describeLoadBalancerAttributesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeLoadBalancerAttributesOutput
			result2 error
		})
	}
	fake.describeLoadBalancerAttributesReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequest(arg1 *elbv2.DescribeLoadBalancerAttributesInput) (*request.Request, *elbv2.DescribeLoadBalancerAttributesOutput) {
	fake.describeLoadBalancerAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancerAttributesRequestReturnsOnCall[len(fake.describeLoadBalancerAttributesRequestArgsForCall)]
	fake.describeLoadBalancerAttributesRequestArgsForCall = append(fake.describeLoadBalancerAttributesRequestArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancerAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeLoadBalancerAttributesRequest", []interface{}{arg1})
	fake.describeLoadBalancerAttributesRequestMutex.Unlock()
	if fake.DescribeLoadBalancerAttributesRequestStub != nil {
		return fake.DescribeLoadBalancerAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancerAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequestCallCount() int {
	fake.describeLoadBalancerAttributesRequestMutex.RLock()
	defer fake.describeLoadBalancerAttributesRequestMutex.RUnlock()
	return len(fake.describeLoadBalancerAttributesRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequestCalls(stub func(*elbv2.DescribeLoadBalancerAttributesInput) (*request.Request, *elbv2.DescribeLoadBalancerAttributesOutput)) {
	fake.describeLoadBalancerAttributesRequestMutex.Lock()
	defer fake.describeLoadBalancerAttributesRequestMutex.Unlock()
	fake.DescribeLoadBalancerAttributesRequestStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequestArgsForCall(i int) *elbv2.DescribeLoadBalancerAttributesInput {
	fake.describeLoadBalancerAttributesRequestMutex.RLock()
	defer fake.describeLoadBalancerAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeLoadBalancerAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequestReturns(result1 *request.Request, result2 *elbv2.DescribeLoadBalancerAttributesOutput) {
	fake.describeLoadBalancerAttributesRequestMutex.Lock()
	defer fake.describeLoadBalancerAttributesRequestMutex.Unlock()
	fake.DescribeLoadBalancerAttributesRequestStub = nil
	fake.describeLoadBalancerAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancerAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeLoadBalancerAttributesOutput) {
	fake.describeLoadBalancerAttributesRequestMutex.Lock()
	defer fake.describeLoadBalancerAttributesRequestMutex.Unlock()
	fake.DescribeLoadBalancerAttributesRequestStub = nil
	if fake.describeLoadBalancerAttributesRequestReturnsOnCall == nil {
		fake.describeLoadBalancerAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeLoadBalancerAttributesOutput
		})
	}
	fake.describeLoadBalancerAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancerAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancerAttributesInput, arg3 ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	fake.describeLoadBalancerAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancerAttributesWithContextReturnsOnCall[len(fake.describeLoadBalancerAttributesWithContextArgsForCall)]
	fake.describeLoadBalancerAttributesWithContextArgsForCall = append(fake.describeLoadBalancerAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancerAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeLoadBalancerAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeLoadBalancerAttributesWithContextMutex.Unlock()
	if fake.DescribeLoadBalancerAttributesWithContextStub != nil {
		return fake.DescribeLoadBalancerAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancerAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContextCallCount() int {
	fake.describeLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.RUnlock()
	return len(fake.describeLoadBalancerAttributesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancerAttributesInput, ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error)) {
	fake.describeLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.Unlock()
	fake.DescribeLoadBalancerAttributesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancerAttributesInput, []request.Option) {
	fake.describeLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeLoadBalancerAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContextReturns(result1 *elbv2.DescribeLoadBalancerAttributesOutput, result2 error) {
	fake.describeLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.Unlock()
	fake.DescribeLoadBalancerAttributesWithContextStub = nil
	fake.describeLoadBalancerAttributesWithContextReturns = struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancerAttributesWithContextReturnsOnCall(i int, result1 *elbv2.DescribeLoadBalancerAttributesOutput, result2 error) {
	fake.describeLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.Unlock()
	fake.DescribeLoadBalancerAttributesWithContextStub = nil
	if fake.describeLoadBalancerAttributesWithContextReturnsOnCall == nil {
		fake.describeLoadBalancerAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeLoadBalancerAttributesOutput
			result2 error
		})
	}
	fake.describeLoadBalancerAttributesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancers(arg1 *elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error) {
	fake.describeLoadBalancersMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancersReturnsOnCall[len(fake.describeLoadBalancersArgsForCall)]
	fake.describeLoadBalancersArgsForCall = append(fake.describeLoadBalancersArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}{arg1})
	fake.recordInvocation("DescribeLoadBalancers", []interface{}{arg1})
	fake.describeLoadBalancersMutex.Unlock()
	if fake.DescribeLoadBalancersStub != nil {
		return fake.DescribeLoadBalancersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancersCallCount() int {
	fake.describeLoadBalancersMutex.RLock()
	defer fake.describeLoadBalancersMutex.RUnlock()
	return len(fake.describeLoadBalancersArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancersCalls(stub func(*elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error)) {
	fake.describeLoadBalancersMutex.Lock()
	defer fake.describeLoadBalancersMutex.Unlock()
	fake.DescribeLoadBalancersStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancersArgsForCall(i int) *elbv2.DescribeLoadBalancersInput {
	fake.describeLoadBalancersMutex.RLock()
	defer fake.describeLoadBalancersMutex.RUnlock()
	argsForCall := fake.describeLoadBalancersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeLoadBalancersReturns(result1 *elbv2.DescribeLoadBalancersOutput, result2 error) {
	fake.describeLoadBalancersMutex.Lock()
	defer fake.describeLoadBalancersMutex.Unlock()
	fake.DescribeLoadBalancersStub = nil
	fake.describeLoadBalancersReturns = struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancersReturnsOnCall(i int, result1 *elbv2.DescribeLoadBalancersOutput, result2 error) {
	fake.describeLoadBalancersMutex.Lock()
	defer fake.describeLoadBalancersMutex.Unlock()
	fake.DescribeLoadBalancersStub = nil
	if fake.describeLoadBalancersReturnsOnCall == nil {
		fake.describeLoadBalancersReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeLoadBalancersOutput
			result2 error
		})
	}
	fake.describeLoadBalancersReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancersPages(arg1 *elbv2.DescribeLoadBalancersInput, arg2 func(*elbv2.DescribeLoadBalancersOutput, bool) bool) error {
	fake.describeLoadBalancersPagesMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancersPagesReturnsOnCall[len(fake.describeLoadBalancersPagesArgsForCall)]
	fake.describeLoadBalancersPagesArgsForCall = append(fake.describeLoadBalancersPagesArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
		arg2 func(*elbv2.DescribeLoadBalancersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeLoadBalancersPages", []interface{}{arg1, arg2})
	fake.describeLoadBalancersPagesMutex.Unlock()
	if fake.DescribeLoadBalancersPagesStub != nil {
		return fake.DescribeLoadBalancersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeLoadBalancersPagesReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesCallCount() int {
	fake.describeLoadBalancersPagesMutex.RLock()
	defer fake.describeLoadBalancersPagesMutex.RUnlock()
	return len(fake.describeLoadBalancersPagesArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesCalls(stub func(*elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool) error) {
	fake.describeLoadBalancersPagesMutex.Lock()
	defer fake.describeLoadBalancersPagesMutex.Unlock()
	fake.DescribeLoadBalancersPagesStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesArgsForCall(i int) (*elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool) {
	fake.describeLoadBalancersPagesMutex.RLock()
	defer fake.describeLoadBalancersPagesMutex.RUnlock()
	argsForCall := fake.describeLoadBalancersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesReturns(result1 error) {
	fake.describeLoadBalancersPagesMutex.Lock()
	defer fake.describeLoadBalancersPagesMutex.Unlock()
	fake.DescribeLoadBalancersPagesStub = nil
	fake.describeLoadBalancersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesReturnsOnCall(i int, result1 error) {
	fake.describeLoadBalancersPagesMutex.Lock()
	defer fake.describeLoadBalancersPagesMutex.Unlock()
	fake.DescribeLoadBalancersPagesStub = nil
	if fake.describeLoadBalancersPagesReturnsOnCall == nil {
		fake.describeLoadBalancersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeLoadBalancersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancersInput, arg3 func(*elbv2.DescribeLoadBalancersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeLoadBalancersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancersPagesWithContextReturnsOnCall[len(fake.describeLoadBalancersPagesWithContextArgsForCall)]
	fake.describeLoadBalancersPagesWithContextArgsForCall = append(fake.describeLoadBalancersPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 func(*elbv2.DescribeLoadBalancersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeLoadBalancersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeLoadBalancersPagesWithContextMutex.Unlock()
	if fake.DescribeLoadBalancersPagesWithContextStub != nil {
		return fake.DescribeLoadBalancersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeLoadBalancersPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContextCallCount() int {
	fake.describeLoadBalancersPagesWithContextMutex.RLock()
	defer fake.describeLoadBalancersPagesWithContextMutex.RUnlock()
	return len(fake.describeLoadBalancersPagesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool, ...request.Option) error) {
	fake.describeLoadBalancersPagesWithContextMutex.Lock()
	defer fake.describeLoadBalancersPagesWithContextMutex.Unlock()
	fake.DescribeLoadBalancersPagesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool, []request.Option) {
	fake.describeLoadBalancersPagesWithContextMutex.RLock()
	defer fake.describeLoadBalancersPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeLoadBalancersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContextReturns(result1 error) {
	fake.describeLoadBalancersPagesWithContextMutex.Lock()
	defer fake.describeLoadBalancersPagesWithContextMutex.Unlock()
	fake.DescribeLoadBalancersPagesWithContextStub = nil
	fake.describeLoadBalancersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeLoadBalancersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeLoadBalancersPagesWithContextMutex.Lock()
	defer fake.describeLoadBalancersPagesWithContextMutex.Unlock()
	fake.DescribeLoadBalancersPagesWithContextStub = nil
	if fake.describeLoadBalancersPagesWithContextReturnsOnCall == nil {
		fake.describeLoadBalancersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeLoadBalancersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequest(arg1 *elbv2.DescribeLoadBalancersInput) (*request.Request, *elbv2.DescribeLoadBalancersOutput) {
	fake.describeLoadBalancersRequestMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancersRequestReturnsOnCall[len(fake.describeLoadBalancersRequestArgsForCall)]
	fake.describeLoadBalancersRequestArgsForCall = append(fake.describeLoadBalancersRequestArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}{arg1})
	fake.recordInvocation("DescribeLoadBalancersRequest", []interface{}{arg1})
	fake.describeLoadBalancersRequestMutex.Unlock()
	if fake.DescribeLoadBalancersRequestStub != nil {
		return fake.DescribeLoadBalancersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequestCallCount() int {
	fake.describeLoadBalancersRequestMutex.RLock()
	defer fake.describeLoadBalancersRequestMutex.RUnlock()
	return len(fake.describeLoadBalancersRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequestCalls(stub func(*elbv2.DescribeLoadBalancersInput) (*request.Request, *elbv2.DescribeLoadBalancersOutput)) {
	fake.describeLoadBalancersRequestMutex.Lock()
	defer fake.describeLoadBalancersRequestMutex.Unlock()
	fake.DescribeLoadBalancersRequestStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequestArgsForCall(i int) *elbv2.DescribeLoadBalancersInput {
	fake.describeLoadBalancersRequestMutex.RLock()
	defer fake.describeLoadBalancersRequestMutex.RUnlock()
	argsForCall := fake.describeLoadBalancersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequestReturns(result1 *request.Request, result2 *elbv2.DescribeLoadBalancersOutput) {
	fake.describeLoadBalancersRequestMutex.Lock()
	defer fake.describeLoadBalancersRequestMutex.Unlock()
	fake.DescribeLoadBalancersRequestStub = nil
	fake.describeLoadBalancersRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancersOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeLoadBalancersOutput) {
	fake.describeLoadBalancersRequestMutex.Lock()
	defer fake.describeLoadBalancersRequestMutex.Unlock()
	fake.DescribeLoadBalancersRequestStub = nil
	if fake.describeLoadBalancersRequestReturnsOnCall == nil {
		fake.describeLoadBalancersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeLoadBalancersOutput
		})
	}
	fake.describeLoadBalancersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeLoadBalancersOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancersInput, arg3 ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error) {
	fake.describeLoadBalancersWithContextMutex.Lock()
	ret, specificReturn := fake.describeLoadBalancersWithContextReturnsOnCall[len(fake.describeLoadBalancersWithContextArgsForCall)]
	fake.describeLoadBalancersWithContextArgsForCall = append(fake.describeLoadBalancersWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeLoadBalancersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeLoadBalancersWithContextMutex.Unlock()
	if fake.DescribeLoadBalancersWithContextStub != nil {
		return fake.DescribeLoadBalancersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLoadBalancersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContextCallCount() int {
	fake.describeLoadBalancersWithContextMutex.RLock()
	defer fake.describeLoadBalancersWithContextMutex.RUnlock()
	return len(fake.describeLoadBalancersWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error)) {
	fake.describeLoadBalancersWithContextMutex.Lock()
	defer fake.describeLoadBalancersWithContextMutex.Unlock()
	fake.DescribeLoadBalancersWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancersInput, []request.Option) {
	fake.describeLoadBalancersWithContextMutex.RLock()
	defer fake.describeLoadBalancersWithContextMutex.RUnlock()
	argsForCall := fake.describeLoadBalancersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContextReturns(result1 *elbv2.DescribeLoadBalancersOutput, result2 error) {
	fake.describeLoadBalancersWithContextMutex.Lock()
	defer fake.describeLoadBalancersWithContextMutex.Unlock()
	fake.DescribeLoadBalancersWithContextStub = nil
	fake.describeLoadBalancersWithContextReturns = struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeLoadBalancersWithContextReturnsOnCall(i int, result1 *elbv2.DescribeLoadBalancersOutput, result2 error) {
	fake.describeLoadBalancersWithContextMutex.Lock()
	defer fake.describeLoadBalancersWithContextMutex.Unlock()
	fake.DescribeLoadBalancersWithContextStub = nil
	if fake.describeLoadBalancersWithContextReturnsOnCall == nil {
		fake.describeLoadBalancersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeLoadBalancersOutput
			result2 error
		})
	}
	fake.describeLoadBalancersWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeLoadBalancersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRules(arg1 *elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error) {
	fake.describeRulesMutex.Lock()
	ret, specificReturn := fake.describeRulesReturnsOnCall[len(fake.describeRulesArgsForCall)]
	fake.describeRulesArgsForCall = append(fake.describeRulesArgsForCall, struct {
		arg1 *elbv2.DescribeRulesInput
	}{arg1})
	fake.recordInvocation("DescribeRules", []interface{}{arg1})
	fake.describeRulesMutex.Unlock()
	if fake.DescribeRulesStub != nil {
		return fake.DescribeRulesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRulesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeRulesCallCount() int {
	fake.describeRulesMutex.RLock()
	defer fake.describeRulesMutex.RUnlock()
	return len(fake.describeRulesArgsForCall)
}

func (fake *FakeELBV2API) DescribeRulesCalls(stub func(*elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error)) {
	fake.describeRulesMutex.Lock()
	defer fake.describeRulesMutex.Unlock()
	fake.DescribeRulesStub = stub
}

func (fake *FakeELBV2API) DescribeRulesArgsForCall(i int) *elbv2.DescribeRulesInput {
	fake.describeRulesMutex.RLock()
	defer fake.describeRulesMutex.RUnlock()
	argsForCall := fake.describeRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeRulesReturns(result1 *elbv2.DescribeRulesOutput, result2 error) {
	fake.describeRulesMutex.Lock()
	defer fake.describeRulesMutex.Unlock()
	fake.DescribeRulesStub = nil
	fake.describeRulesReturns = struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRulesReturnsOnCall(i int, result1 *elbv2.DescribeRulesOutput, result2 error) {
	fake.describeRulesMutex.Lock()
	defer fake.describeRulesMutex.Unlock()
	fake.DescribeRulesStub = nil
	if fake.describeRulesReturnsOnCall == nil {
		fake.describeRulesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeRulesOutput
			result2 error
		})
	}
	fake.describeRulesReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRulesRequest(arg1 *elbv2.DescribeRulesInput) (*request.Request, *elbv2.DescribeRulesOutput) {
	fake.describeRulesRequestMutex.Lock()
	ret, specificReturn := fake.describeRulesRequestReturnsOnCall[len(fake.describeRulesRequestArgsForCall)]
	fake.describeRulesRequestArgsForCall = append(fake.describeRulesRequestArgsForCall, struct {
		arg1 *elbv2.DescribeRulesInput
	}{arg1})
	fake.recordInvocation("DescribeRulesRequest", []interface{}{arg1})
	fake.describeRulesRequestMutex.Unlock()
	if fake.DescribeRulesRequestStub != nil {
		return fake.DescribeRulesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRulesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeRulesRequestCallCount() int {
	fake.describeRulesRequestMutex.RLock()
	defer fake.describeRulesRequestMutex.RUnlock()
	return len(fake.describeRulesRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeRulesRequestCalls(stub func(*elbv2.DescribeRulesInput) (*request.Request, *elbv2.DescribeRulesOutput)) {
	fake.describeRulesRequestMutex.Lock()
	defer fake.describeRulesRequestMutex.Unlock()
	fake.DescribeRulesRequestStub = stub
}

func (fake *FakeELBV2API) DescribeRulesRequestArgsForCall(i int) *elbv2.DescribeRulesInput {
	fake.describeRulesRequestMutex.RLock()
	defer fake.describeRulesRequestMutex.RUnlock()
	argsForCall := fake.describeRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeRulesRequestReturns(result1 *request.Request, result2 *elbv2.DescribeRulesOutput) {
	fake.describeRulesRequestMutex.Lock()
	defer fake.describeRulesRequestMutex.Unlock()
	fake.DescribeRulesRequestStub = nil
	fake.describeRulesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeRulesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeRulesOutput) {
	fake.describeRulesRequestMutex.Lock()
	defer fake.describeRulesRequestMutex.Unlock()
	fake.DescribeRulesRequestStub = nil
	if fake.describeRulesRequestReturnsOnCall == nil {
		fake.describeRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeRulesOutput
		})
	}
	fake.describeRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeRulesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRulesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeRulesInput, arg3 ...request.Option) (*elbv2.DescribeRulesOutput, error) {
	fake.describeRulesWithContextMutex.Lock()
	ret, specificReturn := fake.describeRulesWithContextReturnsOnCall[len(fake.describeRulesWithContextArgsForCall)]
	fake.describeRulesWithContextArgsForCall = append(fake.describeRulesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeRulesWithContextMutex.Unlock()
	if fake.DescribeRulesWithContextStub != nil {
		return fake.DescribeRulesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRulesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeRulesWithContextCallCount() int {
	fake.describeRulesWithContextMutex.RLock()
	defer fake.describeRulesWithContextMutex.RUnlock()
	return len(fake.describeRulesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeRulesWithContextCalls(stub func(aws.Context, *elbv2.DescribeRulesInput, ...request.Option) (*elbv2.DescribeRulesOutput, error)) {
	fake.describeRulesWithContextMutex.Lock()
	defer fake.describeRulesWithContextMutex.Unlock()
	fake.DescribeRulesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeRulesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeRulesInput, []request.Option) {
	fake.describeRulesWithContextMutex.RLock()
	defer fake.describeRulesWithContextMutex.RUnlock()
	argsForCall := fake.describeRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeRulesWithContextReturns(result1 *elbv2.DescribeRulesOutput, result2 error) {
	fake.describeRulesWithContextMutex.Lock()
	defer fake.describeRulesWithContextMutex.Unlock()
	fake.DescribeRulesWithContextStub = nil
	fake.describeRulesWithContextReturns = struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeRulesWithContextReturnsOnCall(i int, result1 *elbv2.DescribeRulesOutput, result2 error) {
	fake.describeRulesWithContextMutex.Lock()
	defer fake.describeRulesWithContextMutex.Unlock()
	fake.DescribeRulesWithContextStub = nil
	if fake.describeRulesWithContextReturnsOnCall == nil {
		fake.describeRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeRulesOutput
			result2 error
		})
	}
	fake.describeRulesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPolicies(arg1 *elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error) {
	fake.describeSSLPoliciesMutex.Lock()
	ret, specificReturn := fake.describeSSLPoliciesReturnsOnCall[len(fake.describeSSLPoliciesArgsForCall)]
	fake.describeSSLPoliciesArgsForCall = append(fake.describeSSLPoliciesArgsForCall, struct {
		arg1 *elbv2.DescribeSSLPoliciesInput
	}{arg1})
	fake.recordInvocation("DescribeSSLPolicies", []interface{}{arg1})
	fake.describeSSLPoliciesMutex.Unlock()
	if fake.DescribeSSLPoliciesStub != nil {
		return fake.DescribeSSLPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSSLPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeSSLPoliciesCallCount() int {
	fake.describeSSLPoliciesMutex.RLock()
	defer fake.describeSSLPoliciesMutex.RUnlock()
	return len(fake.describeSSLPoliciesArgsForCall)
}

func (fake *FakeELBV2API) DescribeSSLPoliciesCalls(stub func(*elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error)) {
	fake.describeSSLPoliciesMutex.Lock()
	defer fake.describeSSLPoliciesMutex.Unlock()
	fake.DescribeSSLPoliciesStub = stub
}

func (fake *FakeELBV2API) DescribeSSLPoliciesArgsForCall(i int) *elbv2.DescribeSSLPoliciesInput {
	fake.describeSSLPoliciesMutex.RLock()
	defer fake.describeSSLPoliciesMutex.RUnlock()
	argsForCall := fake.describeSSLPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeSSLPoliciesReturns(result1 *elbv2.DescribeSSLPoliciesOutput, result2 error) {
	fake.describeSSLPoliciesMutex.Lock()
	defer fake.describeSSLPoliciesMutex.Unlock()
	fake.DescribeSSLPoliciesStub = nil
	fake.describeSSLPoliciesReturns = struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPoliciesReturnsOnCall(i int, result1 *elbv2.DescribeSSLPoliciesOutput, result2 error) {
	fake.describeSSLPoliciesMutex.Lock()
	defer fake.describeSSLPoliciesMutex.Unlock()
	fake.DescribeSSLPoliciesStub = nil
	if fake.describeSSLPoliciesReturnsOnCall == nil {
		fake.describeSSLPoliciesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeSSLPoliciesOutput
			result2 error
		})
	}
	fake.describeSSLPoliciesReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequest(arg1 *elbv2.DescribeSSLPoliciesInput) (*request.Request, *elbv2.DescribeSSLPoliciesOutput) {
	fake.describeSSLPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.describeSSLPoliciesRequestReturnsOnCall[len(fake.describeSSLPoliciesRequestArgsForCall)]
	fake.describeSSLPoliciesRequestArgsForCall = append(fake.describeSSLPoliciesRequestArgsForCall, struct {
		arg1 *elbv2.DescribeSSLPoliciesInput
	}{arg1})
	fake.recordInvocation("DescribeSSLPoliciesRequest", []interface{}{arg1})
	fake.describeSSLPoliciesRequestMutex.Unlock()
	if fake.DescribeSSLPoliciesRequestStub != nil {
		return fake.DescribeSSLPoliciesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSSLPoliciesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequestCallCount() int {
	fake.describeSSLPoliciesRequestMutex.RLock()
	defer fake.describeSSLPoliciesRequestMutex.RUnlock()
	return len(fake.describeSSLPoliciesRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequestCalls(stub func(*elbv2.DescribeSSLPoliciesInput) (*request.Request, *elbv2.DescribeSSLPoliciesOutput)) {
	fake.describeSSLPoliciesRequestMutex.Lock()
	defer fake.describeSSLPoliciesRequestMutex.Unlock()
	fake.DescribeSSLPoliciesRequestStub = stub
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequestArgsForCall(i int) *elbv2.DescribeSSLPoliciesInput {
	fake.describeSSLPoliciesRequestMutex.RLock()
	defer fake.describeSSLPoliciesRequestMutex.RUnlock()
	argsForCall := fake.describeSSLPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequestReturns(result1 *request.Request, result2 *elbv2.DescribeSSLPoliciesOutput) {
	fake.describeSSLPoliciesRequestMutex.Lock()
	defer fake.describeSSLPoliciesRequestMutex.Unlock()
	fake.DescribeSSLPoliciesRequestStub = nil
	fake.describeSSLPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeSSLPoliciesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeSSLPoliciesOutput) {
	fake.describeSSLPoliciesRequestMutex.Lock()
	defer fake.describeSSLPoliciesRequestMutex.Unlock()
	fake.DescribeSSLPoliciesRequestStub = nil
	if fake.describeSSLPoliciesRequestReturnsOnCall == nil {
		fake.describeSSLPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeSSLPoliciesOutput
		})
	}
	fake.describeSSLPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeSSLPoliciesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeSSLPoliciesInput, arg3 ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error) {
	fake.describeSSLPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSSLPoliciesWithContextReturnsOnCall[len(fake.describeSSLPoliciesWithContextArgsForCall)]
	fake.describeSSLPoliciesWithContextArgsForCall = append(fake.describeSSLPoliciesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeSSLPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSSLPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSSLPoliciesWithContextMutex.Unlock()
	if fake.DescribeSSLPoliciesWithContextStub != nil {
		return fake.DescribeSSLPoliciesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSSLPoliciesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContextCallCount() int {
	fake.describeSSLPoliciesWithContextMutex.RLock()
	defer fake.describeSSLPoliciesWithContextMutex.RUnlock()
	return len(fake.describeSSLPoliciesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContextCalls(stub func(aws.Context, *elbv2.DescribeSSLPoliciesInput, ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error)) {
	fake.describeSSLPoliciesWithContextMutex.Lock()
	defer fake.describeSSLPoliciesWithContextMutex.Unlock()
	fake.DescribeSSLPoliciesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeSSLPoliciesInput, []request.Option) {
	fake.describeSSLPoliciesWithContextMutex.RLock()
	defer fake.describeSSLPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.describeSSLPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContextReturns(result1 *elbv2.DescribeSSLPoliciesOutput, result2 error) {
	fake.describeSSLPoliciesWithContextMutex.Lock()
	defer fake.describeSSLPoliciesWithContextMutex.Unlock()
	fake.DescribeSSLPoliciesWithContextStub = nil
	fake.describeSSLPoliciesWithContextReturns = struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeSSLPoliciesWithContextReturnsOnCall(i int, result1 *elbv2.DescribeSSLPoliciesOutput, result2 error) {
	fake.describeSSLPoliciesWithContextMutex.Lock()
	defer fake.describeSSLPoliciesWithContextMutex.Unlock()
	fake.DescribeSSLPoliciesWithContextStub = nil
	if fake.describeSSLPoliciesWithContextReturnsOnCall == nil {
		fake.describeSSLPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeSSLPoliciesOutput
			result2 error
		})
	}
	fake.describeSSLPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeSSLPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTags(arg1 *elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error) {
	fake.describeTagsMutex.Lock()
	ret, specificReturn := fake.describeTagsReturnsOnCall[len(fake.describeTagsArgsForCall)]
	fake.describeTagsArgsForCall = append(fake.describeTagsArgsForCall, struct {
		arg1 *elbv2.DescribeTagsInput
	}{arg1})
	fake.recordInvocation("DescribeTags", []interface{}{arg1})
	fake.describeTagsMutex.Unlock()
	if fake.DescribeTagsStub != nil {
		return fake.DescribeTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTagsCallCount() int {
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	return len(fake.describeTagsArgsForCall)
}

func (fake *FakeELBV2API) DescribeTagsCalls(stub func(*elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error)) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = stub
}

func (fake *FakeELBV2API) DescribeTagsArgsForCall(i int) *elbv2.DescribeTagsInput {
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	argsForCall := fake.describeTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTagsReturns(result1 *elbv2.DescribeTagsOutput, result2 error) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = nil
	fake.describeTagsReturns = struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTagsReturnsOnCall(i int, result1 *elbv2.DescribeTagsOutput, result2 error) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = nil
	if fake.describeTagsReturnsOnCall == nil {
		fake.describeTagsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTagsOutput
			result2 error
		})
	}
	fake.describeTagsReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTagsRequest(arg1 *elbv2.DescribeTagsInput) (*request.Request, *elbv2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	ret, specificReturn := fake.describeTagsRequestReturnsOnCall[len(fake.describeTagsRequestArgsForCall)]
	fake.describeTagsRequestArgsForCall = append(fake.describeTagsRequestArgsForCall, struct {
		arg1 *elbv2.DescribeTagsInput
	}{arg1})
	fake.recordInvocation("DescribeTagsRequest", []interface{}{arg1})
	fake.describeTagsRequestMutex.Unlock()
	if fake.DescribeTagsRequestStub != nil {
		return fake.DescribeTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTagsRequestCallCount() int {
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	return len(fake.describeTagsRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeTagsRequestCalls(stub func(*elbv2.DescribeTagsInput) (*request.Request, *elbv2.DescribeTagsOutput)) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = stub
}

func (fake *FakeELBV2API) DescribeTagsRequestArgsForCall(i int) *elbv2.DescribeTagsInput {
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	argsForCall := fake.describeTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTagsRequestReturns(result1 *request.Request, result2 *elbv2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = nil
	fake.describeTagsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = nil
	if fake.describeTagsRequestReturnsOnCall == nil {
		fake.describeTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeTagsOutput
		})
	}
	fake.describeTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTagsWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTagsInput, arg3 ...request.Option) (*elbv2.DescribeTagsOutput, error) {
	fake.describeTagsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTagsWithContextReturnsOnCall[len(fake.describeTagsWithContextArgsForCall)]
	fake.describeTagsWithContextArgsForCall = append(fake.describeTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTagsWithContextMutex.Unlock()
	if fake.DescribeTagsWithContextStub != nil {
		return fake.DescribeTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTagsWithContextCallCount() int {
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	return len(fake.describeTagsWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeTagsWithContextCalls(stub func(aws.Context, *elbv2.DescribeTagsInput, ...request.Option) (*elbv2.DescribeTagsOutput, error)) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeTagsWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTagsInput, []request.Option) {
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	argsForCall := fake.describeTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeTagsWithContextReturns(result1 *elbv2.DescribeTagsOutput, result2 error) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = nil
	fake.describeTagsWithContextReturns = struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTagsWithContextReturnsOnCall(i int, result1 *elbv2.DescribeTagsOutput, result2 error) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = nil
	if fake.describeTagsWithContextReturnsOnCall == nil {
		fake.describeTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTagsOutput
			result2 error
		})
	}
	fake.describeTagsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributes(arg1 *elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	fake.describeTargetGroupAttributesMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupAttributesReturnsOnCall[len(fake.describeTargetGroupAttributesArgsForCall)]
	fake.describeTargetGroupAttributesArgsForCall = append(fake.describeTargetGroupAttributesArgsForCall, struct {
		arg1 *elbv2.DescribeTargetGroupAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeTargetGroupAttributes", []interface{}{arg1})
	fake.describeTargetGroupAttributesMutex.Unlock()
	if fake.DescribeTargetGroupAttributesStub != nil {
		return fake.DescribeTargetGroupAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesCallCount() int {
	fake.describeTargetGroupAttributesMutex.RLock()
	defer fake.describeTargetGroupAttributesMutex.RUnlock()
	return len(fake.describeTargetGroupAttributesArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesCalls(stub func(*elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error)) {
	fake.describeTargetGroupAttributesMutex.Lock()
	defer fake.describeTargetGroupAttributesMutex.Unlock()
	fake.DescribeTargetGroupAttributesStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesArgsForCall(i int) *elbv2.DescribeTargetGroupAttributesInput {
	fake.describeTargetGroupAttributesMutex.RLock()
	defer fake.describeTargetGroupAttributesMutex.RUnlock()
	argsForCall := fake.describeTargetGroupAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesReturns(result1 *elbv2.DescribeTargetGroupAttributesOutput, result2 error) {
	fake.describeTargetGroupAttributesMutex.Lock()
	defer fake.describeTargetGroupAttributesMutex.Unlock()
	fake.DescribeTargetGroupAttributesStub = nil
	fake.describeTargetGroupAttributesReturns = struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesReturnsOnCall(i int, result1 *elbv2.DescribeTargetGroupAttributesOutput, result2 error) {
	fake.describeTargetGroupAttributesMutex.Lock()
	defer fake.describeTargetGroupAttributesMutex.Unlock()
	fake.DescribeTargetGroupAttributesStub = nil
	if fake.describeTargetGroupAttributesReturnsOnCall == nil {
		fake.describeTargetGroupAttributesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetGroupAttributesOutput
			result2 error
		})
	}
	fake.describeTargetGroupAttributesReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequest(arg1 *elbv2.DescribeTargetGroupAttributesInput) (*request.Request, *elbv2.DescribeTargetGroupAttributesOutput) {
	fake.describeTargetGroupAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupAttributesRequestReturnsOnCall[len(fake.describeTargetGroupAttributesRequestArgsForCall)]
	fake.describeTargetGroupAttributesRequestArgsForCall = append(fake.describeTargetGroupAttributesRequestArgsForCall, struct {
		arg1 *elbv2.DescribeTargetGroupAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeTargetGroupAttributesRequest", []interface{}{arg1})
	fake.describeTargetGroupAttributesRequestMutex.Unlock()
	if fake.DescribeTargetGroupAttributesRequestStub != nil {
		return fake.DescribeTargetGroupAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequestCallCount() int {
	fake.describeTargetGroupAttributesRequestMutex.RLock()
	defer fake.describeTargetGroupAttributesRequestMutex.RUnlock()
	return len(fake.describeTargetGroupAttributesRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequestCalls(stub func(*elbv2.DescribeTargetGroupAttributesInput) (*request.Request, *elbv2.DescribeTargetGroupAttributesOutput)) {
	fake.describeTargetGroupAttributesRequestMutex.Lock()
	defer fake.describeTargetGroupAttributesRequestMutex.Unlock()
	fake.DescribeTargetGroupAttributesRequestStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequestArgsForCall(i int) *elbv2.DescribeTargetGroupAttributesInput {
	fake.describeTargetGroupAttributesRequestMutex.RLock()
	defer fake.describeTargetGroupAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeTargetGroupAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequestReturns(result1 *request.Request, result2 *elbv2.DescribeTargetGroupAttributesOutput) {
	fake.describeTargetGroupAttributesRequestMutex.Lock()
	defer fake.describeTargetGroupAttributesRequestMutex.Unlock()
	fake.DescribeTargetGroupAttributesRequestStub = nil
	fake.describeTargetGroupAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeTargetGroupAttributesOutput) {
	fake.describeTargetGroupAttributesRequestMutex.Lock()
	defer fake.describeTargetGroupAttributesRequestMutex.Unlock()
	fake.DescribeTargetGroupAttributesRequestStub = nil
	if fake.describeTargetGroupAttributesRequestReturnsOnCall == nil {
		fake.describeTargetGroupAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeTargetGroupAttributesOutput
		})
	}
	fake.describeTargetGroupAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetGroupAttributesInput, arg3 ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	fake.describeTargetGroupAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupAttributesWithContextReturnsOnCall[len(fake.describeTargetGroupAttributesWithContextArgsForCall)]
	fake.describeTargetGroupAttributesWithContextArgsForCall = append(fake.describeTargetGroupAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTargetGroupAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTargetGroupAttributesWithContextMutex.Unlock()
	if fake.DescribeTargetGroupAttributesWithContextStub != nil {
		return fake.DescribeTargetGroupAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContextCallCount() int {
	fake.describeTargetGroupAttributesWithContextMutex.RLock()
	defer fake.describeTargetGroupAttributesWithContextMutex.RUnlock()
	return len(fake.describeTargetGroupAttributesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetGroupAttributesInput, ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error)) {
	fake.describeTargetGroupAttributesWithContextMutex.Lock()
	defer fake.describeTargetGroupAttributesWithContextMutex.Unlock()
	fake.DescribeTargetGroupAttributesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetGroupAttributesInput, []request.Option) {
	fake.describeTargetGroupAttributesWithContextMutex.RLock()
	defer fake.describeTargetGroupAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeTargetGroupAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContextReturns(result1 *elbv2.DescribeTargetGroupAttributesOutput, result2 error) {
	fake.describeTargetGroupAttributesWithContextMutex.Lock()
	defer fake.describeTargetGroupAttributesWithContextMutex.Unlock()
	fake.DescribeTargetGroupAttributesWithContextStub = nil
	fake.describeTargetGroupAttributesWithContextReturns = struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupAttributesWithContextReturnsOnCall(i int, result1 *elbv2.DescribeTargetGroupAttributesOutput, result2 error) {
	fake.describeTargetGroupAttributesWithContextMutex.Lock()
	defer fake.describeTargetGroupAttributesWithContextMutex.Unlock()
	fake.DescribeTargetGroupAttributesWithContextStub = nil
	if fake.describeTargetGroupAttributesWithContextReturnsOnCall == nil {
		fake.describeTargetGroupAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetGroupAttributesOutput
			result2 error
		})
	}
	fake.describeTargetGroupAttributesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroups(arg1 *elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error) {
	fake.describeTargetGroupsMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupsReturnsOnCall[len(fake.describeTargetGroupsArgsForCall)]
	fake.describeTargetGroupsArgsForCall = append(fake.describeTargetGroupsArgsForCall, struct {
		arg1 *elbv2.DescribeTargetGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeTargetGroups", []interface{}{arg1})
	fake.describeTargetGroupsMutex.Unlock()
	if fake.DescribeTargetGroupsStub != nil {
		return fake.DescribeTargetGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupsCallCount() int {
	fake.describeTargetGroupsMutex.RLock()
	defer fake.describeTargetGroupsMutex.RUnlock()
	return len(fake.describeTargetGroupsArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupsCalls(stub func(*elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error)) {
	fake.describeTargetGroupsMutex.Lock()
	defer fake.describeTargetGroupsMutex.Unlock()
	fake.DescribeTargetGroupsStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupsArgsForCall(i int) *elbv2.DescribeTargetGroupsInput {
	fake.describeTargetGroupsMutex.RLock()
	defer fake.describeTargetGroupsMutex.RUnlock()
	argsForCall := fake.describeTargetGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetGroupsReturns(result1 *elbv2.DescribeTargetGroupsOutput, result2 error) {
	fake.describeTargetGroupsMutex.Lock()
	defer fake.describeTargetGroupsMutex.Unlock()
	fake.DescribeTargetGroupsStub = nil
	fake.describeTargetGroupsReturns = struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupsReturnsOnCall(i int, result1 *elbv2.DescribeTargetGroupsOutput, result2 error) {
	fake.describeTargetGroupsMutex.Lock()
	defer fake.describeTargetGroupsMutex.Unlock()
	fake.DescribeTargetGroupsStub = nil
	if fake.describeTargetGroupsReturnsOnCall == nil {
		fake.describeTargetGroupsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetGroupsOutput
			result2 error
		})
	}
	fake.describeTargetGroupsReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupsPages(arg1 *elbv2.DescribeTargetGroupsInput, arg2 func(*elbv2.DescribeTargetGroupsOutput, bool) bool) error {
	fake.describeTargetGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupsPagesReturnsOnCall[len(fake.describeTargetGroupsPagesArgsForCall)]
	fake.describeTargetGroupsPagesArgsForCall = append(fake.describeTargetGroupsPagesArgsForCall, struct {
		arg1 *elbv2.DescribeTargetGroupsInput
		arg2 func(*elbv2.DescribeTargetGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeTargetGroupsPages", []interface{}{arg1, arg2})
	fake.describeTargetGroupsPagesMutex.Unlock()
	if fake.DescribeTargetGroupsPagesStub != nil {
		return fake.DescribeTargetGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeTargetGroupsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesCallCount() int {
	fake.describeTargetGroupsPagesMutex.RLock()
	defer fake.describeTargetGroupsPagesMutex.RUnlock()
	return len(fake.describeTargetGroupsPagesArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesCalls(stub func(*elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool) error) {
	fake.describeTargetGroupsPagesMutex.Lock()
	defer fake.describeTargetGroupsPagesMutex.Unlock()
	fake.DescribeTargetGroupsPagesStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesArgsForCall(i int) (*elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool) {
	fake.describeTargetGroupsPagesMutex.RLock()
	defer fake.describeTargetGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeTargetGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesReturns(result1 error) {
	fake.describeTargetGroupsPagesMutex.Lock()
	defer fake.describeTargetGroupsPagesMutex.Unlock()
	fake.DescribeTargetGroupsPagesStub = nil
	fake.describeTargetGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeTargetGroupsPagesMutex.Lock()
	defer fake.describeTargetGroupsPagesMutex.Unlock()
	fake.DescribeTargetGroupsPagesStub = nil
	if fake.describeTargetGroupsPagesReturnsOnCall == nil {
		fake.describeTargetGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeTargetGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetGroupsInput, arg3 func(*elbv2.DescribeTargetGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeTargetGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupsPagesWithContextReturnsOnCall[len(fake.describeTargetGroupsPagesWithContextArgsForCall)]
	fake.describeTargetGroupsPagesWithContextArgsForCall = append(fake.describeTargetGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupsInput
		arg3 func(*elbv2.DescribeTargetGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeTargetGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeTargetGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeTargetGroupsPagesWithContextStub != nil {
		return fake.DescribeTargetGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeTargetGroupsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContextCallCount() int {
	fake.describeTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeTargetGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeTargetGroupsPagesWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeTargetGroupsPagesWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool, []request.Option) {
	fake.describeTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeTargetGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeTargetGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContextReturns(result1 error) {
	fake.describeTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeTargetGroupsPagesWithContextStub = nil
	fake.describeTargetGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeTargetGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeTargetGroupsPagesWithContextMutex.Lock()
	defer fake.describeTargetGroupsPagesWithContextMutex.Unlock()
	fake.DescribeTargetGroupsPagesWithContextStub = nil
	if fake.describeTargetGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeTargetGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeTargetGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequest(arg1 *elbv2.DescribeTargetGroupsInput) (*request.Request, *elbv2.DescribeTargetGroupsOutput) {
	fake.describeTargetGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupsRequestReturnsOnCall[len(fake.describeTargetGroupsRequestArgsForCall)]
	fake.describeTargetGroupsRequestArgsForCall = append(fake.describeTargetGroupsRequestArgsForCall, struct {
		arg1 *elbv2.DescribeTargetGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeTargetGroupsRequest", []interface{}{arg1})
	fake.describeTargetGroupsRequestMutex.Unlock()
	if fake.DescribeTargetGroupsRequestStub != nil {
		return fake.DescribeTargetGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequestCallCount() int {
	fake.describeTargetGroupsRequestMutex.RLock()
	defer fake.describeTargetGroupsRequestMutex.RUnlock()
	return len(fake.describeTargetGroupsRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequestCalls(stub func(*elbv2.DescribeTargetGroupsInput) (*request.Request, *elbv2.DescribeTargetGroupsOutput)) {
	fake.describeTargetGroupsRequestMutex.Lock()
	defer fake.describeTargetGroupsRequestMutex.Unlock()
	fake.DescribeTargetGroupsRequestStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequestArgsForCall(i int) *elbv2.DescribeTargetGroupsInput {
	fake.describeTargetGroupsRequestMutex.RLock()
	defer fake.describeTargetGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeTargetGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequestReturns(result1 *request.Request, result2 *elbv2.DescribeTargetGroupsOutput) {
	fake.describeTargetGroupsRequestMutex.Lock()
	defer fake.describeTargetGroupsRequestMutex.Unlock()
	fake.DescribeTargetGroupsRequestStub = nil
	fake.describeTargetGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeTargetGroupsOutput) {
	fake.describeTargetGroupsRequestMutex.Lock()
	defer fake.describeTargetGroupsRequestMutex.Unlock()
	fake.DescribeTargetGroupsRequestStub = nil
	if fake.describeTargetGroupsRequestReturnsOnCall == nil {
		fake.describeTargetGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeTargetGroupsOutput
		})
	}
	fake.describeTargetGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetGroupsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetGroupsInput, arg3 ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error) {
	fake.describeTargetGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTargetGroupsWithContextReturnsOnCall[len(fake.describeTargetGroupsWithContextArgsForCall)]
	fake.describeTargetGroupsWithContextArgsForCall = append(fake.describeTargetGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTargetGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTargetGroupsWithContextMutex.Unlock()
	if fake.DescribeTargetGroupsWithContextStub != nil {
		return fake.DescribeTargetGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContextCallCount() int {
	fake.describeTargetGroupsWithContextMutex.RLock()
	defer fake.describeTargetGroupsWithContextMutex.RUnlock()
	return len(fake.describeTargetGroupsWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetGroupsInput, ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error)) {
	fake.describeTargetGroupsWithContextMutex.Lock()
	defer fake.describeTargetGroupsWithContextMutex.Unlock()
	fake.DescribeTargetGroupsWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetGroupsInput, []request.Option) {
	fake.describeTargetGroupsWithContextMutex.RLock()
	defer fake.describeTargetGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeTargetGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContextReturns(result1 *elbv2.DescribeTargetGroupsOutput, result2 error) {
	fake.describeTargetGroupsWithContextMutex.Lock()
	defer fake.describeTargetGroupsWithContextMutex.Unlock()
	fake.DescribeTargetGroupsWithContextStub = nil
	fake.describeTargetGroupsWithContextReturns = struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetGroupsWithContextReturnsOnCall(i int, result1 *elbv2.DescribeTargetGroupsOutput, result2 error) {
	fake.describeTargetGroupsWithContextMutex.Lock()
	defer fake.describeTargetGroupsWithContextMutex.Unlock()
	fake.DescribeTargetGroupsWithContextStub = nil
	if fake.describeTargetGroupsWithContextReturnsOnCall == nil {
		fake.describeTargetGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetGroupsOutput
			result2 error
		})
	}
	fake.describeTargetGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealth(arg1 *elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error) {
	fake.describeTargetHealthMutex.Lock()
	ret, specificReturn := fake.describeTargetHealthReturnsOnCall[len(fake.describeTargetHealthArgsForCall)]
	fake.describeTargetHealthArgsForCall = append(fake.describeTargetHealthArgsForCall, struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}{arg1})
	fake.recordInvocation("DescribeTargetHealth", []interface{}{arg1})
	fake.describeTargetHealthMutex.Unlock()
	if fake.DescribeTargetHealthStub != nil {
		return fake.DescribeTargetHealthStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetHealthReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetHealthCallCount() int {
	fake.describeTargetHealthMutex.RLock()
	defer fake.describeTargetHealthMutex.RUnlock()
	return len(fake.describeTargetHealthArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetHealthCalls(stub func(*elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error)) {
	fake.describeTargetHealthMutex.Lock()
	defer fake.describeTargetHealthMutex.Unlock()
	fake.DescribeTargetHealthStub = stub
}

func (fake *FakeELBV2API) DescribeTargetHealthArgsForCall(i int) *elbv2.DescribeTargetHealthInput {
	fake.describeTargetHealthMutex.RLock()
	defer fake.describeTargetHealthMutex.RUnlock()
	argsForCall := fake.describeTargetHealthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetHealthReturns(result1 *elbv2.DescribeTargetHealthOutput, result2 error) {
	fake.describeTargetHealthMutex.Lock()
	defer fake.describeTargetHealthMutex.Unlock()
	fake.DescribeTargetHealthStub = nil
	fake.describeTargetHealthReturns = struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealthReturnsOnCall(i int, result1 *elbv2.DescribeTargetHealthOutput, result2 error) {
	fake.describeTargetHealthMutex.Lock()
	defer fake.describeTargetHealthMutex.Unlock()
	fake.DescribeTargetHealthStub = nil
	if fake.describeTargetHealthReturnsOnCall == nil {
		fake.describeTargetHealthReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetHealthOutput
			result2 error
		})
	}
	fake.describeTargetHealthReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealthRequest(arg1 *elbv2.DescribeTargetHealthInput) (*request.Request, *elbv2.DescribeTargetHealthOutput) {
	fake.describeTargetHealthRequestMutex.Lock()
	ret, specificReturn := fake.describeTargetHealthRequestReturnsOnCall[len(fake.describeTargetHealthRequestArgsForCall)]
	fake.describeTargetHealthRequestArgsForCall = append(fake.describeTargetHealthRequestArgsForCall, struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}{arg1})
	fake.recordInvocation("DescribeTargetHealthRequest", []interface{}{arg1})
	fake.describeTargetHealthRequestMutex.Unlock()
	if fake.DescribeTargetHealthRequestStub != nil {
		return fake.DescribeTargetHealthRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetHealthRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetHealthRequestCallCount() int {
	fake.describeTargetHealthRequestMutex.RLock()
	defer fake.describeTargetHealthRequestMutex.RUnlock()
	return len(fake.describeTargetHealthRequestArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetHealthRequestCalls(stub func(*elbv2.DescribeTargetHealthInput) (*request.Request, *elbv2.DescribeTargetHealthOutput)) {
	fake.describeTargetHealthRequestMutex.Lock()
	defer fake.describeTargetHealthRequestMutex.Unlock()
	fake.DescribeTargetHealthRequestStub = stub
}

func (fake *FakeELBV2API) DescribeTargetHealthRequestArgsForCall(i int) *elbv2.DescribeTargetHealthInput {
	fake.describeTargetHealthRequestMutex.RLock()
	defer fake.describeTargetHealthRequestMutex.RUnlock()
	argsForCall := fake.describeTargetHealthRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) DescribeTargetHealthRequestReturns(result1 *request.Request, result2 *elbv2.DescribeTargetHealthOutput) {
	fake.describeTargetHealthRequestMutex.Lock()
	defer fake.describeTargetHealthRequestMutex.Unlock()
	fake.DescribeTargetHealthRequestStub = nil
	fake.describeTargetHealthRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetHealthOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealthRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.DescribeTargetHealthOutput) {
	fake.describeTargetHealthRequestMutex.Lock()
	defer fake.describeTargetHealthRequestMutex.Unlock()
	fake.DescribeTargetHealthRequestStub = nil
	if fake.describeTargetHealthRequestReturnsOnCall == nil {
		fake.describeTargetHealthRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.DescribeTargetHealthOutput
		})
	}
	fake.describeTargetHealthRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.DescribeTargetHealthOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetHealthInput, arg3 ...request.Option) (*elbv2.DescribeTargetHealthOutput, error) {
	fake.describeTargetHealthWithContextMutex.Lock()
	ret, specificReturn := fake.describeTargetHealthWithContextReturnsOnCall[len(fake.describeTargetHealthWithContextArgsForCall)]
	fake.describeTargetHealthWithContextArgsForCall = append(fake.describeTargetHealthWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTargetHealthWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTargetHealthWithContextMutex.Unlock()
	if fake.DescribeTargetHealthWithContextStub != nil {
		return fake.DescribeTargetHealthWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTargetHealthWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContextCallCount() int {
	fake.describeTargetHealthWithContextMutex.RLock()
	defer fake.describeTargetHealthWithContextMutex.RUnlock()
	return len(fake.describeTargetHealthWithContextArgsForCall)
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.Option) (*elbv2.DescribeTargetHealthOutput, error)) {
	fake.describeTargetHealthWithContextMutex.Lock()
	defer fake.describeTargetHealthWithContextMutex.Unlock()
	fake.DescribeTargetHealthWithContextStub = stub
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetHealthInput, []request.Option) {
	fake.describeTargetHealthWithContextMutex.RLock()
	defer fake.describeTargetHealthWithContextMutex.RUnlock()
	argsForCall := fake.describeTargetHealthWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContextReturns(result1 *elbv2.DescribeTargetHealthOutput, result2 error) {
	fake.describeTargetHealthWithContextMutex.Lock()
	defer fake.describeTargetHealthWithContextMutex.Unlock()
	fake.DescribeTargetHealthWithContextStub = nil
	fake.describeTargetHealthWithContextReturns = struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) DescribeTargetHealthWithContextReturnsOnCall(i int, result1 *elbv2.DescribeTargetHealthOutput, result2 error) {
	fake.describeTargetHealthWithContextMutex.Lock()
	defer fake.describeTargetHealthWithContextMutex.Unlock()
	fake.DescribeTargetHealthWithContextStub = nil
	if fake.describeTargetHealthWithContextReturnsOnCall == nil {
		fake.describeTargetHealthWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.DescribeTargetHealthOutput
			result2 error
		})
	}
	fake.describeTargetHealthWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.DescribeTargetHealthOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListener(arg1 *elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error) {
	fake.modifyListenerMutex.Lock()
	ret, specificReturn := fake.modifyListenerReturnsOnCall[len(fake.modifyListenerArgsForCall)]
	fake.modifyListenerArgsForCall = append(fake.modifyListenerArgsForCall, struct {
		arg1 *elbv2.ModifyListenerInput
	}{arg1})
	fake.recordInvocation("ModifyListener", []interface{}{arg1})
	fake.modifyListenerMutex.Unlock()
	if fake.ModifyListenerStub != nil {
		return fake.ModifyListenerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyListenerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyListenerCallCount() int {
	fake.modifyListenerMutex.RLock()
	defer fake.modifyListenerMutex.RUnlock()
	return len(fake.modifyListenerArgsForCall)
}

func (fake *FakeELBV2API) ModifyListenerCalls(stub func(*elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error)) {
	fake.modifyListenerMutex.Lock()
	defer fake.modifyListenerMutex.Unlock()
	fake.ModifyListenerStub = stub
}

func (fake *FakeELBV2API) ModifyListenerArgsForCall(i int) *elbv2.ModifyListenerInput {
	fake.modifyListenerMutex.RLock()
	defer fake.modifyListenerMutex.RUnlock()
	argsForCall := fake.modifyListenerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyListenerReturns(result1 *elbv2.ModifyListenerOutput, result2 error) {
	fake.modifyListenerMutex.Lock()
	defer fake.modifyListenerMutex.Unlock()
	fake.ModifyListenerStub = nil
	fake.modifyListenerReturns = struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListenerReturnsOnCall(i int, result1 *elbv2.ModifyListenerOutput, result2 error) {
	fake.modifyListenerMutex.Lock()
	defer fake.modifyListenerMutex.Unlock()
	fake.ModifyListenerStub = nil
	if fake.modifyListenerReturnsOnCall == nil {
		fake.modifyListenerReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyListenerOutput
			result2 error
		})
	}
	fake.modifyListenerReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListenerRequest(arg1 *elbv2.ModifyListenerInput) (*request.Request, *elbv2.ModifyListenerOutput) {
	fake.modifyListenerRequestMutex.Lock()
	ret, specificReturn := fake.modifyListenerRequestReturnsOnCall[len(fake.modifyListenerRequestArgsForCall)]
	fake.modifyListenerRequestArgsForCall = append(fake.modifyListenerRequestArgsForCall, struct {
		arg1 *elbv2.ModifyListenerInput
	}{arg1})
	fake.recordInvocation("ModifyListenerRequest", []interface{}{arg1})
	fake.modifyListenerRequestMutex.Unlock()
	if fake.ModifyListenerRequestStub != nil {
		return fake.ModifyListenerRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyListenerRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyListenerRequestCallCount() int {
	fake.modifyListenerRequestMutex.RLock()
	defer fake.modifyListenerRequestMutex.RUnlock()
	return len(fake.modifyListenerRequestArgsForCall)
}

func (fake *FakeELBV2API) ModifyListenerRequestCalls(stub func(*elbv2.ModifyListenerInput) (*request.Request, *elbv2.ModifyListenerOutput)) {
	fake.modifyListenerRequestMutex.Lock()
	defer fake.modifyListenerRequestMutex.Unlock()
	fake.ModifyListenerRequestStub = stub
}

func (fake *FakeELBV2API) ModifyListenerRequestArgsForCall(i int) *elbv2.ModifyListenerInput {
	fake.modifyListenerRequestMutex.RLock()
	defer fake.modifyListenerRequestMutex.RUnlock()
	argsForCall := fake.modifyListenerRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyListenerRequestReturns(result1 *request.Request, result2 *elbv2.ModifyListenerOutput) {
	fake.modifyListenerRequestMutex.Lock()
	defer fake.modifyListenerRequestMutex.Unlock()
	fake.ModifyListenerRequestStub = nil
	fake.modifyListenerRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.ModifyListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListenerRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.ModifyListenerOutput) {
	fake.modifyListenerRequestMutex.Lock()
	defer fake.modifyListenerRequestMutex.Unlock()
	fake.ModifyListenerRequestStub = nil
	if fake.modifyListenerRequestReturnsOnCall == nil {
		fake.modifyListenerRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.ModifyListenerOutput
		})
	}
	fake.modifyListenerRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.ModifyListenerOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListenerWithContext(arg1 aws.Context, arg2 *elbv2.ModifyListenerInput, arg3 ...request.Option) (*elbv2.ModifyListenerOutput, error) {
	fake.modifyListenerWithContextMutex.Lock()
	ret, specificReturn := fake.modifyListenerWithContextReturnsOnCall[len(fake.modifyListenerWithContextArgsForCall)]
	fake.modifyListenerWithContextArgsForCall = append(fake.modifyListenerWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyListenerInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyListenerWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyListenerWithContextMutex.Unlock()
	if fake.ModifyListenerWithContextStub != nil {
		return fake.ModifyListenerWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyListenerWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyListenerWithContextCallCount() int {
	fake.modifyListenerWithContextMutex.RLock()
	defer fake.modifyListenerWithContextMutex.RUnlock()
	return len(fake.modifyListenerWithContextArgsForCall)
}

func (fake *FakeELBV2API) ModifyListenerWithContextCalls(stub func(aws.Context, *elbv2.ModifyListenerInput, ...request.Option) (*elbv2.ModifyListenerOutput, error)) {
	fake.modifyListenerWithContextMutex.Lock()
	defer fake.modifyListenerWithContextMutex.Unlock()
	fake.ModifyListenerWithContextStub = stub
}

func (fake *FakeELBV2API) ModifyListenerWithContextArgsForCall(i int) (aws.Context, *elbv2.ModifyListenerInput, []request.Option) {
	fake.modifyListenerWithContextMutex.RLock()
	defer fake.modifyListenerWithContextMutex.RUnlock()
	argsForCall := fake.modifyListenerWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) ModifyListenerWithContextReturns(result1 *elbv2.ModifyListenerOutput, result2 error) {
	fake.modifyListenerWithContextMutex.Lock()
	defer fake.modifyListenerWithContextMutex.Unlock()
	fake.ModifyListenerWithContextStub = nil
	fake.modifyListenerWithContextReturns = struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyListenerWithContextReturnsOnCall(i int, result1 *elbv2.ModifyListenerOutput, result2 error) {
	fake.modifyListenerWithContextMutex.Lock()
	defer fake.modifyListenerWithContextMutex.Unlock()
	fake.ModifyListenerWithContextStub = nil
	if fake.modifyListenerWithContextReturnsOnCall == nil {
		fake.modifyListenerWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyListenerOutput
			result2 error
		})
	}
	fake.modifyListenerWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyListenerOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributes(arg1 *elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	fake.modifyLoadBalancerAttributesMutex.Lock()
	ret, specificReturn := fake.modifyLoadBalancerAttributesReturnsOnCall[len(fake.modifyLoadBalancerAttributesArgsForCall)]
	fake.modifyLoadBalancerAttributesArgsForCall = append(fake.modifyLoadBalancerAttributesArgsForCall, struct {
		arg1 *elbv2.ModifyLoadBalancerAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyLoadBalancerAttributes", []interface{}{arg1})
	fake.modifyLoadBalancerAttributesMutex.Unlock()
	if fake.ModifyLoadBalancerAttributesStub != nil {
		return fake.ModifyLoadBalancerAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLoadBalancerAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesCallCount() int {
	fake.modifyLoadBalancerAttributesMutex.RLock()
	defer fake.modifyLoadBalancerAttributesMutex.RUnlock()
	return len(fake.modifyLoadBalancerAttributesArgsForCall)
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesCalls(stub func(*elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error)) {
	fake.modifyLoadBalancerAttributesMutex.Lock()
	defer fake.modifyLoadBalancerAttributesMutex.Unlock()
	fake.ModifyLoadBalancerAttributesStub = stub
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesArgsForCall(i int) *elbv2.ModifyLoadBalancerAttributesInput {
	fake.modifyLoadBalancerAttributesMutex.RLock()
	defer fake.modifyLoadBalancerAttributesMutex.RUnlock()
	argsForCall := fake.modifyLoadBalancerAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesReturns(result1 *elbv2.ModifyLoadBalancerAttributesOutput, result2 error) {
	fake.modifyLoadBalancerAttributesMutex.Lock()
	defer fake.modifyLoadBalancerAttributesMutex.Unlock()
	fake.ModifyLoadBalancerAttributesStub = nil
	fake.modifyLoadBalancerAttributesReturns = struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesReturnsOnCall(i int, result1 *elbv2.ModifyLoadBalancerAttributesOutput, result2 error) {
	fake.modifyLoadBalancerAttributesMutex.Lock()
	defer fake.modifyLoadBalancerAttributesMutex.Unlock()
	fake.ModifyLoadBalancerAttributesStub = nil
	if fake.modifyLoadBalancerAttributesReturnsOnCall == nil {
		fake.modifyLoadBalancerAttributesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyLoadBalancerAttributesOutput
			result2 error
		})
	}
	fake.modifyLoadBalancerAttributesReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequest(arg1 *elbv2.ModifyLoadBalancerAttributesInput) (*request.Request, *elbv2.ModifyLoadBalancerAttributesOutput) {
	fake.modifyLoadBalancerAttributesRequestMutex.Lock()
	ret, specificReturn := fake.modifyLoadBalancerAttributesRequestReturnsOnCall[len(fake.modifyLoadBalancerAttributesRequestArgsForCall)]
	fake.modifyLoadBalancerAttributesRequestArgsForCall = append(fake.modifyLoadBalancerAttributesRequestArgsForCall, struct {
		arg1 *elbv2.ModifyLoadBalancerAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyLoadBalancerAttributesRequest", []interface{}{arg1})
	fake.modifyLoadBalancerAttributesRequestMutex.Unlock()
	if fake.ModifyLoadBalancerAttributesRequestStub != nil {
		return fake.ModifyLoadBalancerAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLoadBalancerAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequestCallCount() int {
	fake.modifyLoadBalancerAttributesRequestMutex.RLock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.RUnlock()
	return len(fake.modifyLoadBalancerAttributesRequestArgsForCall)
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequestCalls(stub func(*elbv2.ModifyLoadBalancerAttributesInput) (*request.Request, *elbv2.ModifyLoadBalancerAttributesOutput)) {
	fake.modifyLoadBalancerAttributesRequestMutex.Lock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.Unlock()
	fake.ModifyLoadBalancerAttributesRequestStub = stub
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequestArgsForCall(i int) *elbv2.ModifyLoadBalancerAttributesInput {
	fake.modifyLoadBalancerAttributesRequestMutex.RLock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.RUnlock()
	argsForCall := fake.modifyLoadBalancerAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequestReturns(result1 *request.Request, result2 *elbv2.ModifyLoadBalancerAttributesOutput) {
	fake.modifyLoadBalancerAttributesRequestMutex.Lock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.Unlock()
	fake.ModifyLoadBalancerAttributesRequestStub = nil
	fake.modifyLoadBalancerAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.ModifyLoadBalancerAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.ModifyLoadBalancerAttributesOutput) {
	fake.modifyLoadBalancerAttributesRequestMutex.Lock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.Unlock()
	fake.ModifyLoadBalancerAttributesRequestStub = nil
	if fake.modifyLoadBalancerAttributesRequestReturnsOnCall == nil {
		fake.modifyLoadBalancerAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.ModifyLoadBalancerAttributesOutput
		})
	}
	fake.modifyLoadBalancerAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.ModifyLoadBalancerAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContext(arg1 aws.Context, arg2 *elbv2.ModifyLoadBalancerAttributesInput, arg3 ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	fake.modifyLoadBalancerAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.modifyLoadBalancerAttributesWithContextReturnsOnCall[len(fake.modifyLoadBalancerAttributesWithContextArgsForCall)]
	fake.modifyLoadBalancerAttributesWithContextArgsForCall = append(fake.modifyLoadBalancerAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyLoadBalancerAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyLoadBalancerAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyLoadBalancerAttributesWithContextMutex.Unlock()
	if fake.ModifyLoadBalancerAttributesWithContextStub != nil {
		return fake.ModifyLoadBalancerAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLoadBalancerAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContextCallCount() int {
	fake.modifyLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.RUnlock()
	return len(fake.modifyLoadBalancerAttributesWithContextArgsForCall)
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContextCalls(stub func(aws.Context, *elbv2.ModifyLoadBalancerAttributesInput, ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error)) {
	fake.modifyLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.Unlock()
	fake.ModifyLoadBalancerAttributesWithContextStub = stub
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContextArgsForCall(i int) (aws.Context, *elbv2.ModifyLoadBalancerAttributesInput, []request.Option) {
	fake.modifyLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.RUnlock()
	argsForCall := fake.modifyLoadBalancerAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContextReturns(result1 *elbv2.ModifyLoadBalancerAttributesOutput, result2 error) {
	fake.modifyLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.Unlock()
	fake.ModifyLoadBalancerAttributesWithContextStub = nil
	fake.modifyLoadBalancerAttributesWithContextReturns = struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyLoadBalancerAttributesWithContextReturnsOnCall(i int, result1 *elbv2.ModifyLoadBalancerAttributesOutput, result2 error) {
	fake.modifyLoadBalancerAttributesWithContextMutex.Lock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.Unlock()
	fake.ModifyLoadBalancerAttributesWithContextStub = nil
	if fake.modifyLoadBalancerAttributesWithContextReturnsOnCall == nil {
		fake.modifyLoadBalancerAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyLoadBalancerAttributesOutput
			result2 error
		})
	}
	fake.modifyLoadBalancerAttributesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyLoadBalancerAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRule(arg1 *elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error) {
	fake.modifyRuleMutex.Lock()
	ret, specificReturn := fake.modifyRuleReturnsOnCall[len(fake.modifyRuleArgsForCall)]
	fake.modifyRuleArgsForCall = append(fake.modifyRuleArgsForCall, struct {
		arg1 *elbv2.ModifyRuleInput
	}{arg1})
	fake.recordInvocation("ModifyRule", []interface{}{arg1})
	fake.modifyRuleMutex.Unlock()
	if fake.ModifyRuleStub != nil {
		return fake.ModifyRuleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyRuleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyRuleCallCount() int {
	fake.modifyRuleMutex.RLock()
	defer fake.modifyRuleMutex.RUnlock()
	return len(fake.modifyRuleArgsForCall)
}

func (fake *FakeELBV2API) ModifyRuleCalls(stub func(*elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error)) {
	fake.modifyRuleMutex.Lock()
	defer fake.modifyRuleMutex.Unlock()
	fake.ModifyRuleStub = stub
}

func (fake *FakeELBV2API) ModifyRuleArgsForCall(i int) *elbv2.ModifyRuleInput {
	fake.modifyRuleMutex.RLock()
	defer fake.modifyRuleMutex.RUnlock()
	argsForCall := fake.modifyRuleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyRuleReturns(result1 *elbv2.ModifyRuleOutput, result2 error) {
	fake.modifyRuleMutex.Lock()
	defer fake.modifyRuleMutex.Unlock()
	fake.ModifyRuleStub = nil
	fake.modifyRuleReturns = struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRuleReturnsOnCall(i int, result1 *elbv2.ModifyRuleOutput, result2 error) {
	fake.modifyRuleMutex.Lock()
	defer fake.modifyRuleMutex.Unlock()
	fake.ModifyRuleStub = nil
	if fake.modifyRuleReturnsOnCall == nil {
		fake.modifyRuleReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyRuleOutput
			result2 error
		})
	}
	fake.modifyRuleReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRuleRequest(arg1 *elbv2.ModifyRuleInput) (*request.Request, *elbv2.ModifyRuleOutput) {
	fake.modifyRuleRequestMutex.Lock()
	ret, specificReturn := fake.modifyRuleRequestReturnsOnCall[len(fake.modifyRuleRequestArgsForCall)]
	fake.modifyRuleRequestArgsForCall = append(fake.modifyRuleRequestArgsForCall, struct {
		arg1 *elbv2.ModifyRuleInput
	}{arg1})
	fake.recordInvocation("ModifyRuleRequest", []interface{}{arg1})
	fake.modifyRuleRequestMutex.Unlock()
	if fake.ModifyRuleRequestStub != nil {
		return fake.ModifyRuleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyRuleRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyRuleRequestCallCount() int {
	fake.modifyRuleRequestMutex.RLock()
	defer fake.modifyRuleRequestMutex.RUnlock()
	return len(fake.modifyRuleRequestArgsForCall)
}

func (fake *FakeELBV2API) ModifyRuleRequestCalls(stub func(*elbv2.ModifyRuleInput) (*request.Request, *elbv2.ModifyRuleOutput)) {
	fake.modifyRuleRequestMutex.Lock()
	defer fake.modifyRuleRequestMutex.Unlock()
	fake.ModifyRuleRequestStub = stub
}

func (fake *FakeELBV2API) ModifyRuleRequestArgsForCall(i int) *elbv2.ModifyRuleInput {
	fake.modifyRuleRequestMutex.RLock()
	defer fake.modifyRuleRequestMutex.RUnlock()
	argsForCall := fake.modifyRuleRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyRuleRequestReturns(result1 *request.Request, result2 *elbv2.ModifyRuleOutput) {
	fake.modifyRuleRequestMutex.Lock()
	defer fake.modifyRuleRequestMutex.Unlock()
	fake.ModifyRuleRequestStub = nil
	fake.modifyRuleRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.ModifyRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRuleRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.ModifyRuleOutput) {
	fake.modifyRuleRequestMutex.Lock()
	defer fake.modifyRuleRequestMutex.Unlock()
	fake.ModifyRuleRequestStub = nil
	if fake.modifyRuleRequestReturnsOnCall == nil {
		fake.modifyRuleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.ModifyRuleOutput
		})
	}
	fake.modifyRuleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.ModifyRuleOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRuleWithContext(arg1 aws.Context, arg2 *elbv2.ModifyRuleInput, arg3 ...request.Option) (*elbv2.ModifyRuleOutput, error) {
	fake.modifyRuleWithContextMutex.Lock()
	ret, specificReturn := fake.modifyRuleWithContextReturnsOnCall[len(fake.modifyRuleWithContextArgsForCall)]
	fake.modifyRuleWithContextArgsForCall = append(fake.modifyRuleWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyRuleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyRuleWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyRuleWithContextMutex.Unlock()
	if fake.ModifyRuleWithContextStub != nil {
		return fake.ModifyRuleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyRuleWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyRuleWithContextCallCount() int {
	fake.modifyRuleWithContextMutex.RLock()
	defer fake.modifyRuleWithContextMutex.RUnlock()
	return len(fake.modifyRuleWithContextArgsForCall)
}

func (fake *FakeELBV2API) ModifyRuleWithContextCalls(stub func(aws.Context, *elbv2.ModifyRuleInput, ...request.Option) (*elbv2.ModifyRuleOutput, error)) {
	fake.modifyRuleWithContextMutex.Lock()
	defer fake.modifyRuleWithContextMutex.Unlock()
	fake.ModifyRuleWithContextStub = stub
}

func (fake *FakeELBV2API) ModifyRuleWithContextArgsForCall(i int) (aws.Context, *elbv2.ModifyRuleInput, []request.Option) {
	fake.modifyRuleWithContextMutex.RLock()
	defer fake.modifyRuleWithContextMutex.RUnlock()
	argsForCall := fake.modifyRuleWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) ModifyRuleWithContextReturns(result1 *elbv2.ModifyRuleOutput, result2 error) {
	fake.modifyRuleWithContextMutex.Lock()
	defer fake.modifyRuleWithContextMutex.Unlock()
	fake.ModifyRuleWithContextStub = nil
	fake.modifyRuleWithContextReturns = struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyRuleWithContextReturnsOnCall(i int, result1 *elbv2.ModifyRuleOutput, result2 error) {
	fake.modifyRuleWithContextMutex.Lock()
	defer fake.modifyRuleWithContextMutex.Unlock()
	fake.ModifyRuleWithContextStub = nil
	if fake.modifyRuleWithContextReturnsOnCall == nil {
		fake.modifyRuleWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyRuleOutput
			result2 error
		})
	}
	fake.modifyRuleWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyRuleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroup(arg1 *elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error) {
	fake.modifyTargetGroupMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupReturnsOnCall[len(fake.modifyTargetGroupArgsForCall)]
	fake.modifyTargetGroupArgsForCall = append(fake.modifyTargetGroupArgsForCall, struct {
		arg1 *elbv2.ModifyTargetGroupInput
	}{arg1})
	fake.recordInvocation("ModifyTargetGroup", []interface{}{arg1})
	fake.modifyTargetGroupMutex.Unlock()
	if fake.ModifyTargetGroupStub != nil {
		return fake.ModifyTargetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupCallCount() int {
	fake.modifyTargetGroupMutex.RLock()
	defer fake.modifyTargetGroupMutex.RUnlock()
	return len(fake.modifyTargetGroupArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupCalls(stub func(*elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error)) {
	fake.modifyTargetGroupMutex.Lock()
	defer fake.modifyTargetGroupMutex.Unlock()
	fake.ModifyTargetGroupStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupArgsForCall(i int) *elbv2.ModifyTargetGroupInput {
	fake.modifyTargetGroupMutex.RLock()
	defer fake.modifyTargetGroupMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyTargetGroupReturns(result1 *elbv2.ModifyTargetGroupOutput, result2 error) {
	fake.modifyTargetGroupMutex.Lock()
	defer fake.modifyTargetGroupMutex.Unlock()
	fake.ModifyTargetGroupStub = nil
	fake.modifyTargetGroupReturns = struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupReturnsOnCall(i int, result1 *elbv2.ModifyTargetGroupOutput, result2 error) {
	fake.modifyTargetGroupMutex.Lock()
	defer fake.modifyTargetGroupMutex.Unlock()
	fake.ModifyTargetGroupStub = nil
	if fake.modifyTargetGroupReturnsOnCall == nil {
		fake.modifyTargetGroupReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyTargetGroupOutput
			result2 error
		})
	}
	fake.modifyTargetGroupReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributes(arg1 *elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	fake.modifyTargetGroupAttributesMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupAttributesReturnsOnCall[len(fake.modifyTargetGroupAttributesArgsForCall)]
	fake.modifyTargetGroupAttributesArgsForCall = append(fake.modifyTargetGroupAttributesArgsForCall, struct {
		arg1 *elbv2.ModifyTargetGroupAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyTargetGroupAttributes", []interface{}{arg1})
	fake.modifyTargetGroupAttributesMutex.Unlock()
	if fake.ModifyTargetGroupAttributesStub != nil {
		return fake.ModifyTargetGroupAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesCallCount() int {
	fake.modifyTargetGroupAttributesMutex.RLock()
	defer fake.modifyTargetGroupAttributesMutex.RUnlock()
	return len(fake.modifyTargetGroupAttributesArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesCalls(stub func(*elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error)) {
	fake.modifyTargetGroupAttributesMutex.Lock()
	defer fake.modifyTargetGroupAttributesMutex.Unlock()
	fake.ModifyTargetGroupAttributesStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesArgsForCall(i int) *elbv2.ModifyTargetGroupAttributesInput {
	fake.modifyTargetGroupAttributesMutex.RLock()
	defer fake.modifyTargetGroupAttributesMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesReturns(result1 *elbv2.ModifyTargetGroupAttributesOutput, result2 error) {
	fake.modifyTargetGroupAttributesMutex.Lock()
	defer fake.modifyTargetGroupAttributesMutex.Unlock()
	fake.ModifyTargetGroupAttributesStub = nil
	fake.modifyTargetGroupAttributesReturns = struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesReturnsOnCall(i int, result1 *elbv2.ModifyTargetGroupAttributesOutput, result2 error) {
	fake.modifyTargetGroupAttributesMutex.Lock()
	defer fake.modifyTargetGroupAttributesMutex.Unlock()
	fake.ModifyTargetGroupAttributesStub = nil
	if fake.modifyTargetGroupAttributesReturnsOnCall == nil {
		fake.modifyTargetGroupAttributesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyTargetGroupAttributesOutput
			result2 error
		})
	}
	fake.modifyTargetGroupAttributesReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequest(arg1 *elbv2.ModifyTargetGroupAttributesInput) (*request.Request, *elbv2.ModifyTargetGroupAttributesOutput) {
	fake.modifyTargetGroupAttributesRequestMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupAttributesRequestReturnsOnCall[len(fake.modifyTargetGroupAttributesRequestArgsForCall)]
	fake.modifyTargetGroupAttributesRequestArgsForCall = append(fake.modifyTargetGroupAttributesRequestArgsForCall, struct {
		arg1 *elbv2.ModifyTargetGroupAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyTargetGroupAttributesRequest", []interface{}{arg1})
	fake.modifyTargetGroupAttributesRequestMutex.Unlock()
	if fake.ModifyTargetGroupAttributesRequestStub != nil {
		return fake.ModifyTargetGroupAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequestCallCount() int {
	fake.modifyTargetGroupAttributesRequestMutex.RLock()
	defer fake.modifyTargetGroupAttributesRequestMutex.RUnlock()
	return len(fake.modifyTargetGroupAttributesRequestArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequestCalls(stub func(*elbv2.ModifyTargetGroupAttributesInput) (*request.Request, *elbv2.ModifyTargetGroupAttributesOutput)) {
	fake.modifyTargetGroupAttributesRequestMutex.Lock()
	defer fake.modifyTargetGroupAttributesRequestMutex.Unlock()
	fake.ModifyTargetGroupAttributesRequestStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequestArgsForCall(i int) *elbv2.ModifyTargetGroupAttributesInput {
	fake.modifyTargetGroupAttributesRequestMutex.RLock()
	defer fake.modifyTargetGroupAttributesRequestMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequestReturns(result1 *request.Request, result2 *elbv2.ModifyTargetGroupAttributesOutput) {
	fake.modifyTargetGroupAttributesRequestMutex.Lock()
	defer fake.modifyTargetGroupAttributesRequestMutex.Unlock()
	fake.ModifyTargetGroupAttributesRequestStub = nil
	fake.modifyTargetGroupAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.ModifyTargetGroupAttributesOutput) {
	fake.modifyTargetGroupAttributesRequestMutex.Lock()
	defer fake.modifyTargetGroupAttributesRequestMutex.Unlock()
	fake.ModifyTargetGroupAttributesRequestStub = nil
	if fake.modifyTargetGroupAttributesRequestReturnsOnCall == nil {
		fake.modifyTargetGroupAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.ModifyTargetGroupAttributesOutput
		})
	}
	fake.modifyTargetGroupAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupAttributesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContext(arg1 aws.Context, arg2 *elbv2.ModifyTargetGroupAttributesInput, arg3 ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	fake.modifyTargetGroupAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupAttributesWithContextReturnsOnCall[len(fake.modifyTargetGroupAttributesWithContextArgsForCall)]
	fake.modifyTargetGroupAttributesWithContextArgsForCall = append(fake.modifyTargetGroupAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyTargetGroupAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyTargetGroupAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyTargetGroupAttributesWithContextMutex.Unlock()
	if fake.ModifyTargetGroupAttributesWithContextStub != nil {
		return fake.ModifyTargetGroupAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContextCallCount() int {
	fake.modifyTargetGroupAttributesWithContextMutex.RLock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.RUnlock()
	return len(fake.modifyTargetGroupAttributesWithContextArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContextCalls(stub func(aws.Context, *elbv2.ModifyTargetGroupAttributesInput, ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error)) {
	fake.modifyTargetGroupAttributesWithContextMutex.Lock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.Unlock()
	fake.ModifyTargetGroupAttributesWithContextStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContextArgsForCall(i int) (aws.Context, *elbv2.ModifyTargetGroupAttributesInput, []request.Option) {
	fake.modifyTargetGroupAttributesWithContextMutex.RLock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContextReturns(result1 *elbv2.ModifyTargetGroupAttributesOutput, result2 error) {
	fake.modifyTargetGroupAttributesWithContextMutex.Lock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.Unlock()
	fake.ModifyTargetGroupAttributesWithContextStub = nil
	fake.modifyTargetGroupAttributesWithContextReturns = struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupAttributesWithContextReturnsOnCall(i int, result1 *elbv2.ModifyTargetGroupAttributesOutput, result2 error) {
	fake.modifyTargetGroupAttributesWithContextMutex.Lock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.Unlock()
	fake.ModifyTargetGroupAttributesWithContextStub = nil
	if fake.modifyTargetGroupAttributesWithContextReturnsOnCall == nil {
		fake.modifyTargetGroupAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyTargetGroupAttributesOutput
			result2 error
		})
	}
	fake.modifyTargetGroupAttributesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyTargetGroupAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupRequest(arg1 *elbv2.ModifyTargetGroupInput) (*request.Request, *elbv2.ModifyTargetGroupOutput) {
	fake.modifyTargetGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupRequestReturnsOnCall[len(fake.modifyTargetGroupRequestArgsForCall)]
	fake.modifyTargetGroupRequestArgsForCall = append(fake.modifyTargetGroupRequestArgsForCall, struct {
		arg1 *elbv2.ModifyTargetGroupInput
	}{arg1})
	fake.recordInvocation("ModifyTargetGroupRequest", []interface{}{arg1})
	fake.modifyTargetGroupRequestMutex.Unlock()
	if fake.ModifyTargetGroupRequestStub != nil {
		return fake.ModifyTargetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupRequestCallCount() int {
	fake.modifyTargetGroupRequestMutex.RLock()
	defer fake.modifyTargetGroupRequestMutex.RUnlock()
	return len(fake.modifyTargetGroupRequestArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupRequestCalls(stub func(*elbv2.ModifyTargetGroupInput) (*request.Request, *elbv2.ModifyTargetGroupOutput)) {
	fake.modifyTargetGroupRequestMutex.Lock()
	defer fake.modifyTargetGroupRequestMutex.Unlock()
	fake.ModifyTargetGroupRequestStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupRequestArgsForCall(i int) *elbv2.ModifyTargetGroupInput {
	fake.modifyTargetGroupRequestMutex.RLock()
	defer fake.modifyTargetGroupRequestMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) ModifyTargetGroupRequestReturns(result1 *request.Request, result2 *elbv2.ModifyTargetGroupOutput) {
	fake.modifyTargetGroupRequestMutex.Lock()
	defer fake.modifyTargetGroupRequestMutex.Unlock()
	fake.ModifyTargetGroupRequestStub = nil
	fake.modifyTargetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.ModifyTargetGroupOutput) {
	fake.modifyTargetGroupRequestMutex.Lock()
	defer fake.modifyTargetGroupRequestMutex.Unlock()
	fake.ModifyTargetGroupRequestStub = nil
	if fake.modifyTargetGroupRequestReturnsOnCall == nil {
		fake.modifyTargetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.ModifyTargetGroupOutput
		})
	}
	fake.modifyTargetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.ModifyTargetGroupOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContext(arg1 aws.Context, arg2 *elbv2.ModifyTargetGroupInput, arg3 ...request.Option) (*elbv2.ModifyTargetGroupOutput, error) {
	fake.modifyTargetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyTargetGroupWithContextReturnsOnCall[len(fake.modifyTargetGroupWithContextArgsForCall)]
	fake.modifyTargetGroupWithContextArgsForCall = append(fake.modifyTargetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.ModifyTargetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyTargetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyTargetGroupWithContextMutex.Unlock()
	if fake.ModifyTargetGroupWithContextStub != nil {
		return fake.ModifyTargetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTargetGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContextCallCount() int {
	fake.modifyTargetGroupWithContextMutex.RLock()
	defer fake.modifyTargetGroupWithContextMutex.RUnlock()
	return len(fake.modifyTargetGroupWithContextArgsForCall)
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContextCalls(stub func(aws.Context, *elbv2.ModifyTargetGroupInput, ...request.Option) (*elbv2.ModifyTargetGroupOutput, error)) {
	fake.modifyTargetGroupWithContextMutex.Lock()
	defer fake.modifyTargetGroupWithContextMutex.Unlock()
	fake.ModifyTargetGroupWithContextStub = stub
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContextArgsForCall(i int) (aws.Context, *elbv2.ModifyTargetGroupInput, []request.Option) {
	fake.modifyTargetGroupWithContextMutex.RLock()
	defer fake.modifyTargetGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyTargetGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContextReturns(result1 *elbv2.ModifyTargetGroupOutput, result2 error) {
	fake.modifyTargetGroupWithContextMutex.Lock()
	defer fake.modifyTargetGroupWithContextMutex.Unlock()
	fake.ModifyTargetGroupWithContextStub = nil
	fake.modifyTargetGroupWithContextReturns = struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) ModifyTargetGroupWithContextReturnsOnCall(i int, result1 *elbv2.ModifyTargetGroupOutput, result2 error) {
	fake.modifyTargetGroupWithContextMutex.Lock()
	defer fake.modifyTargetGroupWithContextMutex.Unlock()
	fake.ModifyTargetGroupWithContextStub = nil
	if fake.modifyTargetGroupWithContextReturnsOnCall == nil {
		fake.modifyTargetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.ModifyTargetGroupOutput
			result2 error
		})
	}
	fake.modifyTargetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.ModifyTargetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargets(arg1 *elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error) {
	fake.registerTargetsMutex.Lock()
	ret, specificReturn := fake.registerTargetsReturnsOnCall[len(fake.registerTargetsArgsForCall)]
	fake.registerTargetsArgsForCall = append(fake.registerTargetsArgsForCall, struct {
		arg1 *elbv2.RegisterTargetsInput
	}{arg1})
	fake.recordInvocation("RegisterTargets", []interface{}{arg1})
	fake.registerTargetsMutex.Unlock()
	if fake.RegisterTargetsStub != nil {
		return fake.RegisterTargetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTargetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RegisterTargetsCallCount() int {
	fake.registerTargetsMutex.RLock()
	defer fake.registerTargetsMutex.RUnlock()
	return len(fake.registerTargetsArgsForCall)
}

func (fake *FakeELBV2API) RegisterTargetsCalls(stub func(*elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error)) {
	fake.registerTargetsMutex.Lock()
	defer fake.registerTargetsMutex.Unlock()
	fake.RegisterTargetsStub = stub
}

func (fake *FakeELBV2API) RegisterTargetsArgsForCall(i int) *elbv2.RegisterTargetsInput {
	fake.registerTargetsMutex.RLock()
	defer fake.registerTargetsMutex.RUnlock()
	argsForCall := fake.registerTargetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RegisterTargetsReturns(result1 *elbv2.RegisterTargetsOutput, result2 error) {
	fake.registerTargetsMutex.Lock()
	defer fake.registerTargetsMutex.Unlock()
	fake.RegisterTargetsStub = nil
	fake.registerTargetsReturns = struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargetsReturnsOnCall(i int, result1 *elbv2.RegisterTargetsOutput, result2 error) {
	fake.registerTargetsMutex.Lock()
	defer fake.registerTargetsMutex.Unlock()
	fake.RegisterTargetsStub = nil
	if fake.registerTargetsReturnsOnCall == nil {
		fake.registerTargetsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RegisterTargetsOutput
			result2 error
		})
	}
	fake.registerTargetsReturnsOnCall[i] = struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargetsRequest(arg1 *elbv2.RegisterTargetsInput) (*request.Request, *elbv2.RegisterTargetsOutput) {
	fake.registerTargetsRequestMutex.Lock()
	ret, specificReturn := fake.registerTargetsRequestReturnsOnCall[len(fake.registerTargetsRequestArgsForCall)]
	fake.registerTargetsRequestArgsForCall = append(fake.registerTargetsRequestArgsForCall, struct {
		arg1 *elbv2.RegisterTargetsInput
	}{arg1})
	fake.recordInvocation("RegisterTargetsRequest", []interface{}{arg1})
	fake.registerTargetsRequestMutex.Unlock()
	if fake.RegisterTargetsRequestStub != nil {
		return fake.RegisterTargetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTargetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RegisterTargetsRequestCallCount() int {
	fake.registerTargetsRequestMutex.RLock()
	defer fake.registerTargetsRequestMutex.RUnlock()
	return len(fake.registerTargetsRequestArgsForCall)
}

func (fake *FakeELBV2API) RegisterTargetsRequestCalls(stub func(*elbv2.RegisterTargetsInput) (*request.Request, *elbv2.RegisterTargetsOutput)) {
	fake.registerTargetsRequestMutex.Lock()
	defer fake.registerTargetsRequestMutex.Unlock()
	fake.RegisterTargetsRequestStub = stub
}

func (fake *FakeELBV2API) RegisterTargetsRequestArgsForCall(i int) *elbv2.RegisterTargetsInput {
	fake.registerTargetsRequestMutex.RLock()
	defer fake.registerTargetsRequestMutex.RUnlock()
	argsForCall := fake.registerTargetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RegisterTargetsRequestReturns(result1 *request.Request, result2 *elbv2.RegisterTargetsOutput) {
	fake.registerTargetsRequestMutex.Lock()
	defer fake.registerTargetsRequestMutex.Unlock()
	fake.RegisterTargetsRequestStub = nil
	fake.registerTargetsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.RegisterTargetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.RegisterTargetsOutput) {
	fake.registerTargetsRequestMutex.Lock()
	defer fake.registerTargetsRequestMutex.Unlock()
	fake.RegisterTargetsRequestStub = nil
	if fake.registerTargetsRequestReturnsOnCall == nil {
		fake.registerTargetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.RegisterTargetsOutput
		})
	}
	fake.registerTargetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.RegisterTargetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargetsWithContext(arg1 aws.Context, arg2 *elbv2.RegisterTargetsInput, arg3 ...request.Option) (*elbv2.RegisterTargetsOutput, error) {
	fake.registerTargetsWithContextMutex.Lock()
	ret, specificReturn := fake.registerTargetsWithContextReturnsOnCall[len(fake.registerTargetsWithContextArgsForCall)]
	fake.registerTargetsWithContextArgsForCall = append(fake.registerTargetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.RegisterTargetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterTargetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerTargetsWithContextMutex.Unlock()
	if fake.RegisterTargetsWithContextStub != nil {
		return fake.RegisterTargetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTargetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RegisterTargetsWithContextCallCount() int {
	fake.registerTargetsWithContextMutex.RLock()
	defer fake.registerTargetsWithContextMutex.RUnlock()
	return len(fake.registerTargetsWithContextArgsForCall)
}

func (fake *FakeELBV2API) RegisterTargetsWithContextCalls(stub func(aws.Context, *elbv2.RegisterTargetsInput, ...request.Option) (*elbv2.RegisterTargetsOutput, error)) {
	fake.registerTargetsWithContextMutex.Lock()
	defer fake.registerTargetsWithContextMutex.Unlock()
	fake.RegisterTargetsWithContextStub = stub
}

func (fake *FakeELBV2API) RegisterTargetsWithContextArgsForCall(i int) (aws.Context, *elbv2.RegisterTargetsInput, []request.Option) {
	fake.registerTargetsWithContextMutex.RLock()
	defer fake.registerTargetsWithContextMutex.RUnlock()
	argsForCall := fake.registerTargetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) RegisterTargetsWithContextReturns(result1 *elbv2.RegisterTargetsOutput, result2 error) {
	fake.registerTargetsWithContextMutex.Lock()
	defer fake.registerTargetsWithContextMutex.Unlock()
	fake.RegisterTargetsWithContextStub = nil
	fake.registerTargetsWithContextReturns = struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RegisterTargetsWithContextReturnsOnCall(i int, result1 *elbv2.RegisterTargetsOutput, result2 error) {
	fake.registerTargetsWithContextMutex.Lock()
	defer fake.registerTargetsWithContextMutex.Unlock()
	fake.RegisterTargetsWithContextStub = nil
	if fake.registerTargetsWithContextReturnsOnCall == nil {
		fake.registerTargetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RegisterTargetsOutput
			result2 error
		})
	}
	fake.registerTargetsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.RegisterTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificates(arg1 *elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error) {
	fake.removeListenerCertificatesMutex.Lock()
	ret, specificReturn := fake.removeListenerCertificatesReturnsOnCall[len(fake.removeListenerCertificatesArgsForCall)]
	fake.removeListenerCertificatesArgsForCall = append(fake.removeListenerCertificatesArgsForCall, struct {
		arg1 *elbv2.RemoveListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("RemoveListenerCertificates", []interface{}{arg1})
	fake.removeListenerCertificatesMutex.Unlock()
	if fake.RemoveListenerCertificatesStub != nil {
		return fake.RemoveListenerCertificatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeListenerCertificatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveListenerCertificatesCallCount() int {
	fake.removeListenerCertificatesMutex.RLock()
	defer fake.removeListenerCertificatesMutex.RUnlock()
	return len(fake.removeListenerCertificatesArgsForCall)
}

func (fake *FakeELBV2API) RemoveListenerCertificatesCalls(stub func(*elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error)) {
	fake.removeListenerCertificatesMutex.Lock()
	defer fake.removeListenerCertificatesMutex.Unlock()
	fake.RemoveListenerCertificatesStub = stub
}

func (fake *FakeELBV2API) RemoveListenerCertificatesArgsForCall(i int) *elbv2.RemoveListenerCertificatesInput {
	fake.removeListenerCertificatesMutex.RLock()
	defer fake.removeListenerCertificatesMutex.RUnlock()
	argsForCall := fake.removeListenerCertificatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RemoveListenerCertificatesReturns(result1 *elbv2.RemoveListenerCertificatesOutput, result2 error) {
	fake.removeListenerCertificatesMutex.Lock()
	defer fake.removeListenerCertificatesMutex.Unlock()
	fake.RemoveListenerCertificatesStub = nil
	fake.removeListenerCertificatesReturns = struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificatesReturnsOnCall(i int, result1 *elbv2.RemoveListenerCertificatesOutput, result2 error) {
	fake.removeListenerCertificatesMutex.Lock()
	defer fake.removeListenerCertificatesMutex.Unlock()
	fake.RemoveListenerCertificatesStub = nil
	if fake.removeListenerCertificatesReturnsOnCall == nil {
		fake.removeListenerCertificatesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RemoveListenerCertificatesOutput
			result2 error
		})
	}
	fake.removeListenerCertificatesReturnsOnCall[i] = struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequest(arg1 *elbv2.RemoveListenerCertificatesInput) (*request.Request, *elbv2.RemoveListenerCertificatesOutput) {
	fake.removeListenerCertificatesRequestMutex.Lock()
	ret, specificReturn := fake.removeListenerCertificatesRequestReturnsOnCall[len(fake.removeListenerCertificatesRequestArgsForCall)]
	fake.removeListenerCertificatesRequestArgsForCall = append(fake.removeListenerCertificatesRequestArgsForCall, struct {
		arg1 *elbv2.RemoveListenerCertificatesInput
	}{arg1})
	fake.recordInvocation("RemoveListenerCertificatesRequest", []interface{}{arg1})
	fake.removeListenerCertificatesRequestMutex.Unlock()
	if fake.RemoveListenerCertificatesRequestStub != nil {
		return fake.RemoveListenerCertificatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeListenerCertificatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequestCallCount() int {
	fake.removeListenerCertificatesRequestMutex.RLock()
	defer fake.removeListenerCertificatesRequestMutex.RUnlock()
	return len(fake.removeListenerCertificatesRequestArgsForCall)
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequestCalls(stub func(*elbv2.RemoveListenerCertificatesInput) (*request.Request, *elbv2.RemoveListenerCertificatesOutput)) {
	fake.removeListenerCertificatesRequestMutex.Lock()
	defer fake.removeListenerCertificatesRequestMutex.Unlock()
	fake.RemoveListenerCertificatesRequestStub = stub
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequestArgsForCall(i int) *elbv2.RemoveListenerCertificatesInput {
	fake.removeListenerCertificatesRequestMutex.RLock()
	defer fake.removeListenerCertificatesRequestMutex.RUnlock()
	argsForCall := fake.removeListenerCertificatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequestReturns(result1 *request.Request, result2 *elbv2.RemoveListenerCertificatesOutput) {
	fake.removeListenerCertificatesRequestMutex.Lock()
	defer fake.removeListenerCertificatesRequestMutex.Unlock()
	fake.RemoveListenerCertificatesRequestStub = nil
	fake.removeListenerCertificatesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.RemoveListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.RemoveListenerCertificatesOutput) {
	fake.removeListenerCertificatesRequestMutex.Lock()
	defer fake.removeListenerCertificatesRequestMutex.Unlock()
	fake.RemoveListenerCertificatesRequestStub = nil
	if fake.removeListenerCertificatesRequestReturnsOnCall == nil {
		fake.removeListenerCertificatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.RemoveListenerCertificatesOutput
		})
	}
	fake.removeListenerCertificatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.RemoveListenerCertificatesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContext(arg1 aws.Context, arg2 *elbv2.RemoveListenerCertificatesInput, arg3 ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error) {
	fake.removeListenerCertificatesWithContextMutex.Lock()
	ret, specificReturn := fake.removeListenerCertificatesWithContextReturnsOnCall[len(fake.removeListenerCertificatesWithContextArgsForCall)]
	fake.removeListenerCertificatesWithContextArgsForCall = append(fake.removeListenerCertificatesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.RemoveListenerCertificatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveListenerCertificatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeListenerCertificatesWithContextMutex.Unlock()
	if fake.RemoveListenerCertificatesWithContextStub != nil {
		return fake.RemoveListenerCertificatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeListenerCertificatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContextCallCount() int {
	fake.removeListenerCertificatesWithContextMutex.RLock()
	defer fake.removeListenerCertificatesWithContextMutex.RUnlock()
	return len(fake.removeListenerCertificatesWithContextArgsForCall)
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContextCalls(stub func(aws.Context, *elbv2.RemoveListenerCertificatesInput, ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error)) {
	fake.removeListenerCertificatesWithContextMutex.Lock()
	defer fake.removeListenerCertificatesWithContextMutex.Unlock()
	fake.RemoveListenerCertificatesWithContextStub = stub
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContextArgsForCall(i int) (aws.Context, *elbv2.RemoveListenerCertificatesInput, []request.Option) {
	fake.removeListenerCertificatesWithContextMutex.RLock()
	defer fake.removeListenerCertificatesWithContextMutex.RUnlock()
	argsForCall := fake.removeListenerCertificatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContextReturns(result1 *elbv2.RemoveListenerCertificatesOutput, result2 error) {
	fake.removeListenerCertificatesWithContextMutex.Lock()
	defer fake.removeListenerCertificatesWithContextMutex.Unlock()
	fake.RemoveListenerCertificatesWithContextStub = nil
	fake.removeListenerCertificatesWithContextReturns = struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveListenerCertificatesWithContextReturnsOnCall(i int, result1 *elbv2.RemoveListenerCertificatesOutput, result2 error) {
	fake.removeListenerCertificatesWithContextMutex.Lock()
	defer fake.removeListenerCertificatesWithContextMutex.Unlock()
	fake.RemoveListenerCertificatesWithContextStub = nil
	if fake.removeListenerCertificatesWithContextReturnsOnCall == nil {
		fake.removeListenerCertificatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RemoveListenerCertificatesOutput
			result2 error
		})
	}
	fake.removeListenerCertificatesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.RemoveListenerCertificatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTags(arg1 *elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error) {
	fake.removeTagsMutex.Lock()
	ret, specificReturn := fake.removeTagsReturnsOnCall[len(fake.removeTagsArgsForCall)]
	fake.removeTagsArgsForCall = append(fake.removeTagsArgsForCall, struct {
		arg1 *elbv2.RemoveTagsInput
	}{arg1})
	fake.recordInvocation("RemoveTags", []interface{}{arg1})
	fake.removeTagsMutex.Unlock()
	if fake.RemoveTagsStub != nil {
		return fake.RemoveTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveTagsCallCount() int {
	fake.removeTagsMutex.RLock()
	defer fake.removeTagsMutex.RUnlock()
	return len(fake.removeTagsArgsForCall)
}

func (fake *FakeELBV2API) RemoveTagsCalls(stub func(*elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error)) {
	fake.removeTagsMutex.Lock()
	defer fake.removeTagsMutex.Unlock()
	fake.RemoveTagsStub = stub
}

func (fake *FakeELBV2API) RemoveTagsArgsForCall(i int) *elbv2.RemoveTagsInput {
	fake.removeTagsMutex.RLock()
	defer fake.removeTagsMutex.RUnlock()
	argsForCall := fake.removeTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RemoveTagsReturns(result1 *elbv2.RemoveTagsOutput, result2 error) {
	fake.removeTagsMutex.Lock()
	defer fake.removeTagsMutex.Unlock()
	fake.RemoveTagsStub = nil
	fake.removeTagsReturns = struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTagsReturnsOnCall(i int, result1 *elbv2.RemoveTagsOutput, result2 error) {
	fake.removeTagsMutex.Lock()
	defer fake.removeTagsMutex.Unlock()
	fake.RemoveTagsStub = nil
	if fake.removeTagsReturnsOnCall == nil {
		fake.removeTagsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RemoveTagsOutput
			result2 error
		})
	}
	fake.removeTagsReturnsOnCall[i] = struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTagsRequest(arg1 *elbv2.RemoveTagsInput) (*request.Request, *elbv2.RemoveTagsOutput) {
	fake.removeTagsRequestMutex.Lock()
	ret, specificReturn := fake.removeTagsRequestReturnsOnCall[len(fake.removeTagsRequestArgsForCall)]
	fake.removeTagsRequestArgsForCall = append(fake.removeTagsRequestArgsForCall, struct {
		arg1 *elbv2.RemoveTagsInput
	}{arg1})
	fake.recordInvocation("RemoveTagsRequest", []interface{}{arg1})
	fake.removeTagsRequestMutex.Unlock()
	if fake.RemoveTagsRequestStub != nil {
		return fake.RemoveTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveTagsRequestCallCount() int {
	fake.removeTagsRequestMutex.RLock()
	defer fake.removeTagsRequestMutex.RUnlock()
	return len(fake.removeTagsRequestArgsForCall)
}

func (fake *FakeELBV2API) RemoveTagsRequestCalls(stub func(*elbv2.RemoveTagsInput) (*request.Request, *elbv2.RemoveTagsOutput)) {
	fake.removeTagsRequestMutex.Lock()
	defer fake.removeTagsRequestMutex.Unlock()
	fake.RemoveTagsRequestStub = stub
}

func (fake *FakeELBV2API) RemoveTagsRequestArgsForCall(i int) *elbv2.RemoveTagsInput {
	fake.removeTagsRequestMutex.RLock()
	defer fake.removeTagsRequestMutex.RUnlock()
	argsForCall := fake.removeTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) RemoveTagsRequestReturns(result1 *request.Request, result2 *elbv2.RemoveTagsOutput) {
	fake.removeTagsRequestMutex.Lock()
	defer fake.removeTagsRequestMutex.Unlock()
	fake.RemoveTagsRequestStub = nil
	fake.removeTagsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.RemoveTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.RemoveTagsOutput) {
	fake.removeTagsRequestMutex.Lock()
	defer fake.removeTagsRequestMutex.Unlock()
	fake.RemoveTagsRequestStub = nil
	if fake.removeTagsRequestReturnsOnCall == nil {
		fake.removeTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.RemoveTagsOutput
		})
	}
	fake.removeTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.RemoveTagsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTagsWithContext(arg1 aws.Context, arg2 *elbv2.RemoveTagsInput, arg3 ...request.Option) (*elbv2.RemoveTagsOutput, error) {
	fake.removeTagsWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsWithContextReturnsOnCall[len(fake.removeTagsWithContextArgsForCall)]
	fake.removeTagsWithContextArgsForCall = append(fake.removeTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.RemoveTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsWithContextMutex.Unlock()
	if fake.RemoveTagsWithContextStub != nil {
		return fake.RemoveTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) RemoveTagsWithContextCallCount() int {
	fake.removeTagsWithContextMutex.RLock()
	defer fake.removeTagsWithContextMutex.RUnlock()
	return len(fake.removeTagsWithContextArgsForCall)
}

func (fake *FakeELBV2API) RemoveTagsWithContextCalls(stub func(aws.Context, *elbv2.RemoveTagsInput, ...request.Option) (*elbv2.RemoveTagsOutput, error)) {
	fake.removeTagsWithContextMutex.Lock()
	defer fake.removeTagsWithContextMutex.Unlock()
	fake.RemoveTagsWithContextStub = stub
}

func (fake *FakeELBV2API) RemoveTagsWithContextArgsForCall(i int) (aws.Context, *elbv2.RemoveTagsInput, []request.Option) {
	fake.removeTagsWithContextMutex.RLock()
	defer fake.removeTagsWithContextMutex.RUnlock()
	argsForCall := fake.removeTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) RemoveTagsWithContextReturns(result1 *elbv2.RemoveTagsOutput, result2 error) {
	fake.removeTagsWithContextMutex.Lock()
	defer fake.removeTagsWithContextMutex.Unlock()
	fake.RemoveTagsWithContextStub = nil
	fake.removeTagsWithContextReturns = struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) RemoveTagsWithContextReturnsOnCall(i int, result1 *elbv2.RemoveTagsOutput, result2 error) {
	fake.removeTagsWithContextMutex.Lock()
	defer fake.removeTagsWithContextMutex.Unlock()
	fake.RemoveTagsWithContextStub = nil
	if fake.removeTagsWithContextReturnsOnCall == nil {
		fake.removeTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.RemoveTagsOutput
			result2 error
		})
	}
	fake.removeTagsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.RemoveTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressType(arg1 *elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error) {
	fake.setIpAddressTypeMutex.Lock()
	ret, specificReturn := fake.setIpAddressTypeReturnsOnCall[len(fake.setIpAddressTypeArgsForCall)]
	fake.setIpAddressTypeArgsForCall = append(fake.setIpAddressTypeArgsForCall, struct {
		arg1 *elbv2.SetIpAddressTypeInput
	}{arg1})
	fake.recordInvocation("SetIpAddressType", []interface{}{arg1})
	fake.setIpAddressTypeMutex.Unlock()
	if fake.SetIpAddressTypeStub != nil {
		return fake.SetIpAddressTypeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setIpAddressTypeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetIpAddressTypeCallCount() int {
	fake.setIpAddressTypeMutex.RLock()
	defer fake.setIpAddressTypeMutex.RUnlock()
	return len(fake.setIpAddressTypeArgsForCall)
}

func (fake *FakeELBV2API) SetIpAddressTypeCalls(stub func(*elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error)) {
	fake.setIpAddressTypeMutex.Lock()
	defer fake.setIpAddressTypeMutex.Unlock()
	fake.SetIpAddressTypeStub = stub
}

func (fake *FakeELBV2API) SetIpAddressTypeArgsForCall(i int) *elbv2.SetIpAddressTypeInput {
	fake.setIpAddressTypeMutex.RLock()
	defer fake.setIpAddressTypeMutex.RUnlock()
	argsForCall := fake.setIpAddressTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetIpAddressTypeReturns(result1 *elbv2.SetIpAddressTypeOutput, result2 error) {
	fake.setIpAddressTypeMutex.Lock()
	defer fake.setIpAddressTypeMutex.Unlock()
	fake.SetIpAddressTypeStub = nil
	fake.setIpAddressTypeReturns = struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressTypeReturnsOnCall(i int, result1 *elbv2.SetIpAddressTypeOutput, result2 error) {
	fake.setIpAddressTypeMutex.Lock()
	defer fake.setIpAddressTypeMutex.Unlock()
	fake.SetIpAddressTypeStub = nil
	if fake.setIpAddressTypeReturnsOnCall == nil {
		fake.setIpAddressTypeReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetIpAddressTypeOutput
			result2 error
		})
	}
	fake.setIpAddressTypeReturnsOnCall[i] = struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressTypeRequest(arg1 *elbv2.SetIpAddressTypeInput) (*request.Request, *elbv2.SetIpAddressTypeOutput) {
	fake.setIpAddressTypeRequestMutex.Lock()
	ret, specificReturn := fake.setIpAddressTypeRequestReturnsOnCall[len(fake.setIpAddressTypeRequestArgsForCall)]
	fake.setIpAddressTypeRequestArgsForCall = append(fake.setIpAddressTypeRequestArgsForCall, struct {
		arg1 *elbv2.SetIpAddressTypeInput
	}{arg1})
	fake.recordInvocation("SetIpAddressTypeRequest", []interface{}{arg1})
	fake.setIpAddressTypeRequestMutex.Unlock()
	if fake.SetIpAddressTypeRequestStub != nil {
		return fake.SetIpAddressTypeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setIpAddressTypeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetIpAddressTypeRequestCallCount() int {
	fake.setIpAddressTypeRequestMutex.RLock()
	defer fake.setIpAddressTypeRequestMutex.RUnlock()
	return len(fake.setIpAddressTypeRequestArgsForCall)
}

func (fake *FakeELBV2API) SetIpAddressTypeRequestCalls(stub func(*elbv2.SetIpAddressTypeInput) (*request.Request, *elbv2.SetIpAddressTypeOutput)) {
	fake.setIpAddressTypeRequestMutex.Lock()
	defer fake.setIpAddressTypeRequestMutex.Unlock()
	fake.SetIpAddressTypeRequestStub = stub
}

func (fake *FakeELBV2API) SetIpAddressTypeRequestArgsForCall(i int) *elbv2.SetIpAddressTypeInput {
	fake.setIpAddressTypeRequestMutex.RLock()
	defer fake.setIpAddressTypeRequestMutex.RUnlock()
	argsForCall := fake.setIpAddressTypeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetIpAddressTypeRequestReturns(result1 *request.Request, result2 *elbv2.SetIpAddressTypeOutput) {
	fake.setIpAddressTypeRequestMutex.Lock()
	defer fake.setIpAddressTypeRequestMutex.Unlock()
	fake.SetIpAddressTypeRequestStub = nil
	fake.setIpAddressTypeRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.SetIpAddressTypeOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressTypeRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.SetIpAddressTypeOutput) {
	fake.setIpAddressTypeRequestMutex.Lock()
	defer fake.setIpAddressTypeRequestMutex.Unlock()
	fake.SetIpAddressTypeRequestStub = nil
	if fake.setIpAddressTypeRequestReturnsOnCall == nil {
		fake.setIpAddressTypeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.SetIpAddressTypeOutput
		})
	}
	fake.setIpAddressTypeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.SetIpAddressTypeOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContext(arg1 aws.Context, arg2 *elbv2.SetIpAddressTypeInput, arg3 ...request.Option) (*elbv2.SetIpAddressTypeOutput, error) {
	fake.setIpAddressTypeWithContextMutex.Lock()
	ret, specificReturn := fake.setIpAddressTypeWithContextReturnsOnCall[len(fake.setIpAddressTypeWithContextArgsForCall)]
	fake.setIpAddressTypeWithContextArgsForCall = append(fake.setIpAddressTypeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.SetIpAddressTypeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetIpAddressTypeWithContext", []interface{}{arg1, arg2, arg3})
	fake.setIpAddressTypeWithContextMutex.Unlock()
	if fake.SetIpAddressTypeWithContextStub != nil {
		return fake.SetIpAddressTypeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setIpAddressTypeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContextCallCount() int {
	fake.setIpAddressTypeWithContextMutex.RLock()
	defer fake.setIpAddressTypeWithContextMutex.RUnlock()
	return len(fake.setIpAddressTypeWithContextArgsForCall)
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContextCalls(stub func(aws.Context, *elbv2.SetIpAddressTypeInput, ...request.Option) (*elbv2.SetIpAddressTypeOutput, error)) {
	fake.setIpAddressTypeWithContextMutex.Lock()
	defer fake.setIpAddressTypeWithContextMutex.Unlock()
	fake.SetIpAddressTypeWithContextStub = stub
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContextArgsForCall(i int) (aws.Context, *elbv2.SetIpAddressTypeInput, []request.Option) {
	fake.setIpAddressTypeWithContextMutex.RLock()
	defer fake.setIpAddressTypeWithContextMutex.RUnlock()
	argsForCall := fake.setIpAddressTypeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContextReturns(result1 *elbv2.SetIpAddressTypeOutput, result2 error) {
	fake.setIpAddressTypeWithContextMutex.Lock()
	defer fake.setIpAddressTypeWithContextMutex.Unlock()
	fake.SetIpAddressTypeWithContextStub = nil
	fake.setIpAddressTypeWithContextReturns = struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetIpAddressTypeWithContextReturnsOnCall(i int, result1 *elbv2.SetIpAddressTypeOutput, result2 error) {
	fake.setIpAddressTypeWithContextMutex.Lock()
	defer fake.setIpAddressTypeWithContextMutex.Unlock()
	fake.SetIpAddressTypeWithContextStub = nil
	if fake.setIpAddressTypeWithContextReturnsOnCall == nil {
		fake.setIpAddressTypeWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetIpAddressTypeOutput
			result2 error
		})
	}
	fake.setIpAddressTypeWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.SetIpAddressTypeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePriorities(arg1 *elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error) {
	fake.setRulePrioritiesMutex.Lock()
	ret, specificReturn := fake.setRulePrioritiesReturnsOnCall[len(fake.setRulePrioritiesArgsForCall)]
	fake.setRulePrioritiesArgsForCall = append(fake.setRulePrioritiesArgsForCall, struct {
		arg1 *elbv2.SetRulePrioritiesInput
	}{arg1})
	fake.recordInvocation("SetRulePriorities", []interface{}{arg1})
	fake.setRulePrioritiesMutex.Unlock()
	if fake.SetRulePrioritiesStub != nil {
		return fake.SetRulePrioritiesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setRulePrioritiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetRulePrioritiesCallCount() int {
	fake.setRulePrioritiesMutex.RLock()
	defer fake.setRulePrioritiesMutex.RUnlock()
	return len(fake.setRulePrioritiesArgsForCall)
}

func (fake *FakeELBV2API) SetRulePrioritiesCalls(stub func(*elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error)) {
	fake.setRulePrioritiesMutex.Lock()
	defer fake.setRulePrioritiesMutex.Unlock()
	fake.SetRulePrioritiesStub = stub
}

func (fake *FakeELBV2API) SetRulePrioritiesArgsForCall(i int) *elbv2.SetRulePrioritiesInput {
	fake.setRulePrioritiesMutex.RLock()
	defer fake.setRulePrioritiesMutex.RUnlock()
	argsForCall := fake.setRulePrioritiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetRulePrioritiesReturns(result1 *elbv2.SetRulePrioritiesOutput, result2 error) {
	fake.setRulePrioritiesMutex.Lock()
	defer fake.setRulePrioritiesMutex.Unlock()
	fake.SetRulePrioritiesStub = nil
	fake.setRulePrioritiesReturns = struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePrioritiesReturnsOnCall(i int, result1 *elbv2.SetRulePrioritiesOutput, result2 error) {
	fake.setRulePrioritiesMutex.Lock()
	defer fake.setRulePrioritiesMutex.Unlock()
	fake.SetRulePrioritiesStub = nil
	if fake.setRulePrioritiesReturnsOnCall == nil {
		fake.setRulePrioritiesReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetRulePrioritiesOutput
			result2 error
		})
	}
	fake.setRulePrioritiesReturnsOnCall[i] = struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePrioritiesRequest(arg1 *elbv2.SetRulePrioritiesInput) (*request.Request, *elbv2.SetRulePrioritiesOutput) {
	fake.setRulePrioritiesRequestMutex.Lock()
	ret, specificReturn := fake.setRulePrioritiesRequestReturnsOnCall[len(fake.setRulePrioritiesRequestArgsForCall)]
	fake.setRulePrioritiesRequestArgsForCall = append(fake.setRulePrioritiesRequestArgsForCall, struct {
		arg1 *elbv2.SetRulePrioritiesInput
	}{arg1})
	fake.recordInvocation("SetRulePrioritiesRequest", []interface{}{arg1})
	fake.setRulePrioritiesRequestMutex.Unlock()
	if fake.SetRulePrioritiesRequestStub != nil {
		return fake.SetRulePrioritiesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setRulePrioritiesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetRulePrioritiesRequestCallCount() int {
	fake.setRulePrioritiesRequestMutex.RLock()
	defer fake.setRulePrioritiesRequestMutex.RUnlock()
	return len(fake.setRulePrioritiesRequestArgsForCall)
}

func (fake *FakeELBV2API) SetRulePrioritiesRequestCalls(stub func(*elbv2.SetRulePrioritiesInput) (*request.Request, *elbv2.SetRulePrioritiesOutput)) {
	fake.setRulePrioritiesRequestMutex.Lock()
	defer fake.setRulePrioritiesRequestMutex.Unlock()
	fake.SetRulePrioritiesRequestStub = stub
}

func (fake *FakeELBV2API) SetRulePrioritiesRequestArgsForCall(i int) *elbv2.SetRulePrioritiesInput {
	fake.setRulePrioritiesRequestMutex.RLock()
	defer fake.setRulePrioritiesRequestMutex.RUnlock()
	argsForCall := fake.setRulePrioritiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetRulePrioritiesRequestReturns(result1 *request.Request, result2 *elbv2.SetRulePrioritiesOutput) {
	fake.setRulePrioritiesRequestMutex.Lock()
	defer fake.setRulePrioritiesRequestMutex.Unlock()
	fake.SetRulePrioritiesRequestStub = nil
	fake.setRulePrioritiesRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.SetRulePrioritiesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePrioritiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.SetRulePrioritiesOutput) {
	fake.setRulePrioritiesRequestMutex.Lock()
	defer fake.setRulePrioritiesRequestMutex.Unlock()
	fake.SetRulePrioritiesRequestStub = nil
	if fake.setRulePrioritiesRequestReturnsOnCall == nil {
		fake.setRulePrioritiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.SetRulePrioritiesOutput
		})
	}
	fake.setRulePrioritiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.SetRulePrioritiesOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContext(arg1 aws.Context, arg2 *elbv2.SetRulePrioritiesInput, arg3 ...request.Option) (*elbv2.SetRulePrioritiesOutput, error) {
	fake.setRulePrioritiesWithContextMutex.Lock()
	ret, specificReturn := fake.setRulePrioritiesWithContextReturnsOnCall[len(fake.setRulePrioritiesWithContextArgsForCall)]
	fake.setRulePrioritiesWithContextArgsForCall = append(fake.setRulePrioritiesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.SetRulePrioritiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetRulePrioritiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.setRulePrioritiesWithContextMutex.Unlock()
	if fake.SetRulePrioritiesWithContextStub != nil {
		return fake.SetRulePrioritiesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setRulePrioritiesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContextCallCount() int {
	fake.setRulePrioritiesWithContextMutex.RLock()
	defer fake.setRulePrioritiesWithContextMutex.RUnlock()
	return len(fake.setRulePrioritiesWithContextArgsForCall)
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContextCalls(stub func(aws.Context, *elbv2.SetRulePrioritiesInput, ...request.Option) (*elbv2.SetRulePrioritiesOutput, error)) {
	fake.setRulePrioritiesWithContextMutex.Lock()
	defer fake.setRulePrioritiesWithContextMutex.Unlock()
	fake.SetRulePrioritiesWithContextStub = stub
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContextArgsForCall(i int) (aws.Context, *elbv2.SetRulePrioritiesInput, []request.Option) {
	fake.setRulePrioritiesWithContextMutex.RLock()
	defer fake.setRulePrioritiesWithContextMutex.RUnlock()
	argsForCall := fake.setRulePrioritiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContextReturns(result1 *elbv2.SetRulePrioritiesOutput, result2 error) {
	fake.setRulePrioritiesWithContextMutex.Lock()
	defer fake.setRulePrioritiesWithContextMutex.Unlock()
	fake.SetRulePrioritiesWithContextStub = nil
	fake.setRulePrioritiesWithContextReturns = struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetRulePrioritiesWithContextReturnsOnCall(i int, result1 *elbv2.SetRulePrioritiesOutput, result2 error) {
	fake.setRulePrioritiesWithContextMutex.Lock()
	defer fake.setRulePrioritiesWithContextMutex.Unlock()
	fake.SetRulePrioritiesWithContextStub = nil
	if fake.setRulePrioritiesWithContextReturnsOnCall == nil {
		fake.setRulePrioritiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetRulePrioritiesOutput
			result2 error
		})
	}
	fake.setRulePrioritiesWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.SetRulePrioritiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroups(arg1 *elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error) {
	fake.setSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.setSecurityGroupsReturnsOnCall[len(fake.setSecurityGroupsArgsForCall)]
	fake.setSecurityGroupsArgsForCall = append(fake.setSecurityGroupsArgsForCall, struct {
		arg1 *elbv2.SetSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("SetSecurityGroups", []interface{}{arg1})
	fake.setSecurityGroupsMutex.Unlock()
	if fake.SetSecurityGroupsStub != nil {
		return fake.SetSecurityGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSecurityGroupsCallCount() int {
	fake.setSecurityGroupsMutex.RLock()
	defer fake.setSecurityGroupsMutex.RUnlock()
	return len(fake.setSecurityGroupsArgsForCall)
}

func (fake *FakeELBV2API) SetSecurityGroupsCalls(stub func(*elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error)) {
	fake.setSecurityGroupsMutex.Lock()
	defer fake.setSecurityGroupsMutex.Unlock()
	fake.SetSecurityGroupsStub = stub
}

func (fake *FakeELBV2API) SetSecurityGroupsArgsForCall(i int) *elbv2.SetSecurityGroupsInput {
	fake.setSecurityGroupsMutex.RLock()
	defer fake.setSecurityGroupsMutex.RUnlock()
	argsForCall := fake.setSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetSecurityGroupsReturns(result1 *elbv2.SetSecurityGroupsOutput, result2 error) {
	fake.setSecurityGroupsMutex.Lock()
	defer fake.setSecurityGroupsMutex.Unlock()
	fake.SetSecurityGroupsStub = nil
	fake.setSecurityGroupsReturns = struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroupsReturnsOnCall(i int, result1 *elbv2.SetSecurityGroupsOutput, result2 error) {
	fake.setSecurityGroupsMutex.Lock()
	defer fake.setSecurityGroupsMutex.Unlock()
	fake.SetSecurityGroupsStub = nil
	if fake.setSecurityGroupsReturnsOnCall == nil {
		fake.setSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetSecurityGroupsOutput
			result2 error
		})
	}
	fake.setSecurityGroupsReturnsOnCall[i] = struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroupsRequest(arg1 *elbv2.SetSecurityGroupsInput) (*request.Request, *elbv2.SetSecurityGroupsOutput) {
	fake.setSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.setSecurityGroupsRequestReturnsOnCall[len(fake.setSecurityGroupsRequestArgsForCall)]
	fake.setSecurityGroupsRequestArgsForCall = append(fake.setSecurityGroupsRequestArgsForCall, struct {
		arg1 *elbv2.SetSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("SetSecurityGroupsRequest", []interface{}{arg1})
	fake.setSecurityGroupsRequestMutex.Unlock()
	if fake.SetSecurityGroupsRequestStub != nil {
		return fake.SetSecurityGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSecurityGroupsRequestCallCount() int {
	fake.setSecurityGroupsRequestMutex.RLock()
	defer fake.setSecurityGroupsRequestMutex.RUnlock()
	return len(fake.setSecurityGroupsRequestArgsForCall)
}

func (fake *FakeELBV2API) SetSecurityGroupsRequestCalls(stub func(*elbv2.SetSecurityGroupsInput) (*request.Request, *elbv2.SetSecurityGroupsOutput)) {
	fake.setSecurityGroupsRequestMutex.Lock()
	defer fake.setSecurityGroupsRequestMutex.Unlock()
	fake.SetSecurityGroupsRequestStub = stub
}

func (fake *FakeELBV2API) SetSecurityGroupsRequestArgsForCall(i int) *elbv2.SetSecurityGroupsInput {
	fake.setSecurityGroupsRequestMutex.RLock()
	defer fake.setSecurityGroupsRequestMutex.RUnlock()
	argsForCall := fake.setSecurityGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetSecurityGroupsRequestReturns(result1 *request.Request, result2 *elbv2.SetSecurityGroupsOutput) {
	fake.setSecurityGroupsRequestMutex.Lock()
	defer fake.setSecurityGroupsRequestMutex.Unlock()
	fake.SetSecurityGroupsRequestStub = nil
	fake.setSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.SetSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.SetSecurityGroupsOutput) {
	fake.setSecurityGroupsRequestMutex.Lock()
	defer fake.setSecurityGroupsRequestMutex.Unlock()
	fake.SetSecurityGroupsRequestStub = nil
	if fake.setSecurityGroupsRequestReturnsOnCall == nil {
		fake.setSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.SetSecurityGroupsOutput
		})
	}
	fake.setSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.SetSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContext(arg1 aws.Context, arg2 *elbv2.SetSecurityGroupsInput, arg3 ...request.Option) (*elbv2.SetSecurityGroupsOutput, error) {
	fake.setSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.setSecurityGroupsWithContextReturnsOnCall[len(fake.setSecurityGroupsWithContextArgsForCall)]
	fake.setSecurityGroupsWithContextArgsForCall = append(fake.setSecurityGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.SetSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.setSecurityGroupsWithContextMutex.Unlock()
	if fake.SetSecurityGroupsWithContextStub != nil {
		return fake.SetSecurityGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSecurityGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContextCallCount() int {
	fake.setSecurityGroupsWithContextMutex.RLock()
	defer fake.setSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.setSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContextCalls(stub func(aws.Context, *elbv2.SetSecurityGroupsInput, ...request.Option) (*elbv2.SetSecurityGroupsOutput, error)) {
	fake.setSecurityGroupsWithContextMutex.Lock()
	defer fake.setSecurityGroupsWithContextMutex.Unlock()
	fake.SetSecurityGroupsWithContextStub = stub
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContextArgsForCall(i int) (aws.Context, *elbv2.SetSecurityGroupsInput, []request.Option) {
	fake.setSecurityGroupsWithContextMutex.RLock()
	defer fake.setSecurityGroupsWithContextMutex.RUnlock()
	argsForCall := fake.setSecurityGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContextReturns(result1 *elbv2.SetSecurityGroupsOutput, result2 error) {
	fake.setSecurityGroupsWithContextMutex.Lock()
	defer fake.setSecurityGroupsWithContextMutex.Unlock()
	fake.SetSecurityGroupsWithContextStub = nil
	fake.setSecurityGroupsWithContextReturns = struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSecurityGroupsWithContextReturnsOnCall(i int, result1 *elbv2.SetSecurityGroupsOutput, result2 error) {
	fake.setSecurityGroupsWithContextMutex.Lock()
	defer fake.setSecurityGroupsWithContextMutex.Unlock()
	fake.SetSecurityGroupsWithContextStub = nil
	if fake.setSecurityGroupsWithContextReturnsOnCall == nil {
		fake.setSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetSecurityGroupsOutput
			result2 error
		})
	}
	fake.setSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.SetSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnets(arg1 *elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error) {
	fake.setSubnetsMutex.Lock()
	ret, specificReturn := fake.setSubnetsReturnsOnCall[len(fake.setSubnetsArgsForCall)]
	fake.setSubnetsArgsForCall = append(fake.setSubnetsArgsForCall, struct {
		arg1 *elbv2.SetSubnetsInput
	}{arg1})
	fake.recordInvocation("SetSubnets", []interface{}{arg1})
	fake.setSubnetsMutex.Unlock()
	if fake.SetSubnetsStub != nil {
		return fake.SetSubnetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSubnetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSubnetsCallCount() int {
	fake.setSubnetsMutex.RLock()
	defer fake.setSubnetsMutex.RUnlock()
	return len(fake.setSubnetsArgsForCall)
}

func (fake *FakeELBV2API) SetSubnetsCalls(stub func(*elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error)) {
	fake.setSubnetsMutex.Lock()
	defer fake.setSubnetsMutex.Unlock()
	fake.SetSubnetsStub = stub
}

func (fake *FakeELBV2API) SetSubnetsArgsForCall(i int) *elbv2.SetSubnetsInput {
	fake.setSubnetsMutex.RLock()
	defer fake.setSubnetsMutex.RUnlock()
	argsForCall := fake.setSubnetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetSubnetsReturns(result1 *elbv2.SetSubnetsOutput, result2 error) {
	fake.setSubnetsMutex.Lock()
	defer fake.setSubnetsMutex.Unlock()
	fake.SetSubnetsStub = nil
	fake.setSubnetsReturns = struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnetsReturnsOnCall(i int, result1 *elbv2.SetSubnetsOutput, result2 error) {
	fake.setSubnetsMutex.Lock()
	defer fake.setSubnetsMutex.Unlock()
	fake.SetSubnetsStub = nil
	if fake.setSubnetsReturnsOnCall == nil {
		fake.setSubnetsReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetSubnetsOutput
			result2 error
		})
	}
	fake.setSubnetsReturnsOnCall[i] = struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnetsRequest(arg1 *elbv2.SetSubnetsInput) (*request.Request, *elbv2.SetSubnetsOutput) {
	fake.setSubnetsRequestMutex.Lock()
	ret, specificReturn := fake.setSubnetsRequestReturnsOnCall[len(fake.setSubnetsRequestArgsForCall)]
	fake.setSubnetsRequestArgsForCall = append(fake.setSubnetsRequestArgsForCall, struct {
		arg1 *elbv2.SetSubnetsInput
	}{arg1})
	fake.recordInvocation("SetSubnetsRequest", []interface{}{arg1})
	fake.setSubnetsRequestMutex.Unlock()
	if fake.SetSubnetsRequestStub != nil {
		return fake.SetSubnetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSubnetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSubnetsRequestCallCount() int {
	fake.setSubnetsRequestMutex.RLock()
	defer fake.setSubnetsRequestMutex.RUnlock()
	return len(fake.setSubnetsRequestArgsForCall)
}

func (fake *FakeELBV2API) SetSubnetsRequestCalls(stub func(*elbv2.SetSubnetsInput) (*request.Request, *elbv2.SetSubnetsOutput)) {
	fake.setSubnetsRequestMutex.Lock()
	defer fake.setSubnetsRequestMutex.Unlock()
	fake.SetSubnetsRequestStub = stub
}

func (fake *FakeELBV2API) SetSubnetsRequestArgsForCall(i int) *elbv2.SetSubnetsInput {
	fake.setSubnetsRequestMutex.RLock()
	defer fake.setSubnetsRequestMutex.RUnlock()
	argsForCall := fake.setSubnetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) SetSubnetsRequestReturns(result1 *request.Request, result2 *elbv2.SetSubnetsOutput) {
	fake.setSubnetsRequestMutex.Lock()
	defer fake.setSubnetsRequestMutex.Unlock()
	fake.SetSubnetsRequestStub = nil
	fake.setSubnetsRequestReturns = struct {
		result1 *request.Request
		result2 *elbv2.SetSubnetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elbv2.SetSubnetsOutput) {
	fake.setSubnetsRequestMutex.Lock()
	defer fake.setSubnetsRequestMutex.Unlock()
	fake.SetSubnetsRequestStub = nil
	if fake.setSubnetsRequestReturnsOnCall == nil {
		fake.setSubnetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elbv2.SetSubnetsOutput
		})
	}
	fake.setSubnetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elbv2.SetSubnetsOutput
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnetsWithContext(arg1 aws.Context, arg2 *elbv2.SetSubnetsInput, arg3 ...request.Option) (*elbv2.SetSubnetsOutput, error) {
	fake.setSubnetsWithContextMutex.Lock()
	ret, specificReturn := fake.setSubnetsWithContextReturnsOnCall[len(fake.setSubnetsWithContextArgsForCall)]
	fake.setSubnetsWithContextArgsForCall = append(fake.setSubnetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.SetSubnetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetSubnetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.setSubnetsWithContextMutex.Unlock()
	if fake.SetSubnetsWithContextStub != nil {
		return fake.SetSubnetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setSubnetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeELBV2API) SetSubnetsWithContextCallCount() int {
	fake.setSubnetsWithContextMutex.RLock()
	defer fake.setSubnetsWithContextMutex.RUnlock()
	return len(fake.setSubnetsWithContextArgsForCall)
}

func (fake *FakeELBV2API) SetSubnetsWithContextCalls(stub func(aws.Context, *elbv2.SetSubnetsInput, ...request.Option) (*elbv2.SetSubnetsOutput, error)) {
	fake.setSubnetsWithContextMutex.Lock()
	defer fake.setSubnetsWithContextMutex.Unlock()
	fake.SetSubnetsWithContextStub = stub
}

func (fake *FakeELBV2API) SetSubnetsWithContextArgsForCall(i int) (aws.Context, *elbv2.SetSubnetsInput, []request.Option) {
	fake.setSubnetsWithContextMutex.RLock()
	defer fake.setSubnetsWithContextMutex.RUnlock()
	argsForCall := fake.setSubnetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) SetSubnetsWithContextReturns(result1 *elbv2.SetSubnetsOutput, result2 error) {
	fake.setSubnetsWithContextMutex.Lock()
	defer fake.setSubnetsWithContextMutex.Unlock()
	fake.SetSubnetsWithContextStub = nil
	fake.setSubnetsWithContextReturns = struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) SetSubnetsWithContextReturnsOnCall(i int, result1 *elbv2.SetSubnetsOutput, result2 error) {
	fake.setSubnetsWithContextMutex.Lock()
	defer fake.setSubnetsWithContextMutex.Unlock()
	fake.SetSubnetsWithContextStub = nil
	if fake.setSubnetsWithContextReturnsOnCall == nil {
		fake.setSubnetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elbv2.SetSubnetsOutput
			result2 error
		})
	}
	fake.setSubnetsWithContextReturnsOnCall[i] = struct {
		result1 *elbv2.SetSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailable(arg1 *elbv2.DescribeLoadBalancersInput) error {
	fake.waitUntilLoadBalancerAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancerAvailableReturnsOnCall[len(fake.waitUntilLoadBalancerAvailableArgsForCall)]
	fake.waitUntilLoadBalancerAvailableArgsForCall = append(fake.waitUntilLoadBalancerAvailableArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}{arg1})
	fake.recordInvocation("WaitUntilLoadBalancerAvailable", []interface{}{arg1})
	fake.waitUntilLoadBalancerAvailableMutex.Unlock()
	if fake.WaitUntilLoadBalancerAvailableStub != nil {
		return fake.WaitUntilLoadBalancerAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancerAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableCallCount() int {
	fake.waitUntilLoadBalancerAvailableMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableMutex.RUnlock()
	return len(fake.waitUntilLoadBalancerAvailableArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableCalls(stub func(*elbv2.DescribeLoadBalancersInput) error) {
	fake.waitUntilLoadBalancerAvailableMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableArgsForCall(i int) *elbv2.DescribeLoadBalancersInput {
	fake.waitUntilLoadBalancerAvailableMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancerAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableReturns(result1 error) {
	fake.waitUntilLoadBalancerAvailableMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableStub = nil
	fake.waitUntilLoadBalancerAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancerAvailableMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableStub = nil
	if fake.waitUntilLoadBalancerAvailableReturnsOnCall == nil {
		fake.waitUntilLoadBalancerAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancerAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancerAvailableWithContextReturnsOnCall[len(fake.waitUntilLoadBalancerAvailableWithContextArgsForCall)]
	fake.waitUntilLoadBalancerAvailableWithContextArgsForCall = append(fake.waitUntilLoadBalancerAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilLoadBalancerAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilLoadBalancerAvailableWithContextMutex.Unlock()
	if fake.WaitUntilLoadBalancerAvailableWithContextStub != nil {
		return fake.WaitUntilLoadBalancerAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancerAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContextCallCount() int {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilLoadBalancerAvailableWithContextArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error) {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableWithContextStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancersInput, []request.WaiterOption) {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancerAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContextReturns(result1 error) {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableWithContextStub = nil
	fake.waitUntilLoadBalancerAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancerAvailableWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerAvailableWithContextStub = nil
	if fake.waitUntilLoadBalancerAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilLoadBalancerAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancerAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExists(arg1 *elbv2.DescribeLoadBalancersInput) error {
	fake.waitUntilLoadBalancerExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancerExistsReturnsOnCall[len(fake.waitUntilLoadBalancerExistsArgsForCall)]
	fake.waitUntilLoadBalancerExistsArgsForCall = append(fake.waitUntilLoadBalancerExistsArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}{arg1})
	fake.recordInvocation("WaitUntilLoadBalancerExists", []interface{}{arg1})
	fake.waitUntilLoadBalancerExistsMutex.Unlock()
	if fake.WaitUntilLoadBalancerExistsStub != nil {
		return fake.WaitUntilLoadBalancerExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancerExistsReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsCallCount() int {
	fake.waitUntilLoadBalancerExistsMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsMutex.RUnlock()
	return len(fake.waitUntilLoadBalancerExistsArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsCalls(stub func(*elbv2.DescribeLoadBalancersInput) error) {
	fake.waitUntilLoadBalancerExistsMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsArgsForCall(i int) *elbv2.DescribeLoadBalancersInput {
	fake.waitUntilLoadBalancerExistsMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancerExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsReturns(result1 error) {
	fake.waitUntilLoadBalancerExistsMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsStub = nil
	fake.waitUntilLoadBalancerExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancerExistsMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsStub = nil
	if fake.waitUntilLoadBalancerExistsReturnsOnCall == nil {
		fake.waitUntilLoadBalancerExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancerExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilLoadBalancerExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancerExistsWithContextReturnsOnCall[len(fake.waitUntilLoadBalancerExistsWithContextArgsForCall)]
	fake.waitUntilLoadBalancerExistsWithContextArgsForCall = append(fake.waitUntilLoadBalancerExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilLoadBalancerExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilLoadBalancerExistsWithContextMutex.Unlock()
	if fake.WaitUntilLoadBalancerExistsWithContextStub != nil {
		return fake.WaitUntilLoadBalancerExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancerExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContextCallCount() int {
	fake.waitUntilLoadBalancerExistsWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilLoadBalancerExistsWithContextArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error) {
	fake.waitUntilLoadBalancerExistsWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsWithContextStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancersInput, []request.WaiterOption) {
	fake.waitUntilLoadBalancerExistsWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancerExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContextReturns(result1 error) {
	fake.waitUntilLoadBalancerExistsWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsWithContextStub = nil
	fake.waitUntilLoadBalancerExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancerExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancerExistsWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancerExistsWithContextStub = nil
	if fake.waitUntilLoadBalancerExistsWithContextReturnsOnCall == nil {
		fake.waitUntilLoadBalancerExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancerExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeleted(arg1 *elbv2.DescribeLoadBalancersInput) error {
	fake.waitUntilLoadBalancersDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancersDeletedReturnsOnCall[len(fake.waitUntilLoadBalancersDeletedArgsForCall)]
	fake.waitUntilLoadBalancersDeletedArgsForCall = append(fake.waitUntilLoadBalancersDeletedArgsForCall, struct {
		arg1 *elbv2.DescribeLoadBalancersInput
	}{arg1})
	fake.recordInvocation("WaitUntilLoadBalancersDeleted", []interface{}{arg1})
	fake.waitUntilLoadBalancersDeletedMutex.Unlock()
	if fake.WaitUntilLoadBalancersDeletedStub != nil {
		return fake.WaitUntilLoadBalancersDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancersDeletedReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedCallCount() int {
	fake.waitUntilLoadBalancersDeletedMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedMutex.RUnlock()
	return len(fake.waitUntilLoadBalancersDeletedArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedCalls(stub func(*elbv2.DescribeLoadBalancersInput) error) {
	fake.waitUntilLoadBalancersDeletedMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedArgsForCall(i int) *elbv2.DescribeLoadBalancersInput {
	fake.waitUntilLoadBalancersDeletedMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancersDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedReturns(result1 error) {
	fake.waitUntilLoadBalancersDeletedMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedStub = nil
	fake.waitUntilLoadBalancersDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancersDeletedMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedStub = nil
	if fake.waitUntilLoadBalancersDeletedReturnsOnCall == nil {
		fake.waitUntilLoadBalancersDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancersDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContext(arg1 aws.Context, arg2 *elbv2.DescribeLoadBalancersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilLoadBalancersDeletedWithContextReturnsOnCall[len(fake.waitUntilLoadBalancersDeletedWithContextArgsForCall)]
	fake.waitUntilLoadBalancersDeletedWithContextArgsForCall = append(fake.waitUntilLoadBalancersDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeLoadBalancersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilLoadBalancersDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilLoadBalancersDeletedWithContextMutex.Unlock()
	if fake.WaitUntilLoadBalancersDeletedWithContextStub != nil {
		return fake.WaitUntilLoadBalancersDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilLoadBalancersDeletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContextCallCount() int {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilLoadBalancersDeletedWithContextArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContextCalls(stub func(aws.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error) {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedWithContextStub = stub
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeLoadBalancersInput, []request.WaiterOption) {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilLoadBalancersDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContextReturns(result1 error) {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedWithContextStub = nil
	fake.waitUntilLoadBalancersDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilLoadBalancersDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilLoadBalancersDeletedWithContextMutex.Lock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.Unlock()
	fake.WaitUntilLoadBalancersDeletedWithContextStub = nil
	if fake.waitUntilLoadBalancersDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilLoadBalancersDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilLoadBalancersDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetDeregistered(arg1 *elbv2.DescribeTargetHealthInput) error {
	fake.waitUntilTargetDeregisteredMutex.Lock()
	ret, specificReturn := fake.waitUntilTargetDeregisteredReturnsOnCall[len(fake.waitUntilTargetDeregisteredArgsForCall)]
	fake.waitUntilTargetDeregisteredArgsForCall = append(fake.waitUntilTargetDeregisteredArgsForCall, struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}{arg1})
	fake.recordInvocation("WaitUntilTargetDeregistered", []interface{}{arg1})
	fake.waitUntilTargetDeregisteredMutex.Unlock()
	if fake.WaitUntilTargetDeregisteredStub != nil {
		return fake.WaitUntilTargetDeregisteredStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTargetDeregisteredReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredCallCount() int {
	fake.waitUntilTargetDeregisteredMutex.RLock()
	defer fake.waitUntilTargetDeregisteredMutex.RUnlock()
	return len(fake.waitUntilTargetDeregisteredArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredCalls(stub func(*elbv2.DescribeTargetHealthInput) error) {
	fake.waitUntilTargetDeregisteredMutex.Lock()
	defer fake.waitUntilTargetDeregisteredMutex.Unlock()
	fake.WaitUntilTargetDeregisteredStub = stub
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredArgsForCall(i int) *elbv2.DescribeTargetHealthInput {
	fake.waitUntilTargetDeregisteredMutex.RLock()
	defer fake.waitUntilTargetDeregisteredMutex.RUnlock()
	argsForCall := fake.waitUntilTargetDeregisteredArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredReturns(result1 error) {
	fake.waitUntilTargetDeregisteredMutex.Lock()
	defer fake.waitUntilTargetDeregisteredMutex.Unlock()
	fake.WaitUntilTargetDeregisteredStub = nil
	fake.waitUntilTargetDeregisteredReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredReturnsOnCall(i int, result1 error) {
	fake.waitUntilTargetDeregisteredMutex.Lock()
	defer fake.waitUntilTargetDeregisteredMutex.Unlock()
	fake.WaitUntilTargetDeregisteredStub = nil
	if fake.waitUntilTargetDeregisteredReturnsOnCall == nil {
		fake.waitUntilTargetDeregisteredReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTargetDeregisteredReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetHealthInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilTargetDeregisteredWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilTargetDeregisteredWithContextReturnsOnCall[len(fake.waitUntilTargetDeregisteredWithContextArgsForCall)]
	fake.waitUntilTargetDeregisteredWithContextArgsForCall = append(fake.waitUntilTargetDeregisteredWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilTargetDeregisteredWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilTargetDeregisteredWithContextMutex.Unlock()
	if fake.WaitUntilTargetDeregisteredWithContextStub != nil {
		return fake.WaitUntilTargetDeregisteredWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTargetDeregisteredWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContextCallCount() int {
	fake.waitUntilTargetDeregisteredWithContextMutex.RLock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.RUnlock()
	return len(fake.waitUntilTargetDeregisteredWithContextArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error) {
	fake.waitUntilTargetDeregisteredWithContextMutex.Lock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.Unlock()
	fake.WaitUntilTargetDeregisteredWithContextStub = stub
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetHealthInput, []request.WaiterOption) {
	fake.waitUntilTargetDeregisteredWithContextMutex.RLock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilTargetDeregisteredWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContextReturns(result1 error) {
	fake.waitUntilTargetDeregisteredWithContextMutex.Lock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.Unlock()
	fake.WaitUntilTargetDeregisteredWithContextStub = nil
	fake.waitUntilTargetDeregisteredWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetDeregisteredWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilTargetDeregisteredWithContextMutex.Lock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.Unlock()
	fake.WaitUntilTargetDeregisteredWithContextStub = nil
	if fake.waitUntilTargetDeregisteredWithContextReturnsOnCall == nil {
		fake.waitUntilTargetDeregisteredWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTargetDeregisteredWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetInService(arg1 *elbv2.DescribeTargetHealthInput) error {
	fake.waitUntilTargetInServiceMutex.Lock()
	ret, specificReturn := fake.waitUntilTargetInServiceReturnsOnCall[len(fake.waitUntilTargetInServiceArgsForCall)]
	fake.waitUntilTargetInServiceArgsForCall = append(fake.waitUntilTargetInServiceArgsForCall, struct {
		arg1 *elbv2.DescribeTargetHealthInput
	}{arg1})
	fake.recordInvocation("WaitUntilTargetInService", []interface{}{arg1})
	fake.waitUntilTargetInServiceMutex.Unlock()
	if fake.WaitUntilTargetInServiceStub != nil {
		return fake.WaitUntilTargetInServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTargetInServiceReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceCallCount() int {
	fake.waitUntilTargetInServiceMutex.RLock()
	defer fake.waitUntilTargetInServiceMutex.RUnlock()
	return len(fake.waitUntilTargetInServiceArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceCalls(stub func(*elbv2.DescribeTargetHealthInput) error) {
	fake.waitUntilTargetInServiceMutex.Lock()
	defer fake.waitUntilTargetInServiceMutex.Unlock()
	fake.WaitUntilTargetInServiceStub = stub
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceArgsForCall(i int) *elbv2.DescribeTargetHealthInput {
	fake.waitUntilTargetInServiceMutex.RLock()
	defer fake.waitUntilTargetInServiceMutex.RUnlock()
	argsForCall := fake.waitUntilTargetInServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceReturns(result1 error) {
	fake.waitUntilTargetInServiceMutex.Lock()
	defer fake.waitUntilTargetInServiceMutex.Unlock()
	fake.WaitUntilTargetInServiceStub = nil
	fake.waitUntilTargetInServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceReturnsOnCall(i int, result1 error) {
	fake.waitUntilTargetInServiceMutex.Lock()
	defer fake.waitUntilTargetInServiceMutex.Unlock()
	fake.WaitUntilTargetInServiceStub = nil
	if fake.waitUntilTargetInServiceReturnsOnCall == nil {
		fake.waitUntilTargetInServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTargetInServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContext(arg1 aws.Context, arg2 *elbv2.DescribeTargetHealthInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilTargetInServiceWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilTargetInServiceWithContextReturnsOnCall[len(fake.waitUntilTargetInServiceWithContextArgsForCall)]
	fake.waitUntilTargetInServiceWithContextArgsForCall = append(fake.waitUntilTargetInServiceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elbv2.DescribeTargetHealthInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilTargetInServiceWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilTargetInServiceWithContextMutex.Unlock()
	if fake.WaitUntilTargetInServiceWithContextStub != nil {
		return fake.WaitUntilTargetInServiceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTargetInServiceWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContextCallCount() int {
	fake.waitUntilTargetInServiceWithContextMutex.RLock()
	defer fake.waitUntilTargetInServiceWithContextMutex.RUnlock()
	return len(fake.waitUntilTargetInServiceWithContextArgsForCall)
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContextCalls(stub func(aws.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error) {
	fake.waitUntilTargetInServiceWithContextMutex.Lock()
	defer fake.waitUntilTargetInServiceWithContextMutex.Unlock()
	fake.WaitUntilTargetInServiceWithContextStub = stub
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContextArgsForCall(i int) (aws.Context, *elbv2.DescribeTargetHealthInput, []request.WaiterOption) {
	fake.waitUntilTargetInServiceWithContextMutex.RLock()
	defer fake.waitUntilTargetInServiceWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilTargetInServiceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContextReturns(result1 error) {
	fake.waitUntilTargetInServiceWithContextMutex.Lock()
	defer fake.waitUntilTargetInServiceWithContextMutex.Unlock()
	fake.WaitUntilTargetInServiceWithContextStub = nil
	fake.waitUntilTargetInServiceWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) WaitUntilTargetInServiceWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilTargetInServiceWithContextMutex.Lock()
	defer fake.waitUntilTargetInServiceWithContextMutex.Unlock()
	fake.WaitUntilTargetInServiceWithContextStub = nil
	if fake.waitUntilTargetInServiceWithContextReturnsOnCall == nil {
		fake.waitUntilTargetInServiceWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTargetInServiceWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeELBV2API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addListenerCertificatesMutex.RLock()
	defer fake.addListenerCertificatesMutex.RUnlock()
	fake.addListenerCertificatesRequestMutex.RLock()
	defer fake.addListenerCertificatesRequestMutex.RUnlock()
	fake.addListenerCertificatesWithContextMutex.RLock()
	defer fake.addListenerCertificatesWithContextMutex.RUnlock()
	fake.addTagsMutex.RLock()
	defer fake.addTagsMutex.RUnlock()
	fake.addTagsRequestMutex.RLock()
	defer fake.addTagsRequestMutex.RUnlock()
	fake.addTagsWithContextMutex.RLock()
	defer fake.addTagsWithContextMutex.RUnlock()
	fake.createListenerMutex.RLock()
	defer fake.createListenerMutex.RUnlock()
	fake.createListenerRequestMutex.RLock()
	defer fake.createListenerRequestMutex.RUnlock()
	fake.createListenerWithContextMutex.RLock()
	defer fake.createListenerWithContextMutex.RUnlock()
	fake.createLoadBalancerMutex.RLock()
	defer fake.createLoadBalancerMutex.RUnlock()
	fake.createLoadBalancerRequestMutex.RLock()
	defer fake.createLoadBalancerRequestMutex.RUnlock()
	fake.createLoadBalancerWithContextMutex.RLock()
	defer fake.createLoadBalancerWithContextMutex.RUnlock()
	fake.createRuleMutex.RLock()
	defer fake.createRuleMutex.RUnlock()
	fake.createRuleRequestMutex.RLock()
	defer fake.createRuleRequestMutex.RUnlock()
	fake.createRuleWithContextMutex.RLock()
	defer fake.createRuleWithContextMutex.RUnlock()
	fake.createTargetGroupMutex.RLock()
	defer fake.createTargetGroupMutex.RUnlock()
	fake.createTargetGroupRequestMutex.RLock()
	defer fake.createTargetGroupRequestMutex.RUnlock()
	fake.createTargetGroupWithContextMutex.RLock()
	defer fake.createTargetGroupWithContextMutex.RUnlock()
	fake.deleteListenerMutex.RLock()
	defer fake.deleteListenerMutex.RUnlock()
	fake.deleteListenerRequestMutex.RLock()
	defer fake.deleteListenerRequestMutex.RUnlock()
	fake.deleteListenerWithContextMutex.RLock()
	defer fake.deleteListenerWithContextMutex.RUnlock()
	fake.deleteLoadBalancerMutex.RLock()
	defer fake.deleteLoadBalancerMutex.RUnlock()
	fake.deleteLoadBalancerRequestMutex.RLock()
	defer fake.deleteLoadBalancerRequestMutex.RUnlock()
	fake.deleteLoadBalancerWithContextMutex.RLock()
	defer fake.deleteLoadBalancerWithContextMutex.RUnlock()
	fake.deleteRuleMutex.RLock()
	defer fake.deleteRuleMutex.RUnlock()
	fake.deleteRuleRequestMutex.RLock()
	defer fake.deleteRuleRequestMutex.RUnlock()
	fake.deleteRuleWithContextMutex.RLock()
	defer fake.deleteRuleWithContextMutex.RUnlock()
	fake.deleteTargetGroupMutex.RLock()
	defer fake.deleteTargetGroupMutex.RUnlock()
	fake.deleteTargetGroupRequestMutex.RLock()
	defer fake.deleteTargetGroupRequestMutex.RUnlock()
	fake.deleteTargetGroupWithContextMutex.RLock()
	defer fake.deleteTargetGroupWithContextMutex.RUnlock()
	fake.deregisterTargetsMutex.RLock()
	defer fake.deregisterTargetsMutex.RUnlock()
	fake.deregisterTargetsRequestMutex.RLock()
	defer fake.deregisterTargetsRequestMutex.RUnlock()
	fake.deregisterTargetsWithContextMutex.RLock()
	defer fake.deregisterTargetsWithContextMutex.RUnlock()
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	fake.describeListenerCertificatesMutex.RLock()
	defer fake.describeListenerCertificatesMutex.RUnlock()
	fake.describeListenerCertificatesRequestMutex.RLock()
	defer fake.describeListenerCertificatesRequestMutex.RUnlock()
	fake.describeListenerCertificatesWithContextMutex.RLock()
	defer fake.describeListenerCertificatesWithContextMutex.RUnlock()
	fake.describeListenersMutex.RLock()
	defer fake.describeListenersMutex.RUnlock()
	fake.describeListenersPagesMutex.RLock()
	defer fake.describeListenersPagesMutex.RUnlock()
	fake.describeListenersPagesWithContextMutex.RLock()
	defer fake.describeListenersPagesWithContextMutex.RUnlock()
	fake.describeListenersRequestMutex.RLock()
	defer fake.describeListenersRequestMutex.RUnlock()
	fake.describeListenersWithContextMutex.RLock()
	defer fake.describeListenersWithContextMutex.RUnlock()
	fake.describeLoadBalancerAttributesMutex.RLock()
	defer fake.describeLoadBalancerAttributesMutex.RUnlock()
	fake.describeLoadBalancerAttributesRequestMutex.RLock()
	defer fake.describeLoadBalancerAttributesRequestMutex.RUnlock()
	fake.describeLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.describeLoadBalancerAttributesWithContextMutex.RUnlock()
	fake.describeLoadBalancersMutex.RLock()
	defer fake.describeLoadBalancersMutex.RUnlock()
	fake.describeLoadBalancersPagesMutex.RLock()
	defer fake.describeLoadBalancersPagesMutex.RUnlock()
	fake.describeLoadBalancersPagesWithContextMutex.RLock()
	defer fake.describeLoadBalancersPagesWithContextMutex.RUnlock()
	fake.describeLoadBalancersRequestMutex.RLock()
	defer fake.describeLoadBalancersRequestMutex.RUnlock()
	fake.describeLoadBalancersWithContextMutex.RLock()
	defer fake.describeLoadBalancersWithContextMutex.RUnlock()
	fake.describeRulesMutex.RLock()
	defer fake.describeRulesMutex.RUnlock()
	fake.describeRulesRequestMutex.RLock()
	defer fake.describeRulesRequestMutex.RUnlock()
	fake.describeRulesWithContextMutex.RLock()
	defer fake.describeRulesWithContextMutex.RUnlock()
	fake.describeSSLPoliciesMutex.RLock()
	defer fake.describeSSLPoliciesMutex.RUnlock()
	fake.describeSSLPoliciesRequestMutex.RLock()
	defer fake.describeSSLPoliciesRequestMutex.RUnlock()
	fake.describeSSLPoliciesWithContextMutex.RLock()
	defer fake.describeSSLPoliciesWithContextMutex.RUnlock()
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	fake.describeTargetGroupAttributesMutex.RLock()
	defer fake.describeTargetGroupAttributesMutex.RUnlock()
	fake.describeTargetGroupAttributesRequestMutex.RLock()
	defer fake.describeTargetGroupAttributesRequestMutex.RUnlock()
	fake.describeTargetGroupAttributesWithContextMutex.RLock()
	defer fake.describeTargetGroupAttributesWithContextMutex.RUnlock()
	fake.describeTargetGroupsMutex.RLock()
	defer fake.describeTargetGroupsMutex.RUnlock()
	fake.describeTargetGroupsPagesMutex.RLock()
	defer fake.describeTargetGroupsPagesMutex.RUnlock()
	fake.describeTargetGroupsPagesWithContextMutex.RLock()
	defer fake.describeTargetGroupsPagesWithContextMutex.RUnlock()
	fake.describeTargetGroupsRequestMutex.RLock()
	defer fake.describeTargetGroupsRequestMutex.RUnlock()
	fake.describeTargetGroupsWithContextMutex.RLock()
	defer fake.describeTargetGroupsWithContextMutex.RUnlock()
	fake.describeTargetHealthMutex.RLock()
	defer fake.describeTargetHealthMutex.RUnlock()
	fake.describeTargetHealthRequestMutex.RLock()
	defer fake.describeTargetHealthRequestMutex.RUnlock()
	fake.describeTargetHealthWithContextMutex.RLock()
	defer fake.describeTargetHealthWithContextMutex.RUnlock()
	fake.modifyListenerMutex.RLock()
	defer fake.modifyListenerMutex.RUnlock()
	fake.modifyListenerRequestMutex.RLock()
	defer fake.modifyListenerRequestMutex.RUnlock()
	fake.modifyListenerWithContextMutex.RLock()
	defer fake.modifyListenerWithContextMutex.RUnlock()
	fake.modifyLoadBalancerAttributesMutex.RLock()
	defer fake.modifyLoadBalancerAttributesMutex.RUnlock()
	fake.modifyLoadBalancerAttributesRequestMutex.RLock()
	defer fake.modifyLoadBalancerAttributesRequestMutex.RUnlock()
	fake.modifyLoadBalancerAttributesWithContextMutex.RLock()
	defer fake.modifyLoadBalancerAttributesWithContextMutex.RUnlock()
	fake.modifyRuleMutex.RLock()
	defer fake.modifyRuleMutex.RUnlock()
	fake.modifyRuleRequestMutex.RLock()
	defer fake.modifyRuleRequestMutex.RUnlock()
	fake.modifyRuleWithContextMutex.RLock()
	defer fake.modifyRuleWithContextMutex.RUnlock()
	fake.modifyTargetGroupMutex.RLock()
	defer fake.modifyTargetGroupMutex.RUnlock()
	fake.modifyTargetGroupAttributesMutex.RLock()
	defer fake.modifyTargetGroupAttributesMutex.RUnlock()
	fake.modifyTargetGroupAttributesRequestMutex.RLock()
	defer fake.modifyTargetGroupAttributesRequestMutex.RUnlock()
	fake.modifyTargetGroupAttributesWithContextMutex.RLock()
	defer fake.modifyTargetGroupAttributesWithContextMutex.RUnlock()
	fake.modifyTargetGroupRequestMutex.RLock()
	defer fake.modifyTargetGroupRequestMutex.RUnlock()
	fake.modifyTargetGroupWithContextMutex.RLock()
	defer fake.modifyTargetGroupWithContextMutex.RUnlock()
	fake.registerTargetsMutex.RLock()
	defer fake.registerTargetsMutex.RUnlock()
	fake.registerTargetsRequestMutex.RLock()
	defer fake.registerTargetsRequestMutex.RUnlock()
	fake.registerTargetsWithContextMutex.RLock()
	defer fake.registerTargetsWithContextMutex.RUnlock()
	fake.removeListenerCertificatesMutex.RLock()
	defer fake.removeListenerCertificatesMutex.RUnlock()
	fake.removeListenerCertificatesRequestMutex.RLock()
	defer fake.removeListenerCertificatesRequestMutex.RUnlock()
	fake.removeListenerCertificatesWithContextMutex.RLock()
	defer fake.removeListenerCertificatesWithContextMutex.RUnlock()
	fake.removeTagsMutex.RLock()
	defer fake.removeTagsMutex.RUnlock()
	fake.removeTagsRequestMutex.RLock()
	defer fake.removeTagsRequestMutex.RUnlock()
	fake.removeTagsWithContextMutex.RLock()
	defer fake.removeTagsWithContextMutex.RUnlock()
	fake.setIpAddressTypeMutex.RLock()
	defer fake.setIpAddressTypeMutex.RUnlock()
	fake.setIpAddressTypeRequestMutex.RLock()
	defer fake.setIpAddressTypeRequestMutex.RUnlock()
	fake.setIpAddressTypeWithContextMutex.RLock()
	defer fake.setIpAddressTypeWithContextMutex.RUnlock()
	fake.setRulePrioritiesMutex.RLock()
	defer fake.setRulePrioritiesMutex.RUnlock()
	fake.setRulePrioritiesRequestMutex.RLock()
	defer fake.setRulePrioritiesRequestMutex.RUnlock()
	fake.setRulePrioritiesWithContextMutex.RLock()
	defer fake.setRulePrioritiesWithContextMutex.RUnlock()
	fake.setSecurityGroupsMutex.RLock()
	defer fake.setSecurityGroupsMutex.RUnlock()
	fake.setSecurityGroupsRequestMutex.RLock()
	defer fake.setSecurityGroupsRequestMutex.RUnlock()
	fake.setSecurityGroupsWithContextMutex.RLock()
	defer fake.setSecurityGroupsWithContextMutex.RUnlock()
	fake.setSubnetsMutex.RLock()
	defer fake.setSubnetsMutex.RUnlock()
	fake.setSubnetsRequestMutex.RLock()
	defer fake.setSubnetsRequestMutex.RUnlock()
	fake.setSubnetsWithContextMutex.RLock()
	defer fake.setSubnetsWithContextMutex.RUnlock()
	fake.waitUntilLoadBalancerAvailableMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableMutex.RUnlock()
	fake.waitUntilLoadBalancerAvailableWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerAvailableWithContextMutex.RUnlock()
	fake.waitUntilLoadBalancerExistsMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsMutex.RUnlock()
	fake.waitUntilLoadBalancerExistsWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancerExistsWithContextMutex.RUnlock()
	fake.waitUntilLoadBalancersDeletedMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedMutex.RUnlock()
	fake.waitUntilLoadBalancersDeletedWithContextMutex.RLock()
	defer fake.waitUntilLoadBalancersDeletedWithContextMutex.RUnlock()
	fake.waitUntilTargetDeregisteredMutex.RLock()
	defer fake.waitUntilTargetDeregisteredMutex.RUnlock()
	fake.waitUntilTargetDeregisteredWithContextMutex.RLock()
	defer fake.waitUntilTargetDeregisteredWithContextMutex.RUnlock()
	fake.waitUntilTargetInServiceMutex.RLock()
	defer fake.waitUntilTargetInServiceMutex.RUnlock()
	fake.waitUntilTargetInServiceWithContextMutex.RLock()
	defer fake.waitUntilTargetInServiceWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeELBV2API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ elbv2iface.ELBV2API = new(FakeELBV2API)
